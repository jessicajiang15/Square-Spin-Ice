include("entanglement helper.jl")
include("nlchelpers.jl")
include("metropolisHelpers.jl")
using BenchmarkTools
using LsqFit
using Images,TestImages
using FileIO
using JLD2
using PlotThemes
using TimerOutputs

function test()
    plaquettes=generateCheckerboardNoCrossPlaquettes(4);
    println(length(plaquettes));
    println(plaquettes);
end

function testMeasures()
    N=4;
    println("hello");
    states::Vector{Int}=[1, 2, 3];
    map::Dict{Int, Int}=Dict([(1, 1), (2, 2), (3, 3)]);
    testState::Vector{Float64}=[1/sqrt(2), 1/sqrt(4), 1/sqrt(4)];
    sz=calculateSz(testState, states, N);
    #sx=calculateSx(testState, states, map, N);
    ind=indiciesAllSquares(N);
    #stflippability=calculateStaggeredFlippability(testState, states, ind, N);
    println("sz, ", sz);
    #println("sx, ", sx);
    #println("flip, ", stflippability);

end

function testPlot()
    J=1;
    N=4;
    hList=generateHListUniform(J, 20);
    bonds = bondListFourNeighbors(N);
    plotSzVersusHTransverse(hList, J, bonds, N);
end

function testbond()
    bonds=bondListFrustrated(4)
    for i in bonds
        if(containsSite(1, i))
            println(i);
        end
    end
end

function thetest()
    #list1=Int[1, 2, 3];
    #list2=Int[1, 2, 3];
    x = 1:10; y = rand(10, 2) # 2 columns means two lines
    plot(x, y)

    list=Any[x, y];

    #println(typeof(list[1]));
    #theplot(list, 2, "lmao")

end

function entanglementtest()
    println("starting");
    println("starting");

    #00,01,10,11
    #0000, 0001, 0000.... 1111
    N=4
    eigenvector=Float64[1/sqrt(2), 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/sqrt(2)];
    println(length(eigenvector));
    listA=Int[1, 2];
    states::Array{Int}=Int[];
    for i=0:2^(N)-1
        push!(states, i);
    end
    println("calculating entropy");
    #eigenvector, states, listA, N
    println(getEntanglementEntropy(eigenvector, states, listA, N));
end

function lol()
        println("starting");
    println("lmao");
    N=7;
    listA=Int[1];
    state=9
    #=
    N=2;
    listA=Int[0, 1];
    for i=0:15
        println(getBNum(i, listA, 2))
    end
=#
        getA=getANum(state, listA);
        getB=getBNum(state, listA, 4);
        println("a", getA);
        println("b", getB);
end

function testExtractDigits()
    listA=Int[1, 2, 4, 6, 9, 10, 11, 12];
    getA=getANum(7766, listA);
    getB=getBNum(7766, listA, 2);
    println("A ", getA);
    println("B ", getB);
end

function calculategsentanglement()
    println("Starting!!");
    @time begin
    N=4;
    J=1
    J2=0
    entropies=Any[];
    hmin=0.1;
    hmax=2;

        hs=generateHListUniform(hmin, hmax, 100);
        listA=plaquetteIndicies(generateCheckerboardPlaquettes(N)[1], N);
        println(listA);
        bonds = bondListFrustrated(N)
        for i=1:length(hs)
            temp = calculateEigensystemTransverse(N*N, J, J2, hs[i], bonds,"lanczos", "one", hs[i], 0);
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);
            entropy=getEntanglementEntropy(eigensystem[2], temp[3][eigensystem[3]], listA, N*N);
            push!(entropies, entropy);
        end
    #println(entropy);
    end
    println(entropies)
    plot(hs, entropies)
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglementplot J2: "*string(J2)*", hmin: "*string(hmin)*", hmax: "*string(hmax)*".png");

end


function graphTest()
    x=[0.1, 0.14500000000000002, 0.19000000000000003, 0.23500000000000004, 0.28, 0.325, 0.37, 0.415, 0.45999999999999996, 0.505, 0.55, 0.5950000000000001, 0.6400000000000001, 0.6850000000000002, 0.7300000000000002, 0.7750000000000002, 0.8200000000000003, 0.8650000000000003, 0.9100000000000004, 0.9550000000000004]
y = [987.6543209876542, 987.6543209876542, 12.728366825097414, 987.6543209876542, 987.6543209876542, 987.6543209876542, 5.877008984993465, 987.6543209876542, 2.5292069246633604, 987.6543209876542, 987.6543209876542, 0.9811808433409414, 0.7661818838389369, 0.6130510365310856, 0.5004577612292375, 0.4153976405436494, 0.34963484689566593, 987.6543209876542, 987.6543209876542, 0.2222886060269335]
plot(x, y)
display(plot(x, y))
#savefig("./plot.png")
end




function plottest()
    x=[0.1, 0.138, 0.17600000000000002, 0.21400000000000002, 0.252, 0.29, 0.32799999999999996, 0.36599999999999994, 0.4039999999999999, 0.4419999999999999, 0.47999999999999987, 0.5179999999999999, 0.5559999999999999, 0.594, 0.632, 0.67, 0.7080000000000001, 0.7460000000000001, 0.7840000000000001, 0.8220000000000002, 0.8600000000000002, 0.8980000000000002, 0.9360000000000003, 0.9740000000000003, 1, 1.0120000000000002, 1.0500000000000003, 1.0880000000000003, 1.1260000000000003, 1.1640000000000004, 1.2020000000000004, 1.2400000000000004, 1.2780000000000005]
    x1=[1.3160000000000005, 1.3540000000000005, 1.3920000000000006, 1.4300000000000006, 1.4680000000000006, 1.5060000000000007, 1.5440000000000007, 1.5820000000000007, 1.6200000000000008, 1.6580000000000008, 1.6960000000000008, 1.7340000000000009, 1.772000000000001, 1.810000000000001, 1.848000000000001, 1.886000000000001, 1.924000000000001, 1.962000000000001]

    append!(x, x1);

    println(length(x))

 y=[0.6931554973559289, 0.6931566513135997, 0.6931580030135706, 0.6931595917017824, 0.6931614655626608, 0.6931636840503151, 0.6931663209145511, 0.6931694681579544, 0.6931732412518335, 0.6931777860709394, 0.693183288199999, 0.6931899855520833, 0.6931981856727243, 0.6932082897741164, 0.6932208266069516, 0.693236501021826, 0.6932562650702393, 0.6932814250104411, 0.6933138088521826, 0.693356046260912, 0.6934120973550814, 0.6934885492062778, 0.6936001527141216, 0.693848810805625, 1.7896261747186408, 1.3881081056276219, 1.3863462082902736, 1.3862597575483824, 1.3862399529019687, 1.3862350147667382, 1.3862354160773416, 1.386238100437923, 1.3862417742713433]
 y1=[1.3862458065457506, 1.3862498686830083, 1.3862537872721254, 1.3862574741067692, 1.386260889496157, 1.3862640217425914, 1.3862668751786122, 1.386269463017255, 1.386271803024712, 1.3862739148966676, 1.3862758186831787, 1.3862775338666122, 1.3862790788484831, 1.386280470692036, 1.3862817250233803, 1.3862828560291103, 1.386283876510647, 1.386284797969876]

 append!(y, y1);
 println(length(y))
    display(plot(x, y));
    savefig("./j1j2entanglement");
end



function innerproducttest()
    println("Starting inner");
    eigenvector=[1/sqrt(2), 1/sqrt(2), 0, 0];
    eigenvector2=[1/sqrt(2), 1/sqrt(2), 0, 0];

    states=[1, 2, 3, 4];
    states2=[1, 3, 5, 6];
    println(innerProduct(eigenvector, states, eigenvector2, states2));
end



function thesztest2()
    println("Starting sz!!");
    @time begin
    N=16;
    J=1
    h=0.1
    ms=Any[];
    bonds = bondListFrustrated(4)

        temp = calculateEigensystemTransverse(N, J, 1, h, bonds,"lanczos", "one", h, 0);
        eigenvalues = temp[1]
        eigenvectors = temp[2]
        eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);

        println("length of temp[3] ", length(temp[3]))
        println("length of temp ", length(temp))
        println("length of eigensystem ", length(eigensystem))
        println("eigensystem[3] ", eigensystem[3]);
        sz=calculateSz(eigensystem[2], temp[3][eigensystem[3]], N);
        #szm=szMatrix(eigensystem[2], temp[3][eigensystem[3]], N);
        #entropy=getEntanglementEntropy(eigenvectors[1], temp[3][1], listA, N);

    println("ms: ", sz);
    #println("ms matrix: ", szm);
end
end

function fidTest2()
    println("starting fid");
    println("starting fid");


    num=10;
    N=4;
    J=1;
    J2=1;
    hmin=0.1;
    hmax=1;
    bonds = bondListFrustrated(N)
    hs=generateHListUniform(hmin, hmax, num);
    println("hs length: ", length(hs));

    println("hs", hs);

    fids=calculateFidelity(hmin, hmax, num, N*N, J, J2, bonds);
    println("fids: ", fids);
    println("fids length: ", length(fids));

    plot(hs, fids);
    savefig("./fidelityplot J2 is 0.png");
end



function sPi()
    println("Starting sz!!");
    @time begin
    N=4;
    J=1
    J2=1
    h=0.1
    bonds = bondListFrustrated(N)
    spis=Any[];
    temp =calculateEigensystemTransverseNoSymmetry(N*N, J, J2, h, bonds,"lanczos", "one", h, 0, "H1");
        #temp = calculateEigensystemTransverse(N, J, h, bonds,"lanczos", "one", h, 0);
        eigenvalues = temp[1]
        eigenvectors = temp[2]
        eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);
        println("eigenvalues ", eigenvalues);
        spi=calculateSPiSzNew(eigenvectors[1], temp[3][1], N^2);
        #entropy=getEntanglementEntropy(eigenvectors[1], temp[3][1], listA, N);
        println("sipi ", spi);
end
end





function calculateSpiTestAbs()
    println("Starting sz!!");
    println("Starting sz!!");

    @time begin

    N=4;
    J=1
    hs=generateHListUniform(0.1, 1, 50);
    spis=Any[];
    bonds = bondListFrustrated(N)
    println("hs: ", hs);
    for i=1:length(hs)
        println("starting h: ", hs[i])
        temp =calculateEigensystemTransverseNoSymmetry(N, J, hs[i], bonds,"lanczos", "one", hs[i], 0, "H1");
        eigenvalues = temp[1]
        eigenvectors = temp[2]
        #eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);

        #println("length of temp[3] ", length(temp[3]))
        #println("length of temp ", length(temp))
        #println("length of eigensystem ", length(eigensystem))

        #println("eigensystem[3] ", eigensystem[3]);
        println("starting time");
        @time begin
        spi=calculateSPiSzNewAbs(eigenvectors[1], temp[3][1], N);
    end
        println("h: ", hs[i], " , spi: ", spi);

        push!(spis, spi);

    end
    println("spis: ", spis);
    end
    #TODO: plot it
    plot(hs, spis)
    savefig("./spiAbsplot.png")
end


function plaquetteTests()
    N=4
    squareIndicies=generateListsofPlaquetteIndiciesFlip(N);
    println("Square indicies: ", squareIndicies);
    state=9508;
    for i=1:length(squareIndicies)
        println("plaquette: ", squareIndicies[i], " , number: ", getPlaquetteNumber(squareIndicies[i][1], N))
    end
end

function plaquetteTest()
    N=4
    for i=1:N*N
        println("number: ", getPlaquetteNumberStart0(i, N))
    end
end

function fileiotest()
r=readdlm("graphs.txt"; skipblanks=false);
println(r[10, 1]);
#println(r);
#println((r));
#println((r));
#=
count=1;
num=r[1, count];
while(num!="")
    if(count==1)
        graphNum=num;
    elseif(count==2)
        numSites=num;
    elseif(count==3)
        numNearestNeighborBonds=num;
    elseif(count==4)
        numFarNeighborBonds=num;
    elseif(count==5)
        numSquares=num;
    elseif(count==6)
        numPlaquettes=num;
    elseif(count==7)
        numSubgraphs=num;
    elseif(count==8)
        latticeConstant=num/2;
    end
    num=r[1, count];
    println(num);
    count+=1;
end
        #close(file);
        =#
end


function filetest()
    d=readdlm("graphs.txt"; skipblanks=false);
    r=readFromGraphFile();
    println(r);
    #println(r);
end

function testlol()
    @time begin
    order=56;
    graphs=readFromGraphFile();
    sz=calculateInfiniteLatticeSz(order, 1, 10, graphs, 0)
    println("sz ", sz);
end
end


function huh()
    N=4;
    listA=plaquetteIndicies(generateCheckerboardPlaquettes(N)[1], N);
    println(listA);
end



function entanglementtest2()
    println("Starting!!");
    @time begin
    N=4;
    J=1
    J2=1;
    h=0.1

        listA=plaquetteIndicies(generateCheckerboardNoCrossPlaquettes(N)[1], N);
        println(listA);
        bonds = bondListFrustrated(N)
            temp = calculateEigensystemTransverse(N*N, J, J2, h, bonds,"lanczos", "one", h, 0);
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);
            println(eigenvalues);
            entropy=getEntanglementEntropy(eigensystem[2], temp[3][eigensystem[3]], listA, N*N);
    #println(entropy);
    println(entropy)
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
end

end


function spitest()
    println("Starting sz!!");
    println("Starting sz!!");

    @time begin
    N=4;
    J=1
    J2=1;
    spis=Any[];
    h=0.1
    bonds = bondListFrustrated(N)
        temp =calculateEigensystemTransverseNoSymmetry(N*N, J, J2, h, bonds,"lanczos", "one", h, 0, "H1");
        eigenvalues = temp[1]
        eigenvectors = temp[2]
        #eigensystem=getLowestLyingStates(eigenvalues, eigenvectors);

        #println("length of temp[3] ", length(temp[3]))
        #println("length of temp ", length(temp))
        #println("length of eigensystem ", length(eigensystem))

        #println("eigensystem[3] ", eigensystem[3]);
        println("starting time");
        @time begin
        spi=calculateSPiSzNew(eigenvectors[1], temp[3][1], N*N);
        println("spi", spi);
    end
    end
end


function testNumbering()
    for i=1:16
        println("i, ", i, ", num: ", getPlaquetteNumber(i, 4));
    end
end

function testlo()
    graphs=readFromGraphFile();

    println(getLastGraphNumOrder(6, graphs));
end


function scalesz()
    hs= [0.1, 0.11900000000000001, 0.138, 0.157, 0.176, 0.19499999999999998, 0.21399999999999997, 0.23299999999999996, 0.25199999999999995, 0.27099999999999996, 0.29, 0.309, 0.328, 0.34700000000000003, 0.36600000000000005, 0.38500000000000006, 0.4040000000000001, 0.4230000000000001, 0.4420000000000001, 0.46100000000000013, 0.48000000000000015, 0.49900000000000017, 0.5180000000000001, 0.5370000000000001, 0.5560000000000002, 0.5750000000000002, 0.5940000000000002, 0.6130000000000002, 0.6320000000000002, 0.6510000000000002, 0.6700000000000003, 0.6890000000000003]
    hs2=[0.7080000000000003, 0.7270000000000003, 0.7460000000000003, 0.7650000000000003, 0.7840000000000004, 0.8030000000000004, 0.8220000000000004, 0.8410000000000004, 0.8600000000000004, 0.8790000000000004, 0.8980000000000005, 0.9170000000000005, 0.9360000000000005, 0.9550000000000005, 0.9740000000000005, 0.9930000000000005, 1.0120000000000005, 1.0310000000000004, 1.0500000000000003, 1.0690000000000002, 1.088, 1.107, 1.126, 1.1449999999999998, 1.1639999999999997, 1.1829999999999996, 1.2019999999999995, 1.2209999999999994, 1.2399999999999993, 1.2589999999999992, 1.2779999999999991, 1.296999999999999, 1.315999999999999]
    hs3=[1.3349999999999989, 1.3539999999999988, 1.3729999999999987, 1.3919999999999986, 1.4109999999999985, 1.4299999999999984, 1.4489999999999983, 1.4679999999999982, 1.486999999999998, 1.505999999999998, 1.524999999999998, 1.5439999999999978, 1.5629999999999977, 1.5819999999999976, 1.6009999999999975, 1.6199999999999974, 1.6389999999999973, 1.6579999999999973, 1.6769999999999972, 1.695999999999997, 1.714999999999997, 1.7339999999999969, 1.7529999999999968, 1.7719999999999967, 1.7909999999999966, 1.8099999999999965, 1.8289999999999964, 1.8479999999999963, 1.8669999999999962, 1.8859999999999961, 1.904999999999996, 1.923999999999996]
    hs4=[1.9429999999999958, 1.9619999999999957, 1.9809999999999957, 1.9999999999999956]
    append!(hs, hs2)
    append!(hs, hs3)
    append!(hs, hs4)


    #J2<J1
    ms1=[0.026329554665320762, 0.03133899562477367, 0.03635199809144614, 0.041369137602334176, 0.04639099288901458, 0.05141814641254052, 0.056451184935890554, 0.06149070013927952, 0.06653728928413233, 0.0715915559325454, 0.07665411073045332, 0.08172557226526923, 0.08680656801227651, 0.09189773538995359, 0.0969997229525817, 0.10211319176035027, 0.10723881698379617, 0.11237728982198823, 0.11752931984329215, 0.12269563789656138, 0.12787699978840317, 0.13307419098268447, 0.13828803264917758, 0.1435193894731512, 0.1487691797319606, 0.154038388250847, 0.159328082960579, 0.16463943589209254, 0.16997374954967448, 0.17533248969128473, 0.18071732560284837, 0.18613017895908152, 0.19157328229672915]
    ms12=[0.1970492479531246, 0.20256114800589387, 0.20811260523626404, 0.21370789436410137, 0.21935205168599492, 0.22505098968256548, 0.23081161102744036, 0.23664191358183048, 0.24255107425045633, 0.24854949488307712, 0.25464878769401655, 0.2608616710863334, 0.2672017397980653, 0.27368306700187767, 0.28031959229070774, 0.2871242513891896, 0.29410781514082535, 0.30127743184092814, 0.30863491288542644, 0.31617486867978667, 0.3238828850109126, 0.3317340145863325, 0.33969191739903554, 0.34770898258943517, 0.3557276737325004, 0.3636831518881233, 0.37150697731286975, 0.3791314404403165, 0.3864939098635668, 0.39354057114920166, 0.40022907256613616, 0.40652984064133374, 0.4124260956281754]
    ms13=[0.41791280703169803, 0.42299494056238224, 0.4276853602509696, 0.43200269139290604, 0.43596935879959325, 0.4396099216883898, 0.44294975012174076, 0.4460140349919609, 0.4488270929583011, 0.4514119144722892, 0.45378990129165075, 0.455980744699038, 0.45800240340698894, 0.45987114855166283, 0.46160165099228356, 0.4632070927779835, 0.46469928997564386, 0.4660888181499782, 0.4673851348326379, 0.46859669551710625, 0.46973106125687847, 0.4707949969988606, 0.4717945604766029, 0.472735181929146, 0.4736217351706176, 0.47445860067642837, 0.4752497214077378, 0.4759986521053214, 0.4767086027535896, 0.47738247687439817, 0.47802290525269103, 0.47863227564137467, 0.47921275893302206]

    ms14=[0.47976633223289367, 0.4802947992164527]
    append!(ms1, ms12);
    append!(ms1, ms13)
    append!(ms1, ms14)


    ms2=[0.03294384769423397, 0.03922758888377089, 0.04552411924253601, 0.05183554914326157, 0.05816402189034189, 0.0645117200146259, 0.07088087223781543, 0.07727376119511803, 0.08369273202614837, 0.09014020198629047, 0.09661867130798187, 0.10313073567131244, 0.10967910085208353, 0.11626660043355044, 0.12289621793384167, 0.129571115354736, 0.13629467104078768, 0.1430705308838402, 0.14990267833373455, 0.15679553036453495, 0.1637540684280765, 0.17078401534957413, 0.17789207080461167, 0.18508621899766767, 0.19237612169222945, 0.19977360665742416, 0.20729325410407481, 0.21495306907790787, 0.22277520209441057, 0.23078663800843602, 0.23901970726537028, 0.24751217730159594, 0.25630655232587357]

    ms21=[0.26544805873946004, 0.27498066555710976, 0.28494048729379956, 0.29534621985619225, 0.30618708939224665, 0.3174102589659381, 0.3289114320803962, 0.3405335213424973, 0.35207727684571155, 0.36332395673526696, 0.37406482232559984, 0.3841286946320941, 0.3933996266271146, 0.40182138052580496, 0.40939065517631007, 0.4161439714563325, 0.4221431706239009, 0.42746281070161846, 0.432180831452263, 0.4363725112226205, 0.44010708807462645, 0.4434462618044213, 0.4464438881461183, 0.44914635166654104, 0.45159327294728263, 0.4538183375705436, 0.4558501261040135, 0.45771288319143977, 0.45942719935711807, 0.46101059922236465, 0.46247804032145173, 0.4638423315198985]
    ms22=[0.4651144816506062, 0.4663039889057001, 0.4674190806326672, 0.468466911982136, 0.4694537306014909, 0.47038501339583866, 0.47126558034053634, 0.47209968944133274, 0.4728911161944738, 0.4736432202825426, 0.474359001738604, 0.47504114839962086, 0.47569207613605163, 0.47631396307291995, 0.4769087787996412, 0.47747830938629265, 0.47802417887941284, 0.47854786783511144, 0.47905072934686765, 0.47953400295359067, 0.47999882674341154, 0.4804462479200679, 0.4808772320541339, 0.4812926712065022, 0.4816933910808619, 0.4820801573390638, 0.4824536811912153, 0.48281462435775685, 0.48316360348375653, 0.4835011940760778, 0.483827934023323, 0.4841443267494828, 0.48445084404596545]
    ms23=[0.4847479286199797, 0.48503599639280126, 0.4853154385764795];

    append!(ms2, ms21)
    append!(ms2, ms22)
    append!(ms2, ms23)

    ms3=[0.04413089091025802, 0.052654035306664536, 0.061253077208502975, 0.06994382777664798, 0.07874434878816079, 0.08767572896302389, 0.0967631021677583, 0.10603701155692442, 0.11553530515572849, 0.12530590697782945, 0.13541110980901924, 0.14593459308394455, 0.15699334833371853, 0.16875825875547223, 0.18148900693031608, 0.19558899741765712, 0.21167379473178197, 0.2305889860278576, 0.25315390538069593, 0.279272874132754, 0.3067957878865387, 0.33214303506955256, 0.35289653874960764, 0.36888097002759906, 0.3810890872435866, 0.39060958834844706, 0.3982649118934237, 0.4046089635376049, 0.4100046452768826, 0.4146917426352502, 0.41883245317004536, 0.4225397022605371, 0.42589447922458373]
    ms31=[0.42895654022636215, 0.4317711410426006, 0.43437337109029794, 0.4367910121840506, 0.4390464704325964, 0.4411581125701767, 0.4431412109061484, 0.4450086254018788, 0.4467713054785182, 0.44843866574788616, 0.4500188719263233, 0.45151906165205014, 0.4529455173599455, 0.4543038033177532, 0.4555988754986726, 0.45683517060079737, 0.458016678866506, 0.45914700417786597, 0.46022941405515305, 0.46126688156874, 0.46226212071598244, 0.4632176164744719, 0.4641356504851925, 0.4650183231233923, 0.46586757256398376, 0.4666851913291853, 0.4674728407178586, 0.46823206343947427, 0.468964294722244, 0.46967087211461594, 0.47035304416589446, 0.47101197813937584, 0.47164876688762347]
    ms32=[0.47226443499956994, 0.4728599443117523, 0.4734361988638602, 0.47399404936428974, 0.47453429722630003, 0.47505769822236626, 0.4755649658018037, 0.4760567741084562, 0.4765337607307113, 0.47699652921345315, 0.4774456513558026, 0.47788166931710974, 0.4783050975506819, 0.47871642458152974, 0.47911611464402826, 0.47950460919219534, 0.4798823282949497, 0.4802496719261534, 0.48060702116021653, 0.48095473927999316, 0.4812931728059486, 0.48162265245267366, 0.48194349401921327, 0.4822559992180189, 0.48256045644872636, 0.48285714151987913, 0.48314631832374505, 0.48342823946723046, 0.4837031468628255, 0.4839712722818507, 0.48423283787398397, 0.4844880566539633, 0.4847371329595698]
    ms33=[0.48498026288160934, 0.4852176346687191]
    append!(ms3, ms31)
    append!(ms3, ms32)
    append!(ms3, ms33)


    ms4=[0.041216537132901646, 0.04949468656076153, 0.05800997783773446, 0.06680458363531164, 0.07592331887265472, 0.08541440954108874, 0.09533027413543946, 0.10572816130958511, 0.11667036313155264, 0.12822353728143895, 0.1404564142957975, 0.15343486070916385, 0.16721302627946555, 0.18181940733876498, 0.19723762823907834, 0.21338418674190274, 0.2300893661733044, 0.24709130586194414, 0.2640530164225295, 0.2806045086198244, 0.29639931082996174, 0.31116549728483883, 0.3247340067546795, 0.3370394412770028, 0.3481007200048914, 0.35799361726212137, 0.36682481593466304, 0.3747121807910259, 0.3817719954971636, 0.3881119088176436, 0.39382782646527975, 0.3990032092394084, 0.40370967339230096]
    ms41=[0.408008190647359, 0.41195048021453645, 0.4155803770611151, 0.4189350757562809, 0.42204621363275757, 0.42494079053821665, 0.4276419381877383, 0.4301695581291541, 0.43254084833151624, 0.43477073703940516, 0.43687224024076826, 0.4388567565953995, 0.44073431131728014, 0.442513758428186, 0.4442029490452525, 0.4458088719106485, 0.44733777118364515, 0.44879524555661504, 0.4501863319810261, 0.45151557666951553, 0.45278709553911345, 0.4540046258634488, 0.45517157057569496, 0.4562910364070578, 0.45736586683599395, 0.45839867065112444, 0.45939184679631995, 0.4603476060517681, 0.46126799001345964, 0.4621548877587694, 0.4630100505235623, 0.4638351046651547, 0.4646315631425716]
    ms42=[0.4654008357115996, 0.46614423800162147, 0.466862999616745, 0.4675582713844292, 0.46823113185579035, 0.4688825931485647, 0.46951360620993726, 0.47012506556779476, 0.4707178136285664, 0.4712926445718933, 0.47185030788790644, 0.47239151159511655, 0.4729169251729529, 0.47342718223896313, 0.47392288299776675, 0.47440459648339095, 0.4748728626167978, 0.47532819409641475, 0.47577107813733044, 0.4762019780745181, 0.4766213348411917, 0.47702956833570764, 0.47742707868561984, 0.47781424741854905, 0.4781914385482638, 0.4785589995829688, 0.478917262462569, 0.47926654443080474, 0.47960714884804445, 0.4799393659486066, 0.4802634735481534, 0.4805797377047249]
    ms43=[0.480888413336364, 0.4811897448000037, 0.48148396643344454]
    append!(ms4, ms41)
    append!(ms4, ms42)
    append!(ms4, ms43);


    ms5=[0.03124139729382335, 0.03736375318622363, 0.04358291894383375, 0.04991411231064068, 0.05637241587863513, 0.06297273544880148, 0.06972974631083086, 0.07665782363147762, 0.08377095205553235, 0.09108260834043762, 0.09860560941814801, 0.10635191681714966, 0.11433238708591711, 0.12255645705932472, 0.13103175297316552, 0.13976361420463887, 0.1487545265975054, 0.15800346781057273, 0.16750517871594897, 0.17724939099768663, 0.187220061366305, 0.19739468544675012, 0.20774378581980923, 0.21823068333717288, 0.228811661792897, 0.23943661671476957, 0.2500502357286492, 0.26059369265676313, 0.2710067596943434, 0.28123016773031867, 0.29120799278268067, 0.3008898316236454, 0.31023255756861423]
    ms51=[0.3192015117349313, 0.32777106970818815, 0.3359246084073977, 0.3436539657013914, 0.35095852606213995, 0.3578440778545063, 0.3643215769908471, 0.3704059261490553, 0.3761148472333041, 0.3814678939891277, 0.3864856258020737, 0.3911889444158092, 0.39559858258077, 0.3997347264889093, 0.4036167508945673, 0.4072630457160179, 0.4106909145239656, 0.4139165278097485, 0.41695491670460355, 0.4198199955384745, 0.42252460408247466, 0.42508056243217623, 0.4274987332338304, 0.42978908736761484, 0.4319607703033903, 0.4340221672005412, 0.4359809654672117, 0.4378442139749842, 0.4396183784759591, 0.4413093930182072, 0.44292270733436123, 0.4444633302961006, 0.4459358696010039]
    ms52=[0.4473445679128628, 0.4486933356938841, 0.44998578098259756, 0.45122523636818285, 0.45241478340501445, 0.4535572747001589, 0.4546553538897088, 0.45571147370762555, 0.45672791233009336, 0.4577067881669462, 0.4586500732528922, 0.4595596053781375, 0.4604370990851303, 0.4612841556442592, 0.46210227211056776, 0.46289284955330473, 0.4636572005412013, 0.46439655595568397, 0.4651120711999126, 0.46580483186162547, 0.46647585888342513, 0.467126113288146, 0.46775650050163153, 0.468367874311607, 0.4689610404966389, 0.46953676015656165, 0.47009575277101584, 0.4706386990125981, 0.47116624333521184, 0.4716789963596684, 0.4721775370729552, 0.4726624148587167]
    ms53=[0.47313415137389725, 0.4735932422834951, 0.47404015886717293]
    append!(ms5, ms51)
    append!(ms5, ms52)
    append!(ms5, ms53)

    ms6=[0.025195475951206168, 0.030079149262111023, 0.03501283799619641, 0.0400043292367528, 0.04506131015997903, 0.05019134599227936, 0.05540185462894951, 0.06070007742644002, 0.0660930456520846, 0.0715875420473486, 0.07719005693457824, 0.08290673827888718, 0.0887433351101902, 0.09470513372625272, 0.10079688614427829, 0.10702273036174309, 0.1133861021426122, 0.11988963828107133, 0.1265350716332856, 0.13332311866685362, 0.14025336087517737, 0.1473241221488786, 0.15453234508654967, 0.1618734702397844, 0.16934132337907973, 0.17692801695870208, 0.18462387294410634, 0.19241737490118196, 0.20029515757055805, 0.20824204188861567, 0.2162411224203229, 0.22427391233026325, 0.232320548325549]
    ms61=[0.2403600545508343, 0.24837066043421255, 0.25633016332394376, 0.2642163228676286, 0.2720072709407864, 0.27968191896127625, 0.28722034393398405, 0.29460413567466437, 0.30181669026436486, 0.3088434385869116, 0.3156720033520113, 0.322292282782387, 0.3286964636406869, 0.33487897007360173, 0.34083635757968606, 0.3465671631465651, 0.35207172327763114, 0.3573519713761752, 0.36241122498758715, 0.3672539719493744, 0.37188566279303314, 0.37631251497240636, 0.3805413328095673, 0.38457934554925666, 0.3884340646492308, 0.3921131604312735, 0.3956243574627058, 0.3989753475081908, 0.4021737185574614, 0.4052268982525302, 0.4081421099775385, 0.410926339900974, 0.41358631334919643]
    ms62=[0.4161284790123253, 0.4185589996337481, 0.4208837479869379, 0.42310830709601366, 0.42523797380578987, 0.4272777649381398, 0.429232425397204, 0.4311064376923602, 0.432904032443805, 0.4346291995164885, 0.43628569949802465, 0.4378770752964164, 0.43940666367955195, 0.44087760662365827, 0.4422928623671157, 0.44365521609702263, 0.44496729021650316, 0.4462315541573937, 0.44745033372042187, 0.44862581993310335, 0.44976007742486074, 0.45085505232725614, 0.45191257970922744, 0.45293439056364665, 0.45392211836179114, 0.4548773051955356, 0.45580140752737575, 0.45669580156856593, 0.45756178830653704, 0.4584005982019633, 0.4592133955752817, 0.4600012827023551]
    ms63=[0.46076530363729395, 0.4615064477807944, 0.4622256532107345]
    append!(ms6, ms61)
    append!(ms6, ms62)
    append!(ms6, ms63);
    factor=1.
    factory=1.

    display(plot(hs, ms1))
    display(plot!(hs, ms2));
    display(plot!(hs, ms3));
    display(plot!(hs.*factor, ms4.*factory));
    display(plot!(hs.*factor, ms5.*factory));
    display(plot!(hs.*factor, ms6.*factory));


    println("length, ",length(ms1))
    println(length(hs));


end



function scalez2()
    hs=[0.1, 0.11900000000000001, 0.138, 0.157, 0.176, 0.19499999999999998, 0.21399999999999997, 0.23299999999999996, 0.25199999999999995, 0.27099999999999996, 0.29, 0.309, 0.328, 0.34700000000000003, 0.36600000000000005, 0.38500000000000006, 0.4040000000000001, 0.4230000000000001, 0.4420000000000001, 0.46100000000000013, 0.48000000000000015, 0.49900000000000017, 0.5180000000000001, 0.5370000000000001, 0.5560000000000002, 0.5750000000000002, 0.5940000000000002, 0.6130000000000002, 0.6320000000000002, 0.6510000000000002, 0.6700000000000003, 0.6890000000000003, 0.7080000000000003]

    hs1=[0.7270000000000003, 0.7460000000000003, 0.7650000000000003, 0.7840000000000004, 0.8030000000000004, 0.8220000000000004, 0.8410000000000004, 0.8600000000000004, 0.8790000000000004, 0.8980000000000005, 0.9170000000000005, 0.9360000000000005, 0.9550000000000005, 0.9740000000000005, 0.9930000000000005, 1.0120000000000005, 1.0310000000000004, 1.0500000000000003, 1.0690000000000002, 1.088, 1.107, 1.126, 1.1449999999999998, 1.1639999999999997, 1.1829999999999996, 1.2019999999999995, 1.2209999999999994, 1.2399999999999993, 1.2589999999999992, 1.2779999999999991, 1.296999999999999, 1.315999999999999, 1.3349999999999989]

    hs2=[1.3539999999999988, 1.3729999999999987, 1.3919999999999986, 1.4109999999999985, 1.4299999999999984, 1.4489999999999983, 1.4679999999999982, 1.486999999999998, 1.505999999999998, 1.524999999999998, 1.5439999999999978, 1.5629999999999977, 1.5819999999999976, 1.6009999999999975, 1.6199999999999974, 1.6389999999999973, 1.6579999999999973, 1.6769999999999972, 1.695999999999997, 1.714999999999997, 1.7339999999999969, 1.7529999999999968, 1.7719999999999967, 1.7909999999999966, 1.8099999999999965, 1.8289999999999964, 1.8479999999999963, 1.8669999999999962, 1.8859999999999961, 1.904999999999996, 1.923999999999996, 1.9429999999999958, 1.9619999999999957]

    hs3=[1.9809999999999957, 1.9999999999999956]

    append!(hs, hs1)
    append!(hs, hs2)
    append!(hs, hs3)

    sz1=[0.025010426487611495, 0.02976757723087023, 0.03452742515393064, 0.03929040584212103, 0.044056957151944534, 0.048827519578243044, 0.0536025366430453, 0.05838245530901618, 0.06316772642089492, 0.06795880517865575, 0.07275615164684791, 0.07756023130553863, 0.08237151565012248, 0.08719048284951987, 0.09201761847601068, 0.09685341632521483, 0.10169837935151557, 0.10655302075489634, 0.11141786526733966, 0.11629345070502688, 0.12118032987360909, 0.1260790729415655, 0.13099027043022515, 0.1359145370081724, 0.1408525163245767, 0.14580488716931428, 0.15077237130559293, 0.15575574338442055, 0.16075584341555393, 0.16577359233313885, 0.17081001125353867, 0.17586624506993975, 0.18094359105668809]
    sz12=[0.18604353315548078, 0.19116778257518324, 0.19631832523817505, 0.20149747643329452, 0.20670794276230084, 0.2119528910636303, 0.2172360234255477, 0.22256165661723107, 0.22793480321065224, 0.23336125027587876, 0.23884762973837242, 0.24440147221687733, 0.25003123336869404, 0.2557462784559805, 0.2615568071065172, 0.2674736963461551, 0.27350823646164674, 0.2796717320292953, 0.28597494093995324, 0.29242732941520644, 0.29903613323521566, 0.305805237075646, 0.31273391650960564, 0.31981553017196823, 0.3270362982001599, 0.33437434753551315, 0.34179923010546814, 0.34927210925150054, 0.3567467499518995, 0.36417133828154297, 0.3714910120386432, 0.37865084175205815, 0.3855989009886036]
    sz13 = [0.3922890398103069, 0.3986830346574326, 0.40475191309954195, 0.4104764043265675, 0.4158466042073568, 0.4208610375138491, 0.42552533907635026, 0.42985076707734393, 0.43385272194176794, 0.4375493914484285, 0.4409605909336289, 0.44410682509031063, 0.4470085678780512, 0.4496857388722541, 0.45215734562357535, 0.45444125943181535, 0.456554093802414, 0.45851115880031573, 0.4603264692003129, 0.462012788960734, 0.4635816986767519, 0.46504367614970127, 0.4664081829959979, 0.46768375239135995, 0.46887807468176607, 0.4699980788007623, 0.4710500082985348, 0.47203949139785306, 0.4729716049090006, 0.47385093210481133, 0.47468161483414567, 0.47546740024778916]
    sz14 = [0.47621168256210455, 0.4769175403033697, 0.4775877694668864]
    append!(sz1, sz12)
    append!(sz1, sz13)
    append!(sz1, sz14)

    sz2=[0.03128644433374995, 0.037248964334699604, 0.04322094827056044, 0.049203943734597376, 0.05519951572918858, 0.06120924988175349, 0.06723475597504659, 0.07327767183372913, 0.07933966761726513, 0.08542245058519503, 0.09152777042894876, 0.09765742531242452, 0.10381326883928882, 0.10999721828189961, 0.11621126457731774, 0.12245748483718877, 0.12873805844845818, 0.13505528827534463, 0.14141162902476945, 0.14780972551303326, 0.15425246436320506, 0.16074304354627567, 0.16728506509880253, 0.17388265721214985, 0.1805406325413209, 0.18726468979696467, 0.19406166511759138, 0.20093983787776284, 0.2079092917434358, 0.21498232491190436, 0.22217389212038244, 0.2295020432331101, 0.2369882965964991]

    sz21=[0.24465784729315337, 0.25253945914529946, 0.26066482606177166, 0.26906712160510343, 0.27777840792713965, 0.2868255907820182, 0.2962247559445186, 0.3059740860077096, 0.3160461808477653, 0.3263814075263927, 0.3368845790009589, 0.34742728878487283, 0.3578571457267575, 0.3680130134896989, 0.37774302202311144, 0.38692087657168894, 0.39545663409768983, 0.40330026777007516, 0.4104387557924217, 0.41688897150945275, 0.4226889563343044, 0.4278895766072792, 0.43254768124660053, 0.43672111301184974, 0.4404654453381534, 0.44383210012874663, 0.4468674610586731, 0.44961264514606375, 0.4521036735371601, 0.45437185915952755, 0.45644429146067167, 0.45834434448813066, 0.46009216615372617]
    sz22=[0.46170512705279826, 0.46319821988908244, 0.4645844079869665, 0.4658749254131602, 0.4670795331908815, 0.4682067368048526, 0.46926397021651833, 0.47025775126672775, 0.4711938128333848, 0.47207721355939486, 0.4729124314217106, 0.4737034429163747, 0.474453790195074, 0.4751666381070065, 0.4758448227781133, 0.47649089308601295, 0.47710714616329203, 0.47769565786827095, 0.47825830900978494, 0.47879680797848234, 0.47931271033128553, 0.47980743578488316, 0.4802822830024411, 0.4807384424931292, 0.4811770078960994, 0.48159898587651645, 0.4820053048268533, 0.48239682253667476, 0.4827743329697355, 0.4831385722666566, 0.48349022407463826, 0.48382992428955623, 0.4841582652851785]
    sz23=[0.4844757996936225, 0.48478304379064024]
    append!(sz2, sz21)
    append!(sz2, sz22)
    append!(sz2, sz23)

    sz3= [0.04186561315670434, 0.04992054500207461, 0.05802962832279138, 0.06620317235279721, 0.07445241677592218, 0.0827897982496942, 0.09122927856017897, 0.0997867519440527, 0.10848055991198852, 0.11733216207995445, 0.12636704781346325, 0.13561603618780604, 0.14511721530401633, 0.15491893394721967, 0.1650844930192395, 0.17569947822777204, 0.18688291804140983, 0.19880323410951573, 0.21169807309665378, 0.22589056967159848, 0.24177772360600283, 0.2597358295375558, 0.2798696535597565, 0.30163272120863743, 0.3236480015631286, 0.3441637233111239, 0.36190474326062727, 0.37649546060294853, 0.3882326175343415, 0.39766930581816545, 0.40534926457608145, 0.41171149534360446]
    sz31= [0.41708294654792744, 0.42169977147861826, 0.42573155471740914, 0.429300926387241, 0.43249775982929073, 0.43538901178245193, 0.43802544606561544, 0.4404462281477212, 0.44268208849959917, 0.44475752557941, 0.4466923606820495, 0.44850285106723714, 0.4502024984321276, 0.4518026445223952, 0.4533129160235471, 0.4547415613012985, 0.45609570851874004, 0.457381565867192, 0.4586045786571041, 0.45976955388205454, 0.4608807599845959, 0.4619420075142933, 0.46295671491740764, 0.4639279626431666, 0.4648585379893424, 0.46575097254408176, 0.46660757365991135, 0.4674304510819572, 0.4682215396127005, 0.4689826185122471, 0.4697153281935264, 0.47042118466164723]
    sz32= [0.4711015920608822, 0.4717578536263487, 0.47239118128400387, 0.4730027040973562, 0.47359347572969557, 0.4741644810580181, 0.47471664205630626, 0.47525082304413735, 0.47576783538439654, 0.47626844169916416, 0.4767533596643319, 0.4772232654325177, 0.47767879672976743, 0.47812055566307704, 0.4785491112706288, 0.47896500184472923, 0.4793687370509559, 0.47976079986545533, 0.4801416483489253, 0.4805117172748182, 0.4808714196251518, 0.48122114796765925, 0.4815612757252294, 0.4818921583483219, 0.48221413439860195, 0.4825275265524399, 0.4828326425312703, 0.4831297759649833, 0.48341920719461284, 0.48370120401885075, 0.4839760223897064, 0.484243907061119]
    sz33=[0.48450509219402654, 0.48475980192251966, 0.4850082508823859, 0.48525064470662566, 0.48548718048972106]

    append!(sz3, sz31)
    append!(sz3, sz32)
    append!(sz3, sz33)

    sz4=[0.054893663139488666, 0.06791929592459431, 0.08241923084768586, 0.09867648783737948, 0.11691647953299548, 0.1372220763942695, 0.15942821537006724, 0.18304252747965194, 0.20726216800963232, 0.23112488168252426, 0.2537404569407463, 0.27448149369316854, 0.2930483290293744, 0.30941814438899906, 0.3237441312061892, 0.3362616167330251, 0.34722439498989927, 0.3568704575090692, 0.3654078727296114, 0.37301192061872324, 0.379827486743515, 0.3859733496194548, 0.39154671505288646, 0.3966273092222594, 0.40128081946134087, 0.40556168455406344, 0.4095153166233005, 0.41317985579624017, 0.41658755263777536, 0.41976585872453903, 0.42273829003002034, 0.4255251138162302, 0.4281438982298937]
    sz41=[0.43060995474523306, 0.43293669658130807, 0.4351359308745342, 0.4372180983209891, 0.43919247090786545, 0.4410673160046098, 0.4428500332925606, 0.4445472696315108, 0.44616501590507596, 0.44770868906601863, 0.44918320196169764, 0.45059302302048665, 0.45194222748389895, 0.45323454155883375, 0.45447338061212333, 0.45566188233410404, 0.4568029356330021, 0.45789920589413635, 0.458953157135641, 0.4599670714980242, 0.46094306644289623, 0.46188310997209414, 0.4627890341326388, 0.4636625470332457, 0.46450524356278405, 0.4653186149753702, 0.46610405748262157, 0.4668628799732369, 0.46759631096424764, 0.46830550487354655, 0.468991547692686, 0.4696554621263386, 0.47029821225876395]
    sz42= [0.4709207077979665, 0.4715238079432874, 0.4721083249154247, 0.4726750271847011, 0.4732246424270522, 0.47375786023599825, 0.4742753346138958, 0.47477768626439854, 0.4752655047043379, 0.4757393502121812, 0.4761997556282094, 0.47664722801987947, 0.4770822502244752, 0.47750528227924094, 0.4779167627489157, 0.4783171099603961, 0.47870672315103996, 0.4790859835375955, 0.47945525531400107, 0.4798148865825159, 0.4801652102218199, 0.48050654470096393, 0.480839194839727, 0.48116345252167436, 0.4814795973616216, 0.481787897332134, 0.4820886093530668, 0.4823819798435519, 0.48266824524216423, 0.48294763249617495, 0.4832203595227107, 0.4834866356420784]
    sz43= [0.48374666198822225, 0.48400063189365905, 0.48424873125535545]
    append!(sz4, sz41)
    append!(sz4, sz42)
    append!(sz4, sz43)

    sz5=[0.042664429092256435, 0.05127146418446298, 0.06014626372378227, 0.06933862918118334, 0.07890287470255497, 0.08889926021378224, 0.09939550193363628, 0.11046807781863738, 0.12220278005269061, 0.13469353910524096, 0.1480379183836946, 0.16232693085544583, 0.17762636288651748, 0.19394765677692308, 0.2112103480948527, 0.22920625160493316, 0.24758518750021632, 0.26588337495083625, 0.2835985495769428, 0.300286289097719, 0.3156354692979249, 0.32949484901626974, 0.3418534032013014, 0.35279694143649365, 0.3624634351999742, 0.3710089781244646, 0.37858664886389004, 0.38533572317256737, 0.3913776264331884, 0.39681565906866173, 0.40173652898508033, 0.4062125517403199, 0.4103039275829744]
    sz51=[0.4140608266175353, 0.4175251863725332, 0.42073221121291954, 0.4237116002189394, 0.42648854277179526, 0.4290845220516636, 0.4315179627051189, 0.4338047534277571, 0.43595866967182967, 0.43799171675556436, 0.43991440951229405, 0.44173600124660267, 0.44346467207830714, 0.4451076846316779, 0.44667151336177263, 0.4481619525030559, 0.4495842066063976, 0.4509429668276519, 0.45224247550339036, 0.45348658105449435, 0.4546787848658567, 0.4558222814807968, 0.4569199932008532, 0.45797459998536294, 0.45898856538379906, 0.45996415910868155, 0.4609034767513398, 0.4618084570596034, 0.46268089712650007, 0.46352246578436795, 0.4643347154503271, 0.4651190926329482, 0.46587694727626405]
    sz52=[0.4666095410918394, 0.46731805500784585, 0.46800359584413503, 0.4686672023092333, 0.469309850398321, 0.469932458265507, 0.4705358906279394, 0.4711209627573197, 0.4716884441030324, 0.4722390615881072, 0.47277350261204415, 0.4732924177930772, 0.4737964234745272, 0.4742861040216211, 0.47476201392799117, 0.47522467975135746, 0.4756746018948613, 0.4761122562483163, 0.47653809570335487, 0.47695255155272015, 0.47735603478571875, 0.4777489372879535, 0.47813163295420164, 0.47850447872207424, 0.4788678155326721, 0.479221969225101, 0.4795672513696359, 0.47990396004507824, 0.4802323805638286, 0.48055278615085495, 0.4808654385772113, 0.4811705887543772, 0.48146847729043185]
    sz53= [0.4817593350124773, 0.4820433834559545]
    append!(sz5, sz51)
    append!(sz5, sz52)
    append!(sz5, sz53)

    sz6= [0.03164228397413315, 0.037848299332075265, 0.044155043404256585, 0.05057837534404266, 0.05713402594438909, 0.06383755625565782, 0.07070430325239839, 0.07774930815576567, 0.08498722169083081, 0.09243217898218525, 0.10009763502769202, 0.10799614987810298, 0.11613911104323749, 0.1245363796509984, 0.13319584711143145, 0.14212289131166062, 0.15131972672298633, 0.16078465237904405, 0.170511216490367, 0.18048733694616811, 0.19069444239353142, 0.20110672634284826, 0.21169063170351357, 0.22240469769633245, 0.23319989624742615, 0.2440205529707647, 0.2548058858273696, 0.2654921080841022, 0.2760149466537919, 0.28631234480739787, 0.2963270724926535, 0.3060089727910676]
    sz61= [0.31531662967854, 0.3242183355090539, 0.3326923423876167, 0.3407264751836745, 0.34831724804757663, 0.35546865463283617, 0.36219079853171443, 0.3684985044817204, 0.3744100140392011, 0.37994583119325526, 0.38512775008864286, 0.38997807158916425, 0.39451899828133374, 0.3987721876281336, 0.4027584386354938, 0.4064974868475894, 0.41000788424260576, 0.41330694354818726, 0.4164107298512624, 0.4193340856791578, 0.4220906787139178, 0.42469306385733036, 0.4271527534693232, 0.429480291286226, 0.4316853268386353, 0.43377668819149967, 0.4357624515831382, 0.4376500070931321, 0.43944611986950716, 0.44115698672828546, 0.4427882881342273, 0.44434523570066237]
    sz62= [0.44583261542738395, 0.44725482694559426, 0.4486159190607052, 0.4499196218908567, 0.4511693758961834, 0.4523683580802887, 0.45351950563027926, 0.45462553724381244, 0.45568897237116257, 0.4567121485804119, 0.45769723723692374, 0.45864625766802214, 0.4595610899676188, 0.4604434865806646, 0.4612950827916338, 0.4621174062305004, 0.4629118854942752, 0.4636798579760848, 0.4644225769800023, 0.46514121819473425, 0.4658368855892459, 0.46651061678794054, 0.4671633879767991, 0.46779611838529456, 0.46840967438645725, 0.4690048732504873, 0.469582486585281, 0.47014324349384773, 0.4706878334734685, 0.4712169090828372, 0.47173108839558336, 0.4722309572616545]
    sz63= [0.4727170713930481, 0.4731899582891667, 0.47365011901606296, 0.4740980298523706, 0.47453414381347514]

    append!(sz6, sz61)
    append!(sz6, sz62)
    append!(sz6, sz63)

    sz7= [0.02519547595120622, 0.030079149262110673, 0.03501283799619648, 0.04000432923675268, 0.04506131015997897, 0.05019134599227936, 0.05540185462894962, 0.06070007742643998, 0.06609304565208463, 0.07158754204734849, 0.07719005693457806, 0.08290673827888714, 0.08874333511019006, 0.09470513372625275, 0.10079688614427826, 0.10702273036174315, 0.11338610214261222, 0.11988963828107145, 0.12653507163328537, 0.13332311866685367, 0.14025336087517726, 0.14732412214887872, 0.15453234508654978, 0.16187347023978457, 0.16934132337907976, 0.17692801695870228, 0.18462387294410634, 0.1924173749011821, 0.2002951575705581, 0.20824204188861553, 0.21624112242032306, 0.22427391233026306]
    sz71= [0.2323205483255491, 0.24036005455083434, 0.2483706604342124, 0.2563301633239439, 0.2642163228676287, 0.27200727094078636, 0.2796819189612764, 0.28722034393398393, 0.2946041356746645, 0.30181669026436464, 0.30884343858691193, 0.31567200335201107, 0.32229228278238686, 0.3286964636406862, 0.334878970073602, 0.340836357579686, 0.34656716314656477, 0.352071723277631, 0.35735197137617536, 0.3624112249875879, 0.36725397194937487, 0.3718856627930328, 0.37631251497240636, 0.380541332809568, 0.38457934554925716, 0.38843406464923097, 0.3921131604312736, 0.39562435746270547, 0.3989753475081908, 0.402173718557461, 0.40522689825253055, 0.40814210997753814]
    sz72= [0.4109263399009743, 0.4135863133491966, 0.4161284790123249, 0.41855899963374726, 0.4208837479869382, 0.423108307096014, 0.4252379738057903, 0.4272777649381403, 0.42923242539720374, 0.43110643769236057, 0.43290403244380554, 0.434629199516488, 0.43628569949802487, 0.4378770752964158, 0.4394066636795518, 0.44087760662365894, 0.442292862367116, 0.4436552160970223, 0.44496729021650344, 0.4462315541573942, 0.44745033372042187, 0.44862581993310335, 0.44976007742486046, 0.45085505232725587, 0.4519125797092273, 0.45293439056364737, 0.453922118361791, 0.4548773051955356, 0.45580140752737625, 0.45669580156856604, 0.4575617883065368, 0.4584005982019635]
    sz73= [0.45921339557528157, 0.46000128270235485, 0.46076530363729395, 0.4615064477807942, 0.46222565321073467]

    append!(sz7, sz71)
    append!(sz7, sz72)
    append!(sz7, sz73)

    #factor=1.25

    #factor1=0.55
    #factor2=0.68
    #factor3=1

    ms1=[0.026329554665320762, 0.03133899562477367, 0.03635199809144614, 0.041369137602334176, 0.04639099288901458, 0.05141814641254052, 0.056451184935890554, 0.06149070013927952, 0.06653728928413233, 0.0715915559325454, 0.07665411073045332, 0.08172557226526923, 0.08680656801227651, 0.09189773538995359, 0.0969997229525817, 0.10211319176035027, 0.10723881698379617, 0.11237728982198823, 0.11752931984329215, 0.12269563789656138, 0.12787699978840317, 0.13307419098268447, 0.13828803264917758, 0.1435193894731512, 0.1487691797319606, 0.154038388250847, 0.159328082960579, 0.16463943589209254, 0.16997374954967448, 0.17533248969128473, 0.18071732560284837, 0.18613017895908152, 0.19157328229672915]
    ms12=[0.1970492479531246, 0.20256114800589387, 0.20811260523626404, 0.21370789436410137, 0.21935205168599492, 0.22505098968256548, 0.23081161102744036, 0.23664191358183048, 0.24255107425045633, 0.24854949488307712, 0.25464878769401655, 0.2608616710863334, 0.2672017397980653, 0.27368306700187767, 0.28031959229070774, 0.2871242513891896, 0.29410781514082535, 0.30127743184092814, 0.30863491288542644, 0.31617486867978667, 0.3238828850109126, 0.3317340145863325, 0.33969191739903554, 0.34770898258943517, 0.3557276737325004, 0.3636831518881233, 0.37150697731286975, 0.3791314404403165, 0.3864939098635668, 0.39354057114920166, 0.40022907256613616, 0.40652984064133374, 0.4124260956281754]
    ms13=[0.41791280703169803, 0.42299494056238224, 0.4276853602509696, 0.43200269139290604, 0.43596935879959325, 0.4396099216883898, 0.44294975012174076, 0.4460140349919609, 0.4488270929583011, 0.4514119144722892, 0.45378990129165075, 0.455980744699038, 0.45800240340698894, 0.45987114855166283, 0.46160165099228356, 0.4632070927779835, 0.46469928997564386, 0.4660888181499782, 0.4673851348326379, 0.46859669551710625, 0.46973106125687847, 0.4707949969988606, 0.4717945604766029, 0.472735181929146, 0.4736217351706176, 0.47445860067642837, 0.4752497214077378, 0.4759986521053214, 0.4767086027535896, 0.47738247687439817, 0.47802290525269103, 0.47863227564137467, 0.47921275893302206]

    ms14=[0.47976633223289367, 0.4802947992164527]
    append!(ms1, ms12);
    append!(ms1, ms13)
    append!(ms1, ms14)


    ms2=[0.03294384769423397, 0.03922758888377089, 0.04552411924253601, 0.05183554914326157, 0.05816402189034189, 0.0645117200146259, 0.07088087223781543, 0.07727376119511803, 0.08369273202614837, 0.09014020198629047, 0.09661867130798187, 0.10313073567131244, 0.10967910085208353, 0.11626660043355044, 0.12289621793384167, 0.129571115354736, 0.13629467104078768, 0.1430705308838402, 0.14990267833373455, 0.15679553036453495, 0.1637540684280765, 0.17078401534957413, 0.17789207080461167, 0.18508621899766767, 0.19237612169222945, 0.19977360665742416, 0.20729325410407481, 0.21495306907790787, 0.22277520209441057, 0.23078663800843602, 0.23901970726537028, 0.24751217730159594, 0.25630655232587357]

    ms21=[0.26544805873946004, 0.27498066555710976, 0.28494048729379956, 0.29534621985619225, 0.30618708939224665, 0.3174102589659381, 0.3289114320803962, 0.3405335213424973, 0.35207727684571155, 0.36332395673526696, 0.37406482232559984, 0.3841286946320941, 0.3933996266271146, 0.40182138052580496, 0.40939065517631007, 0.4161439714563325, 0.4221431706239009, 0.42746281070161846, 0.432180831452263, 0.4363725112226205, 0.44010708807462645, 0.4434462618044213, 0.4464438881461183, 0.44914635166654104, 0.45159327294728263, 0.4538183375705436, 0.4558501261040135, 0.45771288319143977, 0.45942719935711807, 0.46101059922236465, 0.46247804032145173, 0.4638423315198985]
    ms22=[0.4651144816506062, 0.4663039889057001, 0.4674190806326672, 0.468466911982136, 0.4694537306014909, 0.47038501339583866, 0.47126558034053634, 0.47209968944133274, 0.4728911161944738, 0.4736432202825426, 0.474359001738604, 0.47504114839962086, 0.47569207613605163, 0.47631396307291995, 0.4769087787996412, 0.47747830938629265, 0.47802417887941284, 0.47854786783511144, 0.47905072934686765, 0.47953400295359067, 0.47999882674341154, 0.4804462479200679, 0.4808772320541339, 0.4812926712065022, 0.4816933910808619, 0.4820801573390638, 0.4824536811912153, 0.48281462435775685, 0.48316360348375653, 0.4835011940760778, 0.483827934023323, 0.4841443267494828, 0.48445084404596545]
    ms23=[0.4847479286199797, 0.48503599639280126, 0.4853154385764795];

    append!(ms2, ms21)
    append!(ms2, ms22)
    append!(ms2, ms23)

    ms3=[0.04413089091025802, 0.052654035306664536, 0.061253077208502975, 0.06994382777664798, 0.07874434878816079, 0.08767572896302389, 0.0967631021677583, 0.10603701155692442, 0.11553530515572849, 0.12530590697782945, 0.13541110980901924, 0.14593459308394455, 0.15699334833371853, 0.16875825875547223, 0.18148900693031608, 0.19558899741765712, 0.21167379473178197, 0.2305889860278576, 0.25315390538069593, 0.279272874132754, 0.3067957878865387, 0.33214303506955256, 0.35289653874960764, 0.36888097002759906, 0.3810890872435866, 0.39060958834844706, 0.3982649118934237, 0.4046089635376049, 0.4100046452768826, 0.4146917426352502, 0.41883245317004536, 0.4225397022605371, 0.42589447922458373]
    ms31=[0.42895654022636215, 0.4317711410426006, 0.43437337109029794, 0.4367910121840506, 0.4390464704325964, 0.4411581125701767, 0.4431412109061484, 0.4450086254018788, 0.4467713054785182, 0.44843866574788616, 0.4500188719263233, 0.45151906165205014, 0.4529455173599455, 0.4543038033177532, 0.4555988754986726, 0.45683517060079737, 0.458016678866506, 0.45914700417786597, 0.46022941405515305, 0.46126688156874, 0.46226212071598244, 0.4632176164744719, 0.4641356504851925, 0.4650183231233923, 0.46586757256398376, 0.4666851913291853, 0.4674728407178586, 0.46823206343947427, 0.468964294722244, 0.46967087211461594, 0.47035304416589446, 0.47101197813937584, 0.47164876688762347]
    ms32=[0.47226443499956994, 0.4728599443117523, 0.4734361988638602, 0.47399404936428974, 0.47453429722630003, 0.47505769822236626, 0.4755649658018037, 0.4760567741084562, 0.4765337607307113, 0.47699652921345315, 0.4774456513558026, 0.47788166931710974, 0.4783050975506819, 0.47871642458152974, 0.47911611464402826, 0.47950460919219534, 0.4798823282949497, 0.4802496719261534, 0.48060702116021653, 0.48095473927999316, 0.4812931728059486, 0.48162265245267366, 0.48194349401921327, 0.4822559992180189, 0.48256045644872636, 0.48285714151987913, 0.48314631832374505, 0.48342823946723046, 0.4837031468628255, 0.4839712722818507, 0.48423283787398397, 0.4844880566539633, 0.4847371329595698]
    ms33=[0.48498026288160934, 0.4852176346687191]
    append!(ms3, ms31)
    append!(ms3, ms32)
    append!(ms3, ms33)


    ms4=[0.041216537132901646, 0.04949468656076153, 0.05800997783773446, 0.06680458363531164, 0.07592331887265472, 0.08541440954108874, 0.09533027413543946, 0.10572816130958511, 0.11667036313155264, 0.12822353728143895, 0.1404564142957975, 0.15343486070916385, 0.16721302627946555, 0.18181940733876498, 0.19723762823907834, 0.21338418674190274, 0.2300893661733044, 0.24709130586194414, 0.2640530164225295, 0.2806045086198244, 0.29639931082996174, 0.31116549728483883, 0.3247340067546795, 0.3370394412770028, 0.3481007200048914, 0.35799361726212137, 0.36682481593466304, 0.3747121807910259, 0.3817719954971636, 0.3881119088176436, 0.39382782646527975, 0.3990032092394084, 0.40370967339230096]
    ms41=[0.408008190647359, 0.41195048021453645, 0.4155803770611151, 0.4189350757562809, 0.42204621363275757, 0.42494079053821665, 0.4276419381877383, 0.4301695581291541, 0.43254084833151624, 0.43477073703940516, 0.43687224024076826, 0.4388567565953995, 0.44073431131728014, 0.442513758428186, 0.4442029490452525, 0.4458088719106485, 0.44733777118364515, 0.44879524555661504, 0.4501863319810261, 0.45151557666951553, 0.45278709553911345, 0.4540046258634488, 0.45517157057569496, 0.4562910364070578, 0.45736586683599395, 0.45839867065112444, 0.45939184679631995, 0.4603476060517681, 0.46126799001345964, 0.4621548877587694, 0.4630100505235623, 0.4638351046651547, 0.4646315631425716]
    ms42=[0.4654008357115996, 0.46614423800162147, 0.466862999616745, 0.4675582713844292, 0.46823113185579035, 0.4688825931485647, 0.46951360620993726, 0.47012506556779476, 0.4707178136285664, 0.4712926445718933, 0.47185030788790644, 0.47239151159511655, 0.4729169251729529, 0.47342718223896313, 0.47392288299776675, 0.47440459648339095, 0.4748728626167978, 0.47532819409641475, 0.47577107813733044, 0.4762019780745181, 0.4766213348411917, 0.47702956833570764, 0.47742707868561984, 0.47781424741854905, 0.4781914385482638, 0.4785589995829688, 0.478917262462569, 0.47926654443080474, 0.47960714884804445, 0.4799393659486066, 0.4802634735481534, 0.4805797377047249]
    ms43=[0.480888413336364, 0.4811897448000037, 0.48148396643344454]
    append!(ms4, ms41)
    append!(ms4, ms42)
    append!(ms4, ms43);


    ms5=[0.03124139729382335, 0.03736375318622363, 0.04358291894383375, 0.04991411231064068, 0.05637241587863513, 0.06297273544880148, 0.06972974631083086, 0.07665782363147762, 0.08377095205553235, 0.09108260834043762, 0.09860560941814801, 0.10635191681714966, 0.11433238708591711, 0.12255645705932472, 0.13103175297316552, 0.13976361420463887, 0.1487545265975054, 0.15800346781057273, 0.16750517871594897, 0.17724939099768663, 0.187220061366305, 0.19739468544675012, 0.20774378581980923, 0.21823068333717288, 0.228811661792897, 0.23943661671476957, 0.2500502357286492, 0.26059369265676313, 0.2710067596943434, 0.28123016773031867, 0.29120799278268067, 0.3008898316236454, 0.31023255756861423]
    ms51=[0.3192015117349313, 0.32777106970818815, 0.3359246084073977, 0.3436539657013914, 0.35095852606213995, 0.3578440778545063, 0.3643215769908471, 0.3704059261490553, 0.3761148472333041, 0.3814678939891277, 0.3864856258020737, 0.3911889444158092, 0.39559858258077, 0.3997347264889093, 0.4036167508945673, 0.4072630457160179, 0.4106909145239656, 0.4139165278097485, 0.41695491670460355, 0.4198199955384745, 0.42252460408247466, 0.42508056243217623, 0.4274987332338304, 0.42978908736761484, 0.4319607703033903, 0.4340221672005412, 0.4359809654672117, 0.4378442139749842, 0.4396183784759591, 0.4413093930182072, 0.44292270733436123, 0.4444633302961006, 0.4459358696010039]
    ms52=[0.4473445679128628, 0.4486933356938841, 0.44998578098259756, 0.45122523636818285, 0.45241478340501445, 0.4535572747001589, 0.4546553538897088, 0.45571147370762555, 0.45672791233009336, 0.4577067881669462, 0.4586500732528922, 0.4595596053781375, 0.4604370990851303, 0.4612841556442592, 0.46210227211056776, 0.46289284955330473, 0.4636572005412013, 0.46439655595568397, 0.4651120711999126, 0.46580483186162547, 0.46647585888342513, 0.467126113288146, 0.46775650050163153, 0.468367874311607, 0.4689610404966389, 0.46953676015656165, 0.47009575277101584, 0.4706386990125981, 0.47116624333521184, 0.4716789963596684, 0.4721775370729552, 0.4726624148587167]
    ms53=[0.47313415137389725, 0.4735932422834951, 0.47404015886717293]
    append!(ms5, ms51)
    append!(ms5, ms52)
    append!(ms5, ms53)

    ms6=[0.025195475951206168, 0.030079149262111023, 0.03501283799619641, 0.0400043292367528, 0.04506131015997903, 0.05019134599227936, 0.05540185462894951, 0.06070007742644002, 0.0660930456520846, 0.0715875420473486, 0.07719005693457824, 0.08290673827888718, 0.0887433351101902, 0.09470513372625272, 0.10079688614427829, 0.10702273036174309, 0.1133861021426122, 0.11988963828107133, 0.1265350716332856, 0.13332311866685362, 0.14025336087517737, 0.1473241221488786, 0.15453234508654967, 0.1618734702397844, 0.16934132337907973, 0.17692801695870208, 0.18462387294410634, 0.19241737490118196, 0.20029515757055805, 0.20824204188861567, 0.2162411224203229, 0.22427391233026325, 0.232320548325549]
    ms61=[0.2403600545508343, 0.24837066043421255, 0.25633016332394376, 0.2642163228676286, 0.2720072709407864, 0.27968191896127625, 0.28722034393398405, 0.29460413567466437, 0.30181669026436486, 0.3088434385869116, 0.3156720033520113, 0.322292282782387, 0.3286964636406869, 0.33487897007360173, 0.34083635757968606, 0.3465671631465651, 0.35207172327763114, 0.3573519713761752, 0.36241122498758715, 0.3672539719493744, 0.37188566279303314, 0.37631251497240636, 0.3805413328095673, 0.38457934554925666, 0.3884340646492308, 0.3921131604312735, 0.3956243574627058, 0.3989753475081908, 0.4021737185574614, 0.4052268982525302, 0.4081421099775385, 0.410926339900974, 0.41358631334919643]
    ms62=[0.4161284790123253, 0.4185589996337481, 0.4208837479869379, 0.42310830709601366, 0.42523797380578987, 0.4272777649381398, 0.429232425397204, 0.4311064376923602, 0.432904032443805, 0.4346291995164885, 0.43628569949802465, 0.4378770752964164, 0.43940666367955195, 0.44087760662365827, 0.4422928623671157, 0.44365521609702263, 0.44496729021650316, 0.4462315541573937, 0.44745033372042187, 0.44862581993310335, 0.44976007742486074, 0.45085505232725614, 0.45191257970922744, 0.45293439056364665, 0.45392211836179114, 0.4548773051955356, 0.45580140752737575, 0.45669580156856593, 0.45756178830653704, 0.4584005982019633, 0.4592133955752817, 0.4600012827023551]
    ms63=[0.46076530363729395, 0.4615064477807944, 0.4622256532107345]
    append!(ms6, ms61)
    append!(ms6, ms62)
    append!(ms6, ms63);



    #factor1=1
    #factor2=0.70
    #factor3=0.55
    #factor4=0.92
    #factor5=0.68

        factor1=0.55
        factor2=0.68
        factor3=1
        factor4=0.6
        factor5=0.75
        factor6=1.1


    factory=1.

    display(plot(hs*factor1, sz1, label="J2=0, h factor "*string(factor1)));
    display(plot!(hs*factor2, sz2, label="J2=0.4, h factor "*string(factor2)));
    display(plot!(hs*factor3, sz3, label="J2=0.8, h factor "*string(factor3)));
    display(plot!(hs.*factor4, ms1.*factory, label="J2=0.1, h factor "*string(factor4)));
    display(plot!(hs.*factor5, ms2.*factory, label="J2=0.48, h factor "*string(factor5)));
    display(plot!(hs.*factor6, ms3.*factory, label="J2=0.86, h factor "*string(factor6)));

    #display(plot!(hs.*factor, sz4.*factory));


    #display(plot(hs.*factor1, sz5.*factory, label="J2=1.2, h factor "*string(factor1)));
    #display(plot!(hs.*factor2, sz6.*factory, label="J2=1.6, h factor "*string(factor2)));
    #display(plot!(hs.*factor3, sz7.*factory, label="J2=2, h factor "*string(factor3)));
    #display(plot!(hs.*factor4, ms4.*factory, label="J2=1.24, h factor "*string(factor4)));
    #display(plot!(hs.*factor5, ms5.*factory, label="J2=1.62, h factor "*string(factor5)));
end




function spiGraphj20()
    hs= [0.1, 0.11900000000000001, 0.138, 0.157, 0.176, 0.19499999999999998, 0.21399999999999997, 0.23299999999999996, 0.25199999999999995, 0.27099999999999996, 0.29, 0.309, 0.328, 0.34700000000000003, 0.36600000000000005, 0.38500000000000006, 0.4040000000000001, 0.4230000000000001, 0.4420000000000001, 0.46100000000000013, 0.48000000000000015, 0.49900000000000017, 0.5180000000000001, 0.5370000000000001, 0.5560000000000002, 0.5750000000000002, 0.5940000000000002, 0.6130000000000002, 0.6320000000000002, 0.6510000000000002, 0.6700000000000003, 0.6890000000000003]
    hs2=[0.7080000000000003, 0.7270000000000003, 0.7460000000000003, 0.7650000000000003, 0.7840000000000004, 0.8030000000000004, 0.8220000000000004, 0.8410000000000004, 0.8600000000000004, 0.8790000000000004, 0.8980000000000005, 0.9170000000000005, 0.9360000000000005, 0.9550000000000005, 0.9740000000000005, 0.9930000000000005, 1.0120000000000005, 1.0310000000000004, 1.0500000000000003, 1.0690000000000002, 1.088, 1.107, 1.126, 1.1449999999999998, 1.1639999999999997, 1.1829999999999996, 1.2019999999999995, 1.2209999999999994, 1.2399999999999993, 1.2589999999999992, 1.2779999999999991, 1.296999999999999, 1.315999999999999]
    hs3=[1.3349999999999989, 1.3539999999999988, 1.3729999999999987, 1.3919999999999986, 1.4109999999999985, 1.4299999999999984, 1.4489999999999983, 1.4679999999999982, 1.486999999999998, 1.505999999999998, 1.524999999999998, 1.5439999999999978, 1.5629999999999977, 1.5819999999999976, 1.6009999999999975, 1.6199999999999974, 1.6389999999999973, 1.6579999999999973, 1.6769999999999972, 1.695999999999997, 1.714999999999997, 1.7339999999999969, 1.7529999999999968, 1.7719999999999967, 1.7909999999999966, 1.8099999999999965, 1.8289999999999964, 1.8479999999999963, 1.8669999999999962, 1.8859999999999961, 1.904999999999996, 1.923999999999996]
    hs4=[1.9429999999999958, 1.9619999999999957, 1.9809999999999957, 1.9999999999999956]
    append!(hs, hs2)
    append!(hs, hs3)
    append!(hs, hs4)

    one1=[6.202816975177942, 6.184057112426146, 6.162636693626153, 6.138770142178888, 6.112642575391581, 6.08437877281127, 6.054007049586271, 6.02141957345656, 5.986331785461012, 5.94824484607455, 5.906416269632771, 5.859844889968942, 5.807276720931005, 5.747237825687848, 5.678098721518311, 5.598171956747259, 5.505840296444016, 5.39970766771382, 5.278759209336828, 5.142511472036093, 4.991130534579324, 4.82549626642771, 4.6471964741425875, 4.458445192603113, 4.261932972661416, 4.060630055604741, 3.8575718253243254, 3.65565730318514, 3.4574856963579212, 3.265245583374008, 3.080659832692638, 2.9049799626616792, 2.739018048835419]
    one2=[2.5832025563914365, 2.437645650521273, 2.302212293172941, 2.1765846197936254, 2.0603179567443095, 1.9528870427502136, 1.8537224992524606, 1.7622384564762525, 1.6778526436000094, 1.6000003489096941, 1.5281435755973594, 1.4617765510051575, 1.4004285496269475, 1.3436647966683832, 1.2910860463707634, 1.2423272840729704, 1.1970558836224447, 1.1549694596935414, 1.1157935840593276, 1.0792794819054081, 1.0452017851939532, 1.013356391722613, 0.9835584582833068, 0.955640542157306, 0.9294508954796492, 0.904851910556834, 0.8817187101028567, 0.8599378738961521, 0.839406292046942, 0.8200301345415966, 0.8017239267307805, 0.7844097207690286, 0.7680163535563348]
    one3=[0.7524787823925119, 0.7377374902628224, 0.7237379533927151, 0.7104301644078326, 0.6977682051009761, 0.6857098634254406, 0.6742162899072284, 0.6632516891847523, 0.6527830428583519, 0.6427798602520898, 0.6332139540705692, 0.6240592382708867, 0.6152915457703217, 0.6068884638778733, 0.5988291855749972, 0.5910943749801048, 0.5836660455173448, 0.5765274494755981, 0.5696629777875719, 0.5630580689894644, 0.5566991264331862, 0.5505734429266622, 0.54466913206431, 0.5389750655912141, 0.5334808162124478, 0.5281766053227905, 0.5230532551859317, 0.5181021451424155, 0.513315171467881, 0.5086847105425673, 0.5042035850275695, 0.4998650327732225, 0.49566267821365106]
    one4=[0.4915905060243665, 0.48764283684299836]
    append!(one1, one2)
    append!(one1, one3)
    append!(one1, one4)

    two1=[15.132437547359022, 15.082814764622682, 15.024137956549437, 14.956294667782817, 14.87923927692668, 14.793029527507933, 14.69786338423432, 14.594111386184627, 14.482338080276378, 14.363304573410629, 14.237942956792047, 14.107292678773854, 13.972389394683416, 13.834099138299635, 13.692895774810395, 13.548588622661406, 13.400020625265586, 13.24477535803647, 13.078951456941413, 12.89708087165562, 12.692274538455294, 12.456665416609685, 12.182175667126371, 11.861560857453172, 11.489591801091539, 11.06415208916961, 10.586994040873545, 10.063938225760523, 9.504424946491518, 8.920494452052857, 8.325422706393677, 7.732311849774719, 7.152906624474557]
    two2=[6.59680446452696, 6.071099843421501, 5.580401298425956, 5.127106082275854, 4.711810333358017, 4.333755151005257, 3.99124243752078, 3.6819858379205836, 3.403385555718274, 3.1527303325966725, 2.9273371144155087, 2.7246412556635713, 2.5422496365137137, 2.3779672806451426, 2.2298058900205433, 2.0959806442553215, 1.974899858030104, 1.8651507029864565, 1.7654831553659283, 1.674793571162097, 1.592108754986292, 1.516571021205285, 1.4474245003498147, 1.3840027847024063, 1.3257179076837056, 1.2720505931171304, 1.2225416788167385, 1.1767846048377295, 1.1344188535975648, 1.0951242325234762, 1.0586158970630462, 1.024640020827892, 0.992970029291791]
    two3=[0.9634033229158414, 0.9357584245891717, 0.9098724945384451, 0.8855991632813154, 0.862806639819345, 0.8413760580855527, 0.8212000297110844, 0.802181375608718, 0.784232012651322, 0.7672719750286994, 0.7512285526708502, 0.7360355315657865, 0.7216325228826216, 0.7079643695861175, 0.6949806207811215, 0.6826350653284052, 0.6708853174105409, 0.6596924476983923, 0.6490206545995036, 0.6388369707992527, 0.6291110009119287, 0.6198146866042096, 0.6109220960154311, 0.6024092346849176, 0.5942538755649025, 5864354059700887, 0.5789346896049608, 0.5717339420054313, 0.5648166179555509, 0.5581673095898806, 0.5517716540586606, 0.5456162497505573]
    two4=[0.5396885801912286, 0.5339769448308683, 0.5284703960244739]
    append!(two1, two2)
    append!(two1, two3)
    append!(two1, two4)

    three1=[37.46244942585591, 37.34135489467273, 37.19823541112166, 37.03269052829444, 36.8443395860838, 36.63286942116284, 36.398096797284076, 36.14004670636502, 35.859045654972775, 35.55582577382329, 35.231630956957865, 34.88831029466343, 34.52837704674879, 34.15500373322361, 33.77191626343802, 33.38314341834665, 32.99257419366151, 32.6032775681565, 32.21655245738153, 31.830708276840618, 31.439640019934345, 31.0313675765326, 30.58686024289313, 30.079641907907423, 29.47680140912862, 28.74199042757269, 27.840629345267875, 26.746793755785415, 25.450289247509907, 23.961711842576328, 22.313423472746585, 20.55559424713669, 18.748309084858107]
    three2=[16.952199911285724, 15.220331462758775, 13.59313720262136, 12.096786557811214, 10.744256004411609, 9.537929511298174, 8.472661600319231, 7.538600353512164, 6.723439832359834, 6.0140352700987645, 5.397456200864332, 4.861604504052276, 4.39552492037842, 3.989513938928507, 3.635106006999848, 3.3249917187199043, 3.052903628118812, 2.8134916590042174, 2.6022008101067153, 2.415157854170771, 2.2490700136397894, 2.101136401631973, 1.9689717997565808, 1.8505417331694667, 1.7441075545956024, 1.6481802071747793, 1.5614814050532617, 1.4829110918027257, 1.4115201767982746, 1.3464876896214237, 1.2871016222317428, 1.2327428449186142, 1.1828715825617842]
    three3=[1.1370160236901754, 1.0947627074625856, 1.05574839404028, 1.0196531745703374, 0.9861946185105213, 0.9551227906833377, 0.9262159989811343, 0.899277156961738, 0.8741306652941221, 0.8506197316229078, 0.8286040620191861, 0.8079578678909283, 0.7885681413077833, 0.770333159351068, 0.7531611841198724, 0.7369693305014127, 0.7216825777655835, 0.7072329051380986, 0.6935585340880923, 0.6806032629370968, 0.6683158813409613, 0.6566496540609761, 0.6455618650680339, 0.6350134140500684, 0.6249684587774915, 0.6153940974806493, 0.6062600863391745, 0.5975385877324786, 0.589203945562957, 0.5812324844069511, 0.5736023296994852, 0.5662932464851854]
    three4=[0.5592864945936185, 0.5525646984438782, 0.5461117297193112]
    append!(three1, three2)
    append!(three1, three3)
    append!(three1, three4)

    four1=[61.299369720631404, 61.11132305218615, 60.89002762703122, 60.6349334338012, 60.34520834108214, 60.01966956387332, 59.6567376109512, 59.25443550871872, 58.810460702135224, 58.322359880843436, 57.78783669502654, 57.20521716139472, 56.574085040656755, 55.896076484275135, 55.175786029528226, 54.42168100192161, 53.646846825729675, 52.8692952404681, 52.111474884218744, 51.398559376009764, 50.75510243896935, 50.19981078955323, 49.738563205467294, 49.35643676055754, 49.01034676346622, 48.624787721428675, 48.09372000633152, 47.29133600436869, 46.092641327193675, 44.40119840155862, 42.17678307909671, 39.452604883605446, 36.33346912644235]
    four2=[32.97382280951305, 29.544065175932843, 26.198227275684488, 23.053147574763784, 20.181910416080406, 17.618163960523848, 15.365768233669824, 13.409218761767105, 11.72236122991131, 10.274634196739227, 9.035037851244336, 7.974376886711268, 7.066339699067908, 6.287860716073151, 5.619077515535111, 5.043082439677253, 4.545588499219873, 4.114577024136059, 3.7399622091408156, 3.4132886818159087, 3.127467527647555, 2.876550531055105, 2.655539633086968, 2.460227494967256, 2.287064829918222, 2.133050387139952, 1.9956398945172116, 1.8726707534541849, 1.7622997578269173, 1.6629515521774412, 1.5732759280132815, 1.4921123901802016, 1.418460703731117]
    four3=[1.3514563630273557, 1.2903501166414975, 1.2344908387519837, 1.1833111665652913, 1.1363154274763616, 1.09306946664789, 1.0531920538534463, 1.0163476071523974, 0.9822400153989617, 0.9506073814960565, 0.9212175372920384, 0.8938642083951336, 0.8683637261090497, 0.8445522020944025, 0.8222830950680338, 0.8014251099380236, 0.7818603802159039, 0.7634828917298591, 0.7461971130135736, 0.7299168021059261, 0.7145639656403162, 0.7000679481929601, 0.6863646345632537, 0.6733957491551129, 0.6611082398361332, 0.6494537347438338, 0.6383880627593637, 0.6278708293088189, 0.6178650404520123, 0.6083367692846512, 0.5992548591004563, 0.590590659318376]
    four4=[0.5823177896849583, 0.574411929699374, 0.5668506302698921]
    append!(four1, four2)
    append!(four1, four3)
    append!(four1, four4)

    five1=[113.4342344531655, 113.09377268360353, 112.6936649095239, 112.23383696153365, 111.71431024205717, 111.13516778920032, 110.49644054878078, 109.79788377458294, 109.03862370466469, 108.21667490046221, 107.3283618467567, 106.36772373769475, 105.3260365569548, 104.19164763323477, 102.95037759200831, 101.58679261585641, 100.08666809130722, 98.44092183772217, 96.65113712905966, 94.73643916147805, 92.74082955651323, 90.7390441581755, 88.8376464932952, 87.16680813183427, 85.85801187986345, 85.00524236889004, 84.61354186086507, 84.54897535957853, 84.51434273758177, 84.07736046733031, 82.76358966025884, 80.1939888335539, 76.21218450814467]
    five2=[70.93813727442635, 64.7202145603532, 58.01595094920776, 51.26597749038743, 44.812114254135864, 38.87177022311022, 33.551837767573375, 28.878758586987576, 24.82863427521636, 21.35050632802408, 18.38189480075038, 15.858148184792116, 13.717574219614482, 11.90394577048377, 10.367466534620252, 9.064873435124527, 7.959080406462398, 7.018601145027553, 6.216888909886237, 5.531672233135572, 4.94432964552971, 4.439324701940089, 4.00370931091483, 3.62669550556492, 3.299291402820228, 3.013994924405888, 2.764538066937226, 2.5456745499285773, 2.353004152859902, 2.1828277753653103, 2.0320280151241685, 1.8979708395514923]
    five3=[1.778424616811296, 1.671493404735153, 1.5755619271805208, 1.4892501314047608, 1.4113755905662762, 1.3409223419902183, 1.2770150033907917, 1.2188972280060058, 1.1659137278907479, 1.1174952394886493, 1.073145919049167, 1.0324327504827906, 0.9949766189574969, 0.9604447724807933, 0.9285444381947141, 0.8990174038693397, 0.8716354060142284, 0.8461961968345764, 0.8225201801135968, 0.8004475283362389, 0.779835704563079, 0.7605573306413902, 0.7424983447825328, 0.7255564089617583, 0.7096395286512119, 0.6946648521326697, 0.6805576272203522, 0.6672502888049363, 0.6546816627131651, 0.6427962675212149, 0.6315437028773393, 0.6208781097166609, 0.6107576969384846]
    five4=[0.6011443217695305, 0.5920031195669361, 0.5833021768949693]
    append!(five1, five2)
    append!(five1, five3)
    append!(five1, five4)

    six1=[204.79667658888872, 204.1891966344607, 203.47419707153205, 202.650656984215, 201.71747942639246, 200.6736229151165, 199.51831360266792, 198.251325600238, 196.87328503796942, 195.38589520681558, 193.7919238833581, 192.09474552350545, 190.29721195482256, 188.39966609032172, 186.39702937741936, 184.27510960649715, 182.00659310637428, 179.54761053581527, 176.83629543027678, 173.79538202195067, 170.34154833157118, 166.40464956540382, 161.9595253851985, 157.07032940945652, 151.94033799586384, 146.94759733512836, 142.63116013815943, 139.58536604294247, 138.24161490649735, 138.585316583708, 139.95008695827315, 141.0707645886218, 140.4683480481089]
    six2=[137.00804622355554, 130.31196823892284, 120.80060323624917, 109.40537137415464, 97.18084264614329, 85.02044755804036, 73.54047957434844, 63.08966283380222, 53.814038100237184, 45.72776033555408, 38.76882116571616, 32.8365965491447, 27.81504095567384, 23.58626801049467, 20.03814253747525, 17.06822578730859, 14.585496066588647, 12.510708986069803, 10.77594126348509, 9.32367416616489, 8.105654491331585, 7.081690113881603, 6.218479232548899, 5.488530707829128, 4.869203605176274, 4.341874613501064, 3.8912299310709737, 3.5046714620398074, 3.171824080109692, 2.8841298607634887, 2.6345157803231127, 2.4171225804988214, 2.2270840751967937]
    six3=[2.06034773208696, 1.913528884384148, 1.783792205776888, 1.6687552915665917, 1.5664100981741051, 1.4750588442920645, 1.3932615862123523, 1.3197932702093942, 1.253608444943115, 1.193812213922761, 1.1396362465500265, 1.090418923340227, 1.0455888581594501, 1.0046511822250497, 0.9671760931993145, 0.9327892846890757, 0.901163895078398, 0.8720137556735787, 0.8450876745791297, 0.8201646154557989, 0.7970495993072767, 0.7755702223742598, 0.7555736891334801, 0.7369242731561337, 0.7195011466495981, 0.7031965091451613, 0.6879139834257558, 0.6735672266290174, 0.6600787315253469, 0.6473787877546915, 0.6354045766910383, 0.6240993849956937, 0.6134119221800753]
    six4=[0.6032957163062395, 0.593708590839158]
    append!(six1, six2)
    append!(six1, six3)
    append!(six1, six4)

    num=75
    num2=70
    num3=100

    pow=1
    powy=1;

    alpha=0


    factor=1;

    xmin=0
    xmax=1;
    ymax=2;
    ymin=0


    println(hs[num]);
    println("h num2: ", hs[num2]);
    println("h num3: ", hs[num3]);

    orders=[2, 3, 4, 5, 6];
    orders=(1 ./(((orders.+alpha).^pow).*factor));
    #orders=log.(orders);
    graph=[two1[num], three1[num], four1[num], five1[num], six1[num]]
    graph2=[two1[num2], three1[num2], four1[num2], five1[num2], six1[num2]]
    graph3=[two1[num3], three1[num3], four1[num3], five1[num3], six1[num3]]

    graph=(1 ./(graph.^powy));
    graph2=(1 ./(graph2.^powy));
    graph3=(1 ./(graph3.^powy));
    #=
    graph=log.(graph);
    graph2=log.(graph2);
    graph3=log.(graph3);
    =#
    println(graph);
    println(orders);
    display(plot(orders, graph, title="h: "*string(hs[num])*", J2=0, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    println("first h value", hs[num]);
    fitting(orders, graph);
    println("second h value", hs[num2]);
    fitting(orders, graph2);
    println("third h value", hs[num3]);
    fitting(orders, graph3);
    #plot(graph);
end



function spiGraphj201()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.197942665169929, 6.140544056246748, 6.066950313259829, 5.977207232495399, 5.862553344455499, 5.701519120201553, 5.462767460708139, 5.118842011212381, 4.666471657286065, 4.137728354685894, 3.5883726898921156, 3.071603560721001, 2.619625199238342, 2.2423089887392154, 1.9352663460817403, 1.6880856260217745, 1.4893563534653476, 1.3288893434679796, 1.1983518681967933, 1.0912064675956743, 1.002419190951601, 0.9281385673573219, 0.8654163459748796, 0.8119856367580807, 0.7660918260520797, 0.7263661596865505, 0.691731931182084, 0.661334929538312, 0.6344917229406906, 0.6106510054703955, 0.5893645195703152, 0.5702650239813782, 0.5530494735092173]
    one2=[0.5374660789418316, 0.5233042758618465, 0.5103868900368949, 0.4985639736726445, 0.4877079219133791, 0.4777095773319793, 0.46847510220968547, 0.45992345153740194, 0.4519843191119694, 0.4445964585761007, 0.43770630342506645, 0.4312668267950276, 0.42523659464700764, 0.4195789757754983, 0.4142614796455378, 0.4092551989402684, 0.40453433829199625]
    append!(one1, one2)
    two1=[15.119306290172577, 14.959606044872482, 14.733850342096721, 14.445425955284481, 14.1069957065259, 13.737177000938487, 13.341537761123323, 12.877096610519823, 12.227740912256115, 11.249383673571227, 9.898372299841235, 8.3173677779005, 6.750706753628236, 5.386340958001505, 4.29298721873056, 3.454928981032332, 2.8238440095418147, 2.3492902194414125, 1.9897073916279204, 1.713902466829364, 1.4993536230555424, 1.3300114433829944, 1.1944388695013002, 1.0844297109139978, 0.9940346979939216, 0.9188886901265787, 0.8557482352527248, 0.8021727445282891, 0.7563030534613282, 0.7167061256560112, 0.6822649566964214, 0.6520996359214926, 0.6255101024488887]
    two2=[0.6019341677253239, 0.580916398285918, 0.5620848077735192, 0.5451332237827068, 0.5298078207710797, 0.5158967416109144, 0.5032220306512741, 0.49163331235384516, 0.4810027994787182, 0.47122132230225616, 0.46219514804873507, 0.45384341648280613, 0.44609605933875734, 0.4388921022581861, 0.43217827107315504, 0.42590784172740537, 0.42003968638527145]
    append!(two1, two2)
    three1=[37.43058602858524, 37.04156223882713, 36.48896241184776, 35.76870354029141, 34.89194381730792, 33.89848992296207, 32.85765322840743, 31.823827082272096, 30.70990769951097, 29.11726580089178, 26.39660773065571, 22.265636267472537, 17.391866912867457, 12.87305285426763, 9.333993567960938, 6.806739409280425, 5.0676996559453285, 3.8765205048619498, 3.0506916553084835, 2.4668376245944494, 2.0447909689844117, 1.7328048946091308, 1.4971915315098965, 1.3156774376419038, 1.1732629873582463, 1.0596511692866677, 0.9676378867621993, 0.8920903090177441, 0.8292878619946822, 0.7764898121499542, 0.7316466331822264, 0.6932041050178417, 0.6599682058810816]
    three2=[0.6310105022528273, 0.6056009367866853, 0.5831594274647425, 0.5632205649849643, 0.545407552527666, 0.5294127496793195, 0.5149829917551388, 0.5019084011508546, 0.4900137794215162, 0.4791519258327404, 0.4691984076325798, 0.46004743412907045, 0.4516085772491408, 0.4438041463243688, 0.43656707256432675, 0.4298391933576593, 0.4235698524225261]
    append!(three1, three2)
    four1=[61.25004747344293, 60.649493182005976, 59.7990986611473, 58.666678922049364, 57.205980333016335, 55.39736117784665, 53.34256105098841, 51.36513989342059, 49.91133633069682, 48.948721493691586, 47.105942295007594, 42.165570775322536, 33.82133856774975, 24.669826074043552, 17.16520696362557, 11.882022026188272, 8.376523464958098, 6.074511650393814, 4.54501899016637, 3.507451947562815, 2.786506332255507, 2.2731561821596413, 1.8988750550270104, 1.6198486886888268, 1.407503510542383, 1.2428181647782173, 1.1128699620278477, 1.0087056490656654, 0.9240055384231693, 0.8542300064724846, 0.7960641899825085, 0.7470502398765606, 0.7053396011022586]
    four2=[0.6695234121549217, 0.6385145883034837, 0.6114646370069128, 0.5877041652996854, 0.5666997779340603, 0.5480224685692938, 0.5313241723868575, 0.5163201845107257, 0.5027758418070569, 0.49049633755363314, 0.4793188609339706, 0.4691064790578784, 0.45974333619129887, 0.45113085824048815, 0.44318472975310735, 0.43583247011404125, 0.4290114768582166]
    append!(four1, four2)
    five1=[113.34485511673287, 112.26015990225848, 110.7480911503994, 108.80299999183651, 106.38447278596934, 103.35055577439348, 99.43665675404807, 94.49230798516965, 89.17553023754203, 85.51746970781372, 84.89281393181591, 82.9880002748939, 72.44293035421481, 54.815847062811656, 37.84097881655177, 25.252211173591206, 16.85161548989577, 11.443751736168698, 7.982369933099735, 5.745459817134106, 4.2732686942289995, 3.2820768515928114, 2.5981282730086686, 2.1143710618329488, 1.7639306423463774, 1.5042701694699196, 1.3077873655862826, 1.1561995725142025, 1.0371490994310721, 0.9421180741036248, 0.865124986556151, 0.8018949859101654, 0.7493221224828761]
    five2=[0.7051146219770056, 0.6675568976798203, 0.6353472811956213, 0.6074856686582194, 0.5831945887686889, 0.5618629852413026, 0.543005652748732, 0.526233609237325, 0.5112322050868625, 0.497744770151847, 0.485560273700704, 0.4745039202454745, 0.46442991653045246, 0.45521586156120775, 0.4467583582291366, 0.4389695531343809, 0.4317743903281147]
    append!(five1, five2)

    six1=[204.63713138377125, 202.6969539129891, 199.97064417052297, 196.4399846218905, 192.1239127617626, 187.0622914575711, 181.09798622173682, 173.43520208687823, 162.6545366677076, 149.0474893784805, 139.3230128561055, 140.6196691855898, 138.62824507052483, 115.81675224038398, 82.98923588521374, 54.9041813865568, 35.2538239437121, 22.576785597692137, 14.675226994999596, 9.797442835009413, 6.765154632891594, 4.84612618925474, 3.6020388027617405, 2.773508474144308, 2.2063027086687677, 1.8073894455536434, 1.519550075710339, 1.306816366665644, 1.1460626672226468, 1.0220846859567687, 0.9246680413224861, 0.8468080352164313, 0.7836068351296683]
    six2=[0.7315766963622619, 0.6881911734290278, 0.6515906932996574, 0.6203859525832096, 0.5935244342299693, 0.57019833479643, 0.5497800997421118, 0.5317766469811758, 0.515796427038065, 0.501525425561435, 0.48870946610263377, 0.4771410123263294, 0.4666492323750237, 0.45709242817755374, 0.44835222769276073, 0.4403290720612215, 0.4329387033389642]
    append!(six1, six2);

    #=
        num=27
        num2=28
        num3=29
        =#

        num=27
        num2=28
        num3=29

        pow=1;
        powy=1;

        alpha=0;

        factor=1;

        xmin=0;
        xmax=1;
        ymax=2;
        ymin=0;

        println(hs[num]);
        println("h num2: ", hs[num2]);
        println("h num3: ", hs[num3]);

        orders=[2, 3, 4, 5, 6]
        orders=(1 ./(((orders.+alpha).^pow).*factor));
        #orders=log.(orders);
        graph=[two1[num], three1[num], four1[num], five1[num], six1[num]]
        graph2=[two1[num2], three1[num2], four1[num2], five1[num2], six1[num2]]
        graph3=[two1[num3], three1[num3], four1[num3], five1[num3], six1[num3]]

        graph=(1 ./(graph.^powy));
        graph2=(1 ./(graph2.^powy));
        graph3=(1 ./(graph3.^powy));
        #=
        graph=log.(graph);
        graph2=log.(graph2);
        graph3=log.(graph3);
        =#
        println(graph);
        println(orders);
        display(plot(orders, graph, title="J2=0.1, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

        display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
        display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

        println("first h value", hs[num]);
        fitting(orders, graph);
        println("second h value", hs[num2]);
        fitting(orders, graph2);
        println("third h value", hs[num3]);
        fitting(orders, graph3);


end



function spiGraphj2028()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.187155500471157, 6.119167060550142, 6.032007947659109, 5.918951065918273, 5.752702069398991, 5.4854595000158, 5.073274842932856, 4.5174293235768666, 3.8816843302679445, 3.25661183561236, 2.7081434002575966, 2.2600918041096456, 1.9073153638699076, 1.6332768542825689, 1.4203216796083549, 1.2535329380068236, 1.121403887436972, 1.0153866604822226, 0.9292128548924707, 0.8582875273733697, 0.7992219381571336, 0.7494934250192427, 0.7072034837315225, 0.6709068788507473, 0.6394907431915329, 0.6120885228168033, 0.5880182023380909, 0.5667375267932173, 0.5478112092866088, 0.5308866659453043, 0.5156758760838591, 0.5019416857507774, 0.48948736657893077]
    one2=[0.47814858277758593, 0.4677871564485917, 0.4582861881114621, 0.44954620747589924, 0.4414821140025489, 0.4340207277784299, 0.42709881562752106, 0.4206614899769747, 0.41466090213061946, 0.4090551696112789, 0.4038074907744389, 0.39888541015475787, 0.39426020583184684, 0.38990637611300716, 0.3858012074771498, 0.3819244093386197, 0.37825780401852016]
    append!(one1, one2)

    two1=[15.08891027670218, 14.888903632051973, 14.60433084402858, 14.245084206860776, 13.836336721216531, 13.392495608171807, 12.85051910425864, 12.022068382486069, 10.709779901411771, 8.964642349669344, 7.118905634528686, 5.500758626968015, 4.240466946983711, 3.314622474076801, 2.6473516409532696, 2.1650959101704603, 1.8118048178904875, 1.54828296400929, 1.3479014414578425, 1.1926324571275684, 1.070168295840693, 0.9719887183658753, 0.892099172899487, 0.8262106452738074, 0.7712032150101316, 0.724771114517461, 0.6851845779005339, 0.6511276477623666, 0.6215860356898126, 0.5957684359547274, 0.573050521685905, 0.552934540696535, 0.5350197887889085]
    two2=[0.5189807688591566, 0.5045508495815788, 0.4915099067656023, 0.4796748817807054, 0.4688924996191788, 0.45903360212810373, 0.4499887008603265, 0.44166445921977826, 0.4339808887999935, 0.42686909905829457, 0.4202694789997614, 0.4141302186159377, 0.4084060993625994, 0.40305749908781763, 0.39804956895713045, 0.39335154914943804, 0.38893619714174343]
    append!(two1, two2)

    three1=[37.35720192013909, 36.871763934264884, 36.17364727269255, 35.261766277687485, 34.17630002464164, 33.013542922711025, 31.85470151608152, 30.51025460597659, 28.213148825960882, 24.06645721136229, 18.476402180050247, 13.096789337663049, 9.018284485877004, 6.2788935018206855, 4.510489015770908, 3.364994799525983, 2.6061533159270382, 2.0885682050821486, 1.7247062616119524, 1.461435006385737, 1.2658356406967943, 1.1169978784283425, 1.0012915655331285, 0.9096059080405965, 0.8357048239601668, 0.7752247426919815, 0.7250496132283784, 0.6829122589478773, 0.6471345787829259, 0.6164547701095774, 0.589910225705633, 0.5667567488459498, 0.5464118977233299]
    three2=[0.5284146383671982, 0.5123961986130293, 0.4980587316357154, 0.48515950146883646, 0.4734990248587425, 0.46291208271102857, 0.45326083729896327, 0.44442951142257736, 0.43632023822124333, 0.4288497966217452, 0.42194702318341193, 0.415550744685808, 0.40960811507575745, 0.404073268749065, 0.3989062230487333, 0.39407197857342313, 0.38953977739591605]
    append!(three1, three2)
    four1=[61.13719908137158, 60.39180534682765, 59.31237139932223, 57.82881430855295, 55.879405779224044, 53.568317812979146, 51.3788043630319, 49.96206411110009, 48.77392324156244, 44.81967745074975, 35.911406756065986, 25.121810798141695, 16.47739442323969, 10.800354327650332, 7.296831358317693, 5.134098130295866, 3.766777893196651, 2.874655646751584, 2.273135424296011, 1.8545159299879002, 1.5544924973610201, 1.3336245406909737, 1.1670447113196443, 1.0386472411818608, 0.9377319593410951, 0.8570188926735792, 0.7914446518272042, 0.7374151802484752, 0.6923311564143368, 0.6542800140405637, 0.621832011456656, 0.5939026252315583, 0.5696580469703854]
    four2=[0.5484492075460665, 0.529765005810681, 0.5131986751614432, 0.49842327211020654, 0.4851735895088565, 0.4732326537049759, 0.46242153276752607, 0.4525915655784061, 0.4436183786613047, 0.4353972382754871, 0.42783940854312563, 0.42086927509391603, 0.4144220559777311, 0.40844196684356937, 0.40288074042715644, 0.39769642402257455, 0.3928523969505112]
    append!(four1, four2)

    five1=[113.14040338910615, 111.79967454495633, 109.91427186316861, 107.44387158615487, 104.21995254676636, 99.85287502001634, 94.10128720651737, 88.24333438014824, 85.64368358831376, 85.25102748550538, 76.00987630182652, 55.895086629376266, 36.329195971973114, 22.767371308672924, 14.391771163612104, 9.36802679689788, 6.341857776428103, 4.481094152551036, 3.303465336282383, 2.5338489650317166, 2.014311406376416, 1.6525219949173722, 1.3931806216259686, 1.2022747333977484, 1.0583149068858202, 0.9473648989018356, 0.8601600881381961, 0.790396794354852, 0.7336923142394971, 0.6869379282471936, 0.6478873918628634, 0.6148896672386911, 0.5867118885257026]
    five2=[0.5624199083011134, 0.5412962949863619, 0.5227831195892243, 0.5064414322277692, 0.4919221509684695, 0.47894486864847974, 0.46728223369047894, 0.4567483030726993, 0.4471897621891182, 0.43847923771084013, 0.43051015504586454, 0.4231927478574138, 0.41645093441120384, 0.4102198521343937, 0.40444389884696125, 0.3990751619780858, 0.3940721536398889]
    append!(five1, five2)

    six1=[204.27159453471836, 201.86533032446204, 198.4445166141784, 193.98301890120172, 188.51908280585633, 181.87899218994716, 172.86089882527523, 159.36079669812156, 144.10578858892086, 140.4259466909474, 141.97099032402198, 118.14735487554555, 80.09280604833127, 49.386661572160556, 29.640468735369062, 17.914041623905604, 11.139432079625916, 7.220816555401745, 4.9085821816026485, 3.5019561389287865, 2.6156773844668537, 2.0367995295691452, 1.6453106110068234, 1.3717703184645909, 1.1748164378315598, 1.029076286190343, 0.9185345193246764, 0.8328041290288148, 0.7649748301963324, 0.7103391237647765, 0.6656188934257696, 0.6284845251362798, 0.5972490725796865]
    six2=[0.5706695834352961, 0.547815438075737, 0.5279794534930736, 0.5106168196483307, 0.4953024506661819, 0.4817007456746957, 0.46954384525155335, 0.4586157751148107, 0.4487407487479838, 0.43977442781467085, 0.4315973221682042, 0.4241097558088029, 0.41722798707004893, 0.4108811902249099, 0.4050090900359059, 0.39956008946158555, 0.3944897774736611]
    append!(six1, six2)



            num=24
            num2=25
            num3=26

            pow=1
            powy=1;

            alpha=0


            factor=1;

            xmin=0
            xmax=1;
            ymax=2;
            ymin=0

            println(hs[num]);
            println("h num2: ", hs[num2]);
            println("h num3: ", hs[num3]);

            orders=[2, 3, 4, 5, 6]
            orders=(1 ./(((orders.+alpha).^pow).*factor));
            #orders=log.(orders);
            graph=[two1[num], three1[num], four1[num], five1[num], six1[num]]
            graph2=[two1[num2], three1[num2], four1[num2], five1[num2], six1[num2]]
            graph3=[two1[num3], three1[num3], four1[num3], five1[num3], six1[num3]]

            graph=(1 ./(graph.^powy));
            graph2=(1 ./(graph2.^powy));
            graph3=(1 ./(graph3.^powy));
            #=
            graph=log.(graph);
            graph2=log.(graph2);
            graph3=log.(graph3);
            =#
            println(graph);
            println(orders);
            display(plot(orders, graph, title="J2=0.28, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

            display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
            display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
            fitting(orders, graph);

end





function spiGraphj2082()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.139499044497599, 5.908464742770815, 4.936844358014182, 3.361095442694028, 2.178645390218772, 1.5162604944007148, 1.1492320921394177, 0.931923138567017, 0.7936424389098415, 0.7000060105330596, 0.6332852679036982, 0.5837306154796595, 0.5456556266370494, 0.5155698996243553, 0.4912350003552516, 0.4711603693992381, 0.4543207165295876, 0.4399906323007735, 0.42764407047497777, 0.41689118672946773, 0.4074374620886483, 0.39905654477180014, 0.39157177776840885, 0.38484336625098003, 0.37875929133857755, 0.37322876424524687, 0.36817743564261124, 0.3635438386719452, 0.35927671273200273, 0.35533296524200725, 0.35167610170205477, 0.348275003763901, 0.34510296889547076]
    one2=[0.3421369487856025, 0.33935694024406937, 0.33674549420370753, 0.334287316987942, 0.3319689442502511, 0.32977847259442566, 0.32770533730916185, 0.32574012722326107, 0.323874429634611, 0.32210069975346806, 0.32041215024428704, 0.3188026573364856, 0.31726668066588004, 0.3157991945510065, 0.3143956288380799, 0.31305181778833857, 0.3117639557546148]
    append!(one1, one2)

    two1=[14.785681185586684, 14.126097101335947, 13.067117729923705, 9.777009487896619, 5.63214154775028, 3.2227209052704, 2.0625736058622213, 1.4722069210516848, 1.1413057872616021, 0.9389287101595608, 0.8060657242662899, 0.7137659184238745, 0.6466727456127122, 0.5960776013877865, 0.5567557220349039, 0.5254199543685973, 0.4999170628888904, 0.4787870312299606, 0.4610099358765254, 0.4458545668189308, 0.4327846403107529, 0.4213988559936965, 0.41139151394176937, 0.40252599586585025, 0.3946165107773518, 0.38751527769940985, 0.38110336290082997, 0.37528402182958676, 0.36997778842767476, 0.3651188034322382, 0.3606520343821732, 0.3565311462581577, 0.35271685291581845]
    two2=[0.3491756280098426, 0.3458786876665251, 0.3428011806662245, 0.3399215386136524, 0.337220950538664, 0.33468293509709274, 0.33229298992236433, 0.330038302411671, 0.3279075097802253, 0.3258904988764219, 0.3239782382963622, 0.32216263687991475, 0.3204364238813592, 0.3187930470418658, 0.31722658551638216, 0.3157316751944923, 0.3143034443989252]
    append!(two1, two2)

    three1=[36.665946349253524, 34.98913489729257, 33.05521883480543, 26.624697295547026, 12.818301928347047, 5.39898106631926, 2.742013328771786, 1.6925916655923168, 1.2045745392349132, 0.9440461334213236, 0.7892397462041023, 0.6893377155005755, 0.6205869575420668, 0.5708104600843985, 0.5332767386177274, 0.5040259453877005, 0.480604728978688, 0.4614251650561655, 0.4454204464995861, 0.4318505037336006, 0.42018743503448275, 0.41004539351241504, 0.4011362417195314, 0.39324067417305675, 0.3861889182817386, 0.37984753361456447, 0.37411019187657785, 0.36889111436898947, 0.36412032010703316, 0.3597401307557962, 0.35570256283549295, 0.351967356193396, 0.3485004652806931]
    three2=[0.3452728915812062, 0.3422597706083029, 0.3394396510451913, 0.33679392044128653, 0.33430634382076224, 0.33196269006750095, 0.3297504272023768, 0.32765847207781607, 0.32567698346682183, 0.32379718998174195, 0.3220112461182284, 0.32031211118296377, 0.31869344694943436, 0.31714953071727153, 0.3156751811270907, 0.3142656945730091, 0.31291679047972853]
    append!(three1, three2)

    four1=[60.12528208529269, 56.99333416624111, 53.24311376460137, 50.14415105781351, 25.110409951150153, 9.535835394729189, 4.368965603311233, 2.4536596566093385, 1.6137388910024044, 1.1887364321663965, 0.9477928981356096, 0.7984999888903854, 0.6993184973343745, 0.6296882680450638, 0.5785912618434624, 0.5397211555403492, 0.50926439270382, 0.4848054264957532, 0.46475267213602667, 0.44802132887455154, 0.43385001490891795, 0.4216904979135669, 0.4111390485363155, 0.40189238067968547, 0.3937185946213899, 0.38643754452572676, 0.3799072818455295, 0.37401450841768424, 0.3686677330049682, 0.3637922852123901, 0.35932662898989165, 0.3552195992449582, 0.3514283049191391]
    four2=[0.3479165189353326, 0.3446534289768931, 0.34161265857186746, 0.33877149272841833, 0.33611026037032093, 0.33361183757015106, 0.33126124527940015, 0.3290453208643235, 0.32695244848581817, 0.32497233635464723, 0.32309583121146035, 0.3213147636877941, 0.3196218179679099, 0.31801042201528257, 0.3164746542235116, 0.3150091639221786, 0.31360910342658]
    append!(four1, four2)

    five1=[111.4294611865314, 106.56063883312427, 94.90967859329649, 92.95625564934653, 57.57217515455528, 21.312243125354726, 8.400449988873465, 3.9460399107161015, 2.2368150880401623, 1.4798448397007666, 1.0969937010050144, 0.8808237459576513, 0.7474840257048738, 0.659220907526359, 0.5973964842189191, 0.5520687749861364, 0.5175775907172481, 0.4905182025161864, 0.46874448474379937, 0.450848330495581, 0.43587334885765094, 0.4231501412347158, 0.41219770751913004, 0.4026623381335577, 0.3942785515302625, 0.3868434271629272, 0.38019931757903275, 0.37422194527934316, 0.36881203867274254, 0.36388934883825846, 0.3593882969689247, 0.35525475982293536, 0.3514436629161044]
    five2=[0.34791715506478615, 0.3446432072821447, 0.3415945254696277, 0.338747699186431, 0.3360825272186178, 0.33358147994226134, 0.3312292664789094, 0.32901248398677574, 0.32691933093206327, 0.32493937150322355, 0.32306334114640956, 0.3212829838852188, 0.31959091677389073, 0.31798051573498104, 0.31644581912419045, 0.3149814451611064, 0.3135825224097617]
    append!(five1, five2)

    six1=[201.06472032474483, 192.8088994663855, 174.7172156775645, 147.41738806218098, 124.96405416657039, 48.20930598367367, 16.84598021050227, 6.536036445286065, 3.1180759312964446, 1.8218900144418284, 1.2464997611985031, 0.9529802381551329, 0.7852611501439241, 0.680368556649547, 0.6099109305757571, 0.559826613986102, 0.5225791319074151, 0.49385218655194196, 0.4710314188017848, 0.45245629825188804, 0.4370284749514933, 0.42399568919672775, 0.41282695203411834, 0.4031375004147996, 0.39464204726742835, 0.3871247392575091, 0.38041930122728407, 0.37439558836686626, 0.3689502682509849, 0.3640002363650723, 0.3594778755472585, 0.35532758898194716, 0.35150322289336716]
    six2=[0.3479661262686605, 0.3446836726417737, 0.3416281162711056, 0.33877570164608484, 0.3361059627434179, 0.33360116509704896, 0.3312458578393688, 0.32902651164396834, 0.3269312257106042, 0.32494948453954053, 0.3230719617695176, 0.32129034971765386, 0.3195972238793926, 0.3179859269936004, 0.31645047050366015, 0.31498545104333786, 0.3135859769304199]
    append!(six1, six2);
    num=11
    num2=12
    num3=13

    pow=1
    powy=1;

    alpha=0


    factor=1;

    xmin=0
    xmax=1;
    ymax=2;
    ymin=0

    println(hs[num]);
    println("h num2: ", hs[num2]);
    println("h num3: ", hs[num3]);

    orders=[2, 3, 4, 5]
    orders=(1 ./(((orders.+alpha).^pow).*factor));
    #orders=log.(orders);
    graph=[two1[num], three1[num], four1[num], five1[num]]
    graph2=[two1[num2], three1[num2], four1[num2], five1[num2]]
    graph3=[two1[num3], three1[num3], four1[num3], five1[num3]]

    graph=(1 ./(graph.^powy));
    graph2=(1 ./(graph2.^powy));
    graph3=(1 ./(graph3.^powy));
    #=
    graph=log.(graph);
    graph2=log.(graph2);
    graph3=log.(graph3);
    =#
    println(graph);
    println(orders);
    display(plot(orders, graph, title="J2=0.82, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    fitting(orders, graph);

end


function spiGraphj21()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)


    one1=[0.46592054744157946, 0.45213897208108805, 0.43633347135255846, 0.42180657975670466, 0.40939882897207014, 0.3989564134802056, 0.3901055573172674, 0.3824982774137129, 0.3758618168274359, 0.36999283003507477, 0.36474119346559675, 0.3599953308370448, 0.3556711533600308, 0.35170420475240405, 0.3480441858725818, 0.34465114451609, 0.3414928070337697, 0.33854269002383874, 0.3357787472322653, 0.3331823867252995, 0.33073774691794144, 0.3284311556737133, 0.32625072046062004, 0.32418601349774, 0.3222278266146489, 0.32036797791246796, 0.3185991573917516, 0.3169148022480236, 0.31530899502227094, 0.3137763795617756, 0.3123120910126381, 0.31091169698745247, 0.30957114772154903]
    one2=[0.3082867335310579, 0.3070550482554471, 0.3058729576479252, 0.30473757188955447, 0.30364622156536514, 0.302596436567897, 0.30158592749187085, 0.30061256916140067, 0.29967438599285606, 0.2987695389456569, 0.29789631385387044, 0.29705311096241666, 0.2962384355197529, 0.295450889299822, 0.29468916294384373, 0.29395202902843365, 0.293238335779023]
    append!(one1, one2)

    two1=[0.9021478946771884, 0.6835368303887444, 0.5776365460550468, 0.517386920963873, 0.47897141438015567, 0.4523541239715775, 0.4327091048852137, 0.41748450463190734, 0.405228566680099, 0.39506449035308977, 0.38643531165601075, 0.37897156166450274, 0.3724187459854867, 0.36659569102477974, 0.3613696198648053, 0.35664069259486864, 0.3523321067651817, 0.34838357526307673, 0.34474691781641953, 0.34138301108874264, 0.33825963342906074, 0.33534991186193175, 0.33263118275343034, 0.330084141942269, 0.32769220094269114, 0.32544099223080236, 0.32331798399536427, 0.3213121764143091, 0.3194138594474911, 0.31761441761313947, 0.3159061710972585, 0.3142822452344428, 0.31273646239850916]
    two2=[0.31126325174778907, 0.30985757333926084, 0.3085148538924817, 0.307230932083187, 0.3060020116848218, 0.30482462122137227, 0.3036955790566507, 0.30261196305079696, 0.3015710840716352, 0.3005704627888342, 0.29960780925839875, 0.29868100490965915, 0.2977880865962583, 0.2969272324354826, 0.2960967491937967, 0.2952950610306482, 0.29452069941580566]

    append!(two1, two2)

    three1=[-0.30052215097837043, 0.15059898529890314, 0.2947926223673971, 0.3444655458835154, 0.361914313153645, 0.36730297777777154, 0.3677874608727792, 0.3661498577097242, 0.36356774187494745, 0.36057764293486194, 0.35743915637373724, 0.3542836932532575, 0.3511796680019644, 0.34816289877550843, 0.3452515859442291, 0.342454061606992, 0.3397729779436438, 0.33720766115747514, 0.33475548113272824, 0.33241267291366966, 0.33017484210609116, 0.328037282015322, 0.32599517556014895, 0.32404372443498064, 0.32217823159068926, 0.3203941529258789, 0.31868712851238234, 0.31705299991642366, 0.3154878181834577, 0.3139878453905256, 0.3125495518843503, 0.31116961066029825]
    three2=[0.3098448898352568, 0.3085724440397745, 0.3073495051481239, 0.30617347271508855, 0.30504190444617035, 0.30395250677810626, 0.3029031257769989, 0.30189173835610705, 0.30091644393083106, 0.2999754565218115, 0.29906709721532804, 0.2981897872098858, 0.2973420411431001, 0.2965224609720369, 0.295729730196276, 0.2949626084707053, 0.29421992657905505, 0.2935005818067325]
    append!(three1, three2)

    four1=[1.0331460115548203, 0.7261647375340521, 0.5885281038345942, 0.5167674216357933, 0.47348426992436876, 0.4447817901031942, 0.4243888251131119, 0.4090862355094036, 0.3970865784222175, 0.38733786186439634, 0.37918995637705744, 0.3722235506092485, 0.3661577687588558, 0.3607980055450283, 0.3560052864268006, 0.3516776263299839, 0.3477383244659289, 0.3441284025499288, 0.3408015933865667, 0.3377209403038049, 0.33485644076499466, 0.3321833800904289, 0.3296811324582643, 0.3273322821366621, 0.32512197033626655, 0.3230374013057584, 0.32106746427357147, 0.31920244005392495, 0.317433770210378, 0.31575387377738595, 0.31415599984138065, 0.3126341077188425, 0.3111827688688711]
    four2=[0.30979708572725156, 0.30847262389399327, 0.30720535530067117, 0.3059916099806917, 0.3048280350892104, 0.3037115596591466, 0.30263936433447114, 0.3016088550347108, 0.30061764002329444, 0.2996635100365986, 0.29874442059554346, 0.2978584764993362, 0.29700391820763444, 0.2961791095059174, 0.2953825268892267, 0.29461274952775574, 0.29386845102740816]
    append!(four1, four2)

    five1=[0.7391506180231768, 0.6459244073498922, 0.5540918387013598, 0.4966779136677598, 0.4597864316232997, 0.43474485282527364, 0.4167377109968851, 0.40309538390665733, 0.3922984830006957, 0.3834470935102994, 0.3759846405315034, 0.3695522541221813, 0.3639095162002762, 0.35888970005607923, 0.3543735304652871, 0.3502732543829734, 0.3465226585192682, 0.3430706309928765, 0.33987689730904, 0.33690913175671905, 0.3341409539615877, 0.33155051559777016, 0.32911948113585515, 0.32683228192476876, 0.32467556057197233, 0.3226377512153593, 0.3207087566191148, 0.31887969920850645, 0.3171427224578771, 0.31549083388010857, 0.3139177784647068, 0.3124179358164879, 0.3109862340961034]
    five2=[0.30961808062988977, 0.30830930202172074, 0.3070560939306336, 0.3058549805286302, 0.30470277574055793, 0.30359655355608756, 0.30253362138087647, 0.30151149479293815, 0.3005278785858107, 0.2995806474549659, 0.29866783128947866, 0.2977875999783813, 0.2969382517606766, 0.296118201294316, 0.29532596979630266, 0.2945601767899939, 0.29381953134006583]
    append!(five1, five2)

    num=4
    pow=1
    num=12
    num2=13
    num3=14

    pow=1
    powy=1;

    alpha=0


    factor=1;

    xmin=0
    xmax=1;
    ymax=2;
    ymin=0

    println(hs[num]);
    println("h num2: ", hs[num2]);
    println("h num3: ", hs[num3]);

    orders=[2, 3, 4, 5, 6]

    orders=(1 ./(((orders.+alpha).^pow).*factor));
    #orders=log.(orders);
    graph=[two1[num], three1[num], four1[num], five1[num], six1[num]]
    graph2=[two1[num2], three1[num2], four1[num2], five1[num2], six1[num2]]
    graph3=[two1[num3], three1[num3], four1[num3], five1[num3], six1[num3]]

    graph=(1 ./(graph.^powy));
    graph2=(1 ./(graph2.^powy));
    graph3=(1 ./(graph3.^powy));
    #=
    graph=log.(graph);
    graph2=log.(graph2);
    graph3=log.(graph3);
    =#
    println(graph);
    println(orders);
    display(plot(orders, graph, title="J2=1, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    fitting(orders, graph);

end



function spiGraphj2064()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.15507997447002, 6.055817094912108, 5.874358313873518, 5.4391855895180505, 4.613273182813163, 3.58566078682122, 2.6859304520371214, 2.037238785126839, 1.5997304479269552, 1.3048269451374037, 1.101002868150013, 0.9555467200002079, 0.8484063708426111, 0.7671814008150875, 0.7040176469252378, 0.6537978981657954, 0.6130924136439367, 0.5795402403673582, 0.5514757697863566, 0.527697448739759, 0.5073208313959647, 0.48968291995346247, 0.4742784623276139, 0.46071662934424773, 0.44869097492267074, 0.4379582316412861, 0.4283230951886815, 0.4196271398116965, 0.4117406297168842, 0.40455639129926513, 0.3979851724521898, 0.3919520889103434, 0.3863938748168461]
    one2=[0.38125673499434215, 0.37649465214115185, 0.3720680413659918, 0.3679426723655328, 0.3640887996215651, 0.3604804555923897, 0.35709487259869266, 0.3539120070550197, 0.3509141456495724, 0.34808557756262026, 0.34541232022815765, 0.34288188875946735, 0.34048310117750835, 0.33820591315012927, 0.3360412771765906, 0.3339810221176124, 0.3320177497346233]
    append!(one1, one2)

    two1=[14.971183455851403, 14.592660018152387, 14.068782071290574, 13.446996417305943, 12.374170811307348, 10.144849282508416, 7.242412438051902, 4.869325644326995, 3.3367065670004923, 2.4064030044661693, 1.832371534089242, 1.4632130482792336, 1.2148622201435697, 1.0406699278548064, 0.9139441784818706, 0.8188060592033078, 0.7454330559495953, 0.6875239637481774, 0.6409012854599931, 0.602712772135793, 0.5709592851380052, 0.5442065165104064, 0.5214037141695411, 0.5017665962229334, 0.48469985955449346, 0.46974474445859504, 0.4565428309541345, 0.4448105781213759, 0.434321114895573, 0.42489101467179924, 0.41637055256712874, 0.4086364338821711, 0.4015863010761645]
    two2=[0.39513453760967004, 0.38920902903052923, 0.3837486386854978, 0.3787012225818871, 0.3740220550456836, 0.36967257030955225, 0.3656193491473745, 0.3618332971728948, 0.3582889741629685, 0.3549640432780211, 0.3518388160990516, 0.34889587473906425, 0.34611975633447434, 0.34349668831433633, 0.3410143652296467, 0.33866175977875124, 0.33642896211080764]
    append!(two1, two2)

    three1=[37.0805500223624, 36.16651829226216, 34.815441418610575, 33.267628384942256, 31.53920355899043, 27.276445428657187, 18.615494238951644, 10.592844976086555, 5.990100368586053, 3.6703749517134887, 2.467832221804724, 1.7991026887439956, 1.3992466042141154, 1.144254343202318, 0.9724990545251094, 0.8513756294133067, 0.7626074024317367, 0.6954106882185105, 0.6431307135494528, 0.6014964216253067, 0.5676708507665251, 0.539711858300516, 0.5162539726923892, 0.49631420131162396, 0.4791698308285893, 0.4642793965214328, 0.45123029369795764, 0.43970326592735, 0.42944784039421857, 0.4202650190399211, 0.4119948746033134, 0.40450752302099957, 0.39769645884136257]
    three2=[0.3914735701450576, 0.38576536417856255, 0.3805100772302603, 0.375655438431147, 0.3711569225327462, 0.3669763722879982, 0.3630809030051616, 0.35944202449864515, 0.35603493205474074, 0.35283792981249384, 0.3498319587594863, 0.347000207938309, 0.34432779230038146, 0.3418014843230469, 0.3394094891994561, 0.3371412556489105, 0.3349873158844945]

    append!(three1, three2)

    four1=[60.724676355257394, 59.31399035901279, 56.92418214848045, 53.67410628067966, 51.52555121633216, 49.37278963083208, 36.56554990876212, 19.93364798136293, 10.357248546575459, 5.835254349798168, 3.6336801618371743, 2.4771772113268202, 1.820708245920358, 1.421255929138966, 1.1632076204760349, 0.9878326124996749, 0.8634296037832278, 0.7719324475575662, 0.7025401451565647, 0.64851756961983, 0.6055067026853134, 0.5705943329927261, 0.5417762464632352, 0.5176379842000645, 0.4971583806864289, 0.47958509207978606, 0.4643536383485375, 0.45103348256067466, 0.4392913357255963, 0.4288656898040861, 0.4195488238669408, 0.41117387999774424, 0.4036054399727092]
    four2=[0.39673255806368585, 0.3904635437958939, 0.3847220080966185, 0.3794438339610122, 0.3745748315481316, 0.37006890565905914, 0.3658866108939074, 0.3619940026444597, 0.35836171673809064, 0.35496422620999046, 0.35177923738390754, 0.348787195647952, 0.3459708788726582, 0.3433150605968457, 0.34080622966620755, 0.3384323557984451, 0.33618269224367014]
    append!(four1, four2)

    five1=[112.40027866677214, 109.99814837506028, 106.17464057559818, 99.61134582224648, 90.63356880179782, 88.97780787942432, 78.25337375495005, 45.03163651672803, 22.3121038761398, 11.366978253834676, 6.273041927698647, 3.8087230631454165, 2.5351864804124413, 1.8275618937474396, 1.406453481186332, 1.1400715319814299, 0.9624099738980493, 0.8384246059529867, 0.7484841480224713, 0.6810484555659513, 0.6290365577373598, 0.5879352373487925, 0.5547692295660043, 0.527517470806657, 0.5047699223736265, 0.48551907999058563, 0.4690294895315573, 0.4547538515655457, 0.44227774917391804, 0.4312824104528732, 0.42151910889306266, 0.41279123236337156, 0.4049415080232977]
    five2=[0.39784275650940676, 0.391391102575833, 0.38550092305516603, 0.38010103896549396, 0.3751318151511293, 0.3705429240102225, 0.3662916060609127, 0.36234130457216884, 0.35866058209273716, 0.35522225684548914, 0.3520027060240139, 0.34898130214052947, 0.34613995228174244, 0.3434627199770873, 0.34093551205988426, 0.33854581965663455, 0.33628250006434146]
    append!(five1, five2)

    six1=[202.93118839888297, 198.52498068098316, 191.8839435324265, 182.2968953868581, 164.14516641060158, 143.76857819990352, 147.436104726319, 99.7493006787602, 49.33166820085363, 23.153159992255475, 11.290871630511026, 6.0155173730243305, 3.565110418211789, 2.3405474362407093, 1.6781139077180045, 1.292010845718345, 1.0515408176862933, 0.8929216850642712, 0.7830266350664472, 0.7036416578893063, 0.6442269586562057, 0.5983996700115921, 0.562135088399716, 0.5328028764131822, 0.5086283854052687, 0.48837988151410583, 0.47118056589732843, 0.456392028407889, 0.4435399132753701, 0.43226527512154556, 0.4222919987416476, 0.4134045074752269, 0.40543220078375997]
    six2=[0.3982384126258975, 0.3917124257456623, 0.38576362917096785, 0.3803171667567351, 0.37531066580894384, 0.3706917411645958, 0.36641607247882235, 0.36244591154726036, 0.3587489019680383, 0.3552971485596563, 0.3520664722511889, 0.3490358065873225, 0.34618671209011875, 0.3435029768875957, 0.3409702859662399, 0.338575953294625, 0.3363086915531317]
    append!(six1, six2)
    num=15
    num2=16
    num3=17

    pow=1
    powy=1;

    alpha=0


    factor=1;

    xmin=0
    xmax=1;
    ymax=2;
    ymin=0

    println("h num: ", hs[num]);
    println("h num2: ", hs[num2]);
    println("h num3: ", hs[num3]);

    orders=[2, 3, 4, 5, 6]
    orders=(1 ./(((orders.+alpha).^pow).*factor));
    #orders=log.(orders);
    graph=[two1[num], three1[num], four1[num], five1[num], six1[num]]
    graph2=[two1[num2], three1[num2], four1[num2], five1[num2], six1[num2]]
    graph3=[two1[num3], three1[num3], four1[num3], five1[num3], six1[num3]]

    graph=(1 ./(graph.^powy));
    graph2=(1 ./(graph2.^powy));
    graph3=(1 ./(graph3.^powy));
    #=
    graph=log.(graph);
    graph2=log.(graph2);
    graph3=log.(graph3);
    =#
    println(graph);
    println(orders);
    display(plot(orders, graph, title="J2=0.64, alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    display(plot!(orders, graph2, label="h: "*string(hs[num2]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    display(plot!(orders, graph3, label="h: "*string(hs[num3]), xlims=(xmin,xmax), ylims=(ymin,ymax)));

    fitting(orders, graph);

end


function phaseDiagram()

    hc=[1.506, 1.396, 1.204, 1.012, 0.772, 0.532]
    j2=[0, 0.1, 0.28, 0.46, 0.64, 0.82]

    println(hc)
    println(j2)

    display(plot(j2, hc, ylims=(0,2), title="hc vs. J2/J1"));
end


function fitting(xdata, ydata)
#=
    model(t, p)=(p[1]*((t)).^(p[2])).+p[3];

    p0=[0.5, 0.5, 0.5];

    fit = curve_fit(model, xdata, ydata, p0);

    f(x)=fit[1,1]*x^(fit[1, 2])+fit[1, 3];
    plot!(f);

    println("fit: ", fit);
    =#
end








function spiGraphj20ratiotest()
    hs= [0.1, 0.11900000000000001, 0.138, 0.157, 0.176, 0.19499999999999998, 0.21399999999999997, 0.23299999999999996, 0.25199999999999995, 0.27099999999999996, 0.29, 0.309, 0.328, 0.34700000000000003, 0.36600000000000005, 0.38500000000000006, 0.4040000000000001, 0.4230000000000001, 0.4420000000000001, 0.46100000000000013, 0.48000000000000015, 0.49900000000000017, 0.5180000000000001, 0.5370000000000001, 0.5560000000000002, 0.5750000000000002, 0.5940000000000002, 0.6130000000000002, 0.6320000000000002, 0.6510000000000002, 0.6700000000000003, 0.6890000000000003]
    hs2=[0.7080000000000003, 0.7270000000000003, 0.7460000000000003, 0.7650000000000003, 0.7840000000000004, 0.8030000000000004, 0.8220000000000004, 0.8410000000000004, 0.8600000000000004, 0.8790000000000004, 0.8980000000000005, 0.9170000000000005, 0.9360000000000005, 0.9550000000000005, 0.9740000000000005, 0.9930000000000005, 1.0120000000000005, 1.0310000000000004, 1.0500000000000003, 1.0690000000000002, 1.088, 1.107, 1.126, 1.1449999999999998, 1.1639999999999997, 1.1829999999999996, 1.2019999999999995, 1.2209999999999994, 1.2399999999999993, 1.2589999999999992, 1.2779999999999991, 1.296999999999999, 1.315999999999999]
    hs3=[1.3349999999999989, 1.3539999999999988, 1.3729999999999987, 1.3919999999999986, 1.4109999999999985, 1.4299999999999984, 1.4489999999999983, 1.4679999999999982, 1.486999999999998, 1.505999999999998, 1.524999999999998, 1.5439999999999978, 1.5629999999999977, 1.5819999999999976, 1.6009999999999975, 1.6199999999999974, 1.6389999999999973, 1.6579999999999973, 1.6769999999999972, 1.695999999999997, 1.714999999999997, 1.7339999999999969, 1.7529999999999968, 1.7719999999999967, 1.7909999999999966, 1.8099999999999965, 1.8289999999999964, 1.8479999999999963, 1.8669999999999962, 1.8859999999999961, 1.904999999999996, 1.923999999999996]
    hs4=[1.9429999999999958, 1.9619999999999957, 1.9809999999999957, 1.9999999999999956]
    append!(hs, hs2)
    append!(hs, hs3)
    append!(hs, hs4)

    one1=[6.202816975177942, 6.184057112426146, 6.162636693626153, 6.138770142178888, 6.112642575391581, 6.08437877281127, 6.054007049586271, 6.02141957345656, 5.986331785461012, 5.94824484607455, 5.906416269632771, 5.859844889968942, 5.807276720931005, 5.747237825687848, 5.678098721518311, 5.598171956747259, 5.505840296444016, 5.39970766771382, 5.278759209336828, 5.142511472036093, 4.991130534579324, 4.82549626642771, 4.6471964741425875, 4.458445192603113, 4.261932972661416, 4.060630055604741, 3.8575718253243254, 3.65565730318514, 3.4574856963579212, 3.265245583374008, 3.080659832692638, 2.9049799626616792, 2.739018048835419]
    one2=[2.5832025563914365, 2.437645650521273, 2.302212293172941, 2.1765846197936254, 2.0603179567443095, 1.9528870427502136, 1.8537224992524606, 1.7622384564762525, 1.6778526436000094, 1.6000003489096941, 1.5281435755973594, 1.4617765510051575, 1.4004285496269475, 1.3436647966683832, 1.2910860463707634, 1.2423272840729704, 1.1970558836224447, 1.1549694596935414, 1.1157935840593276, 1.0792794819054081, 1.0452017851939532, 1.013356391722613, 0.9835584582833068, 0.955640542157306, 0.9294508954796492, 0.904851910556834, 0.8817187101028567, 0.8599378738961521, 0.839406292046942, 0.8200301345415966, 0.8017239267307805, 0.7844097207690286, 0.7680163535563348]
    one3=[0.7524787823925119, 0.7377374902628224, 0.7237379533927151, 0.7104301644078326, 0.6977682051009761, 0.6857098634254406, 0.6742162899072284, 0.6632516891847523, 0.6527830428583519, 0.6427798602520898, 0.6332139540705692, 0.6240592382708867, 0.6152915457703217, 0.6068884638778733, 0.5988291855749972, 0.5910943749801048, 0.5836660455173448, 0.5765274494755981, 0.5696629777875719, 0.5630580689894644, 0.5566991264331862, 0.5505734429266622, 0.54466913206431, 0.5389750655912141, 0.5334808162124478, 0.5281766053227905, 0.5230532551859317, 0.5181021451424155, 0.513315171467881, 0.5086847105425673, 0.5042035850275695, 0.4998650327732225, 0.49566267821365106]
    one4=[0.4915905060243665, 0.48764283684299836]
    append!(one1, one2)
    append!(one1, one3)
    append!(one1, one4)

    two1=[15.132437547359022, 15.082814764622682, 15.024137956549437, 14.956294667782817, 14.87923927692668, 14.793029527507933, 14.69786338423432, 14.594111386184627, 14.482338080276378, 14.363304573410629, 14.237942956792047, 14.107292678773854, 13.972389394683416, 13.834099138299635, 13.692895774810395, 13.548588622661406, 13.400020625265586, 13.24477535803647, 13.078951456941413, 12.89708087165562, 12.692274538455294, 12.456665416609685, 12.182175667126371, 11.861560857453172, 11.489591801091539, 11.06415208916961, 10.586994040873545, 10.063938225760523, 9.504424946491518, 8.920494452052857, 8.325422706393677, 7.732311849774719, 7.152906624474557]
    two2=[6.59680446452696, 6.071099843421501, 5.580401298425956, 5.127106082275854, 4.711810333358017, 4.333755151005257, 3.99124243752078, 3.6819858379205836, 3.403385555718274, 3.1527303325966725, 2.9273371144155087, 2.7246412556635713, 2.5422496365137137, 2.3779672806451426, 2.2298058900205433, 2.0959806442553215, 1.974899858030104, 1.8651507029864565, 1.7654831553659283, 1.674793571162097, 1.592108754986292, 1.516571021205285, 1.4474245003498147, 1.3840027847024063, 1.3257179076837056, 1.2720505931171304, 1.2225416788167385, 1.1767846048377295, 1.1344188535975648, 1.0951242325234762, 1.0586158970630462, 1.024640020827892, 0.992970029291791]
    two3=[0.9634033229158414, 0.9357584245891717, 0.9098724945384451, 0.8855991632813154, 0.862806639819345, 0.8413760580855527, 0.8212000297110844, 0.802181375608718, 0.784232012651322, 0.7672719750286994, 0.7512285526708502, 0.7360355315657865, 0.7216325228826216, 0.7079643695861175, 0.6949806207811215, 0.6826350653284052, 0.6708853174105409, 0.6596924476983923, 0.6490206545995036, 0.6388369707992527, 0.6291110009119287, 0.6198146866042096, 0.6109220960154311, 0.6024092346849176, 0.5942538755649025, 5864354059700887, 0.5789346896049608, 0.5717339420054313, 0.5648166179555509, 0.5581673095898806, 0.5517716540586606, 0.5456162497505573]
    two4=[0.5396885801912286, 0.5339769448308683, 0.5284703960244739]
    append!(two1, two2)
    append!(two1, two3)
    append!(two1, two4)

    three1=[37.46244942585591, 37.34135489467273, 37.19823541112166, 37.03269052829444, 36.8443395860838, 36.63286942116284, 36.398096797284076, 36.14004670636502, 35.859045654972775, 35.55582577382329, 35.231630956957865, 34.88831029466343, 34.52837704674879, 34.15500373322361, 33.77191626343802, 33.38314341834665, 32.99257419366151, 32.6032775681565, 32.21655245738153, 31.830708276840618, 31.439640019934345, 31.0313675765326, 30.58686024289313, 30.079641907907423, 29.47680140912862, 28.74199042757269, 27.840629345267875, 26.746793755785415, 25.450289247509907, 23.961711842576328, 22.313423472746585, 20.55559424713669, 18.748309084858107]
    three2=[16.952199911285724, 15.220331462758775, 13.59313720262136, 12.096786557811214, 10.744256004411609, 9.537929511298174, 8.472661600319231, 7.538600353512164, 6.723439832359834, 6.0140352700987645, 5.397456200864332, 4.861604504052276, 4.39552492037842, 3.989513938928507, 3.635106006999848, 3.3249917187199043, 3.052903628118812, 2.8134916590042174, 2.6022008101067153, 2.415157854170771, 2.2490700136397894, 2.101136401631973, 1.9689717997565808, 1.8505417331694667, 1.7441075545956024, 1.6481802071747793, 1.5614814050532617, 1.4829110918027257, 1.4115201767982746, 1.3464876896214237, 1.2871016222317428, 1.2327428449186142, 1.1828715825617842]
    three3=[1.1370160236901754, 1.0947627074625856, 1.05574839404028, 1.0196531745703374, 0.9861946185105213, 0.9551227906833377, 0.9262159989811343, 0.899277156961738, 0.8741306652941221, 0.8506197316229078, 0.8286040620191861, 0.8079578678909283, 0.7885681413077833, 0.770333159351068, 0.7531611841198724, 0.7369693305014127, 0.7216825777655835, 0.7072329051380986, 0.6935585340880923, 0.6806032629370968, 0.6683158813409613, 0.6566496540609761, 0.6455618650680339, 0.6350134140500684, 0.6249684587774915, 0.6153940974806493, 0.6062600863391745, 0.5975385877324786, 0.589203945562957, 0.5812324844069511, 0.5736023296994852, 0.5662932464851854]
    three4=[0.5592864945936185, 0.5525646984438782, 0.5461117297193112]
    append!(three1, three2)
    append!(three1, three3)
    append!(three1, three4)

    four1=[61.299369720631404, 61.11132305218615, 60.89002762703122, 60.6349334338012, 60.34520834108214, 60.01966956387332, 59.6567376109512, 59.25443550871872, 58.810460702135224, 58.322359880843436, 57.78783669502654, 57.20521716139472, 56.574085040656755, 55.896076484275135, 55.175786029528226, 54.42168100192161, 53.646846825729675, 52.8692952404681, 52.111474884218744, 51.398559376009764, 50.75510243896935, 50.19981078955323, 49.738563205467294, 49.35643676055754, 49.01034676346622, 48.624787721428675, 48.09372000633152, 47.29133600436869, 46.092641327193675, 44.40119840155862, 42.17678307909671, 39.452604883605446, 36.33346912644235]
    four2=[32.97382280951305, 29.544065175932843, 26.198227275684488, 23.053147574763784, 20.181910416080406, 17.618163960523848, 15.365768233669824, 13.409218761767105, 11.72236122991131, 10.274634196739227, 9.035037851244336, 7.974376886711268, 7.066339699067908, 6.287860716073151, 5.619077515535111, 5.043082439677253, 4.545588499219873, 4.114577024136059, 3.7399622091408156, 3.4132886818159087, 3.127467527647555, 2.876550531055105, 2.655539633086968, 2.460227494967256, 2.287064829918222, 2.133050387139952, 1.9956398945172116, 1.8726707534541849, 1.7622997578269173, 1.6629515521774412, 1.5732759280132815, 1.4921123901802016, 1.418460703731117]
    four3=[1.3514563630273557, 1.2903501166414975, 1.2344908387519837, 1.1833111665652913, 1.1363154274763616, 1.09306946664789, 1.0531920538534463, 1.0163476071523974, 0.9822400153989617, 0.9506073814960565, 0.9212175372920384, 0.8938642083951336, 0.8683637261090497, 0.8445522020944025, 0.8222830950680338, 0.8014251099380236, 0.7818603802159039, 0.7634828917298591, 0.7461971130135736, 0.7299168021059261, 0.7145639656403162, 0.7000679481929601, 0.6863646345632537, 0.6733957491551129, 0.6611082398361332, 0.6494537347438338, 0.6383880627593637, 0.6278708293088189, 0.6178650404520123, 0.6083367692846512, 0.5992548591004563, 0.590590659318376]
    four4=[0.5823177896849583, 0.574411929699374, 0.5668506302698921]
    append!(four1, four2)
    append!(four1, four3)
    append!(four1, four4)

    five1=[113.4342344531655, 113.09377268360353, 112.6936649095239, 112.23383696153365, 111.71431024205717, 111.13516778920032, 110.49644054878078, 109.79788377458294, 109.03862370466469, 108.21667490046221, 107.3283618467567, 106.36772373769475, 105.3260365569548, 104.19164763323477, 102.95037759200831, 101.58679261585641, 100.08666809130722, 98.44092183772217, 96.65113712905966, 94.73643916147805, 92.74082955651323, 90.7390441581755, 88.8376464932952, 87.16680813183427, 85.85801187986345, 85.00524236889004, 84.61354186086507, 84.54897535957853, 84.51434273758177, 84.07736046733031, 82.76358966025884, 80.1939888335539, 76.21218450814467]
    five2=[70.93813727442635, 64.7202145603532, 58.01595094920776, 51.26597749038743, 44.812114254135864, 38.87177022311022, 33.551837767573375, 28.878758586987576, 24.82863427521636, 21.35050632802408, 18.38189480075038, 15.858148184792116, 13.717574219614482, 11.90394577048377, 10.367466534620252, 9.064873435124527, 7.959080406462398, 7.018601145027553, 6.216888909886237, 5.531672233135572, 4.94432964552971, 4.439324701940089, 4.00370931091483, 3.62669550556492, 3.299291402820228, 3.013994924405888, 2.764538066937226, 2.5456745499285773, 2.353004152859902, 2.1828277753653103, 2.0320280151241685, 1.8979708395514923]
    five3=[1.778424616811296, 1.671493404735153, 1.5755619271805208, 1.4892501314047608, 1.4113755905662762, 1.3409223419902183, 1.2770150033907917, 1.2188972280060058, 1.1659137278907479, 1.1174952394886493, 1.073145919049167, 1.0324327504827906, 0.9949766189574969, 0.9604447724807933, 0.9285444381947141, 0.8990174038693397, 0.8716354060142284, 0.8461961968345764, 0.8225201801135968, 0.8004475283362389, 0.779835704563079, 0.7605573306413902, 0.7424983447825328, 0.7255564089617583, 0.7096395286512119, 0.6946648521326697, 0.6805576272203522, 0.6672502888049363, 0.6546816627131651, 0.6427962675212149, 0.6315437028773393, 0.6208781097166609, 0.6107576969384846]
    five4=[0.6011443217695305, 0.5920031195669361, 0.5833021768949693]
    append!(five1, five2)
    append!(five1, five3)
    append!(five1, five4)

    six1=[204.79667658888872, 204.1891966344607, 203.47419707153205, 202.650656984215, 201.71747942639246, 200.6736229151165, 199.51831360266792, 198.251325600238, 196.87328503796942, 195.38589520681558, 193.7919238833581, 192.09474552350545, 190.29721195482256, 188.39966609032172, 186.39702937741936, 184.27510960649715, 182.00659310637428, 179.54761053581527, 176.83629543027678, 173.79538202195067, 170.34154833157118, 166.40464956540382, 161.9595253851985, 157.07032940945652, 151.94033799586384, 146.94759733512836, 142.63116013815943, 139.58536604294247, 138.24161490649735, 138.585316583708, 139.95008695827315, 141.0707645886218, 140.4683480481089]
    six2=[137.00804622355554, 130.31196823892284, 120.80060323624917, 109.40537137415464, 97.18084264614329, 85.02044755804036, 73.54047957434844, 63.08966283380222, 53.814038100237184, 45.72776033555408, 38.76882116571616, 32.8365965491447, 27.81504095567384, 23.58626801049467, 20.03814253747525, 17.06822578730859, 14.585496066588647, 12.510708986069803, 10.77594126348509, 9.32367416616489, 8.105654491331585, 7.081690113881603, 6.218479232548899, 5.488530707829128, 4.869203605176274, 4.341874613501064, 3.8912299310709737, 3.5046714620398074, 3.171824080109692, 2.8841298607634887, 2.6345157803231127, 2.4171225804988214, 2.2270840751967937]
    six3=[2.06034773208696, 1.913528884384148, 1.783792205776888, 1.6687552915665917, 1.5664100981741051, 1.4750588442920645, 1.3932615862123523, 1.3197932702093942, 1.253608444943115, 1.193812213922761, 1.1396362465500265, 1.090418923340227, 1.0455888581594501, 1.0046511822250497, 0.9671760931993145, 0.9327892846890757, 0.901163895078398, 0.8720137556735787, 0.8450876745791297, 0.8201646154557989, 0.7970495993072767, 0.7755702223742598, 0.7555736891334801, 0.7369242731561337, 0.7195011466495981, 0.7031965091451613, 0.6879139834257558, 0.6735672266290174, 0.6600787315253469, 0.6473787877546915, 0.6354045766910383, 0.6240993849956937, 0.6134119221800753]
    six4=[0.6032957163062395, 0.593708590839158]
    append!(six1, six2)
    append!(six1, six3)
    append!(six1, six4)
    orders=[2, 3, 4, 5]
    nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 72:77, hs, 0)
end





function spiGraphj201ratiotest()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.197942665169929, 6.140544056246748, 6.066950313259829, 5.977207232495399, 5.862553344455499, 5.701519120201553, 5.462767460708139, 5.118842011212381, 4.666471657286065, 4.137728354685894, 3.5883726898921156, 3.071603560721001, 2.619625199238342, 2.2423089887392154, 1.9352663460817403, 1.6880856260217745, 1.4893563534653476, 1.3288893434679796, 1.1983518681967933, 1.0912064675956743, 1.002419190951601, 0.9281385673573219, 0.8654163459748796, 0.8119856367580807, 0.7660918260520797, 0.7263661596865505, 0.691731931182084, 0.661334929538312, 0.6344917229406906, 0.6106510054703955, 0.5893645195703152, 0.5702650239813782, 0.5530494735092173]
    one2=[0.5374660789418316, 0.5233042758618465, 0.5103868900368949, 0.4985639736726445, 0.4877079219133791, 0.4777095773319793, 0.46847510220968547, 0.45992345153740194, 0.4519843191119694, 0.4445964585761007, 0.43770630342506645, 0.4312668267950276, 0.42523659464700764, 0.4195789757754983, 0.4142614796455378, 0.4092551989402684, 0.40453433829199625]
    append!(one1, one2)
    two1=[15.119306290172577, 14.959606044872482, 14.733850342096721, 14.445425955284481, 14.1069957065259, 13.737177000938487, 13.341537761123323, 12.877096610519823, 12.227740912256115, 11.249383673571227, 9.898372299841235, 8.3173677779005, 6.750706753628236, 5.386340958001505, 4.29298721873056, 3.454928981032332, 2.8238440095418147, 2.3492902194414125, 1.9897073916279204, 1.713902466829364, 1.4993536230555424, 1.3300114433829944, 1.1944388695013002, 1.0844297109139978, 0.9940346979939216, 0.9188886901265787, 0.8557482352527248, 0.8021727445282891, 0.7563030534613282, 0.7167061256560112, 0.6822649566964214, 0.6520996359214926, 0.6255101024488887]
    two2=[0.6019341677253239, 0.580916398285918, 0.5620848077735192, 0.5451332237827068, 0.5298078207710797, 0.5158967416109144, 0.5032220306512741, 0.49163331235384516, 0.4810027994787182, 0.47122132230225616, 0.46219514804873507, 0.45384341648280613, 0.44609605933875734, 0.4388921022581861, 0.43217827107315504, 0.42590784172740537, 0.42003968638527145]
    append!(two1, two2)
    three1=[37.43058602858524, 37.04156223882713, 36.48896241184776, 35.76870354029141, 34.89194381730792, 33.89848992296207, 32.85765322840743, 31.823827082272096, 30.70990769951097, 29.11726580089178, 26.39660773065571, 22.265636267472537, 17.391866912867457, 12.87305285426763, 9.333993567960938, 6.806739409280425, 5.0676996559453285, 3.8765205048619498, 3.0506916553084835, 2.4668376245944494, 2.0447909689844117, 1.7328048946091308, 1.4971915315098965, 1.3156774376419038, 1.1732629873582463, 1.0596511692866677, 0.9676378867621993, 0.8920903090177441, 0.8292878619946822, 0.7764898121499542, 0.7316466331822264, 0.6932041050178417, 0.6599682058810816]
    three2=[0.6310105022528273, 0.6056009367866853, 0.5831594274647425, 0.5632205649849643, 0.545407552527666, 0.5294127496793195, 0.5149829917551388, 0.5019084011508546, 0.4900137794215162, 0.4791519258327404, 0.4691984076325798, 0.46004743412907045, 0.4516085772491408, 0.4438041463243688, 0.43656707256432675, 0.4298391933576593, 0.4235698524225261]
    append!(three1, three2)
    four1=[61.25004747344293, 60.649493182005976, 59.7990986611473, 58.666678922049364, 57.205980333016335, 55.39736117784665, 53.34256105098841, 51.36513989342059, 49.91133633069682, 48.948721493691586, 47.105942295007594, 42.165570775322536, 33.82133856774975, 24.669826074043552, 17.16520696362557, 11.882022026188272, 8.376523464958098, 6.074511650393814, 4.54501899016637, 3.507451947562815, 2.786506332255507, 2.2731561821596413, 1.8988750550270104, 1.6198486886888268, 1.407503510542383, 1.2428181647782173, 1.1128699620278477, 1.0087056490656654, 0.9240055384231693, 0.8542300064724846, 0.7960641899825085, 0.7470502398765606, 0.7053396011022586]
    four2=[0.6695234121549217, 0.6385145883034837, 0.6114646370069128, 0.5877041652996854, 0.5666997779340603, 0.5480224685692938, 0.5313241723868575, 0.5163201845107257, 0.5027758418070569, 0.49049633755363314, 0.4793188609339706, 0.4691064790578784, 0.45974333619129887, 0.45113085824048815, 0.44318472975310735, 0.43583247011404125, 0.4290114768582166]
    append!(four1, four2)
    five1=[113.34485511673287, 112.26015990225848, 110.7480911503994, 108.80299999183651, 106.38447278596934, 103.35055577439348, 99.43665675404807, 94.49230798516965, 89.17553023754203, 85.51746970781372, 84.89281393181591, 82.9880002748939, 72.44293035421481, 54.815847062811656, 37.84097881655177, 25.252211173591206, 16.85161548989577, 11.443751736168698, 7.982369933099735, 5.745459817134106, 4.2732686942289995, 3.2820768515928114, 2.5981282730086686, 2.1143710618329488, 1.7639306423463774, 1.5042701694699196, 1.3077873655862826, 1.1561995725142025, 1.0371490994310721, 0.9421180741036248, 0.865124986556151, 0.8018949859101654, 0.7493221224828761]
    five2=[0.7051146219770056, 0.6675568976798203, 0.6353472811956213, 0.6074856686582194, 0.5831945887686889, 0.5618629852413026, 0.543005652748732, 0.526233609237325, 0.5112322050868625, 0.497744770151847, 0.485560273700704, 0.4745039202454745, 0.46442991653045246, 0.45521586156120775, 0.4467583582291366, 0.4389695531343809, 0.4317743903281147]
    append!(five1, five2)

    six1=[204.63713138377125, 202.6969539129891, 199.97064417052297, 196.4399846218905, 192.1239127617626, 187.0622914575711, 181.09798622173682, 173.43520208687823, 162.6545366677076, 149.0474893784805, 139.3230128561055, 140.6196691855898, 138.62824507052483, 115.81675224038398, 82.98923588521374, 54.9041813865568, 35.2538239437121, 22.576785597692137, 14.675226994999596, 9.797442835009413, 6.765154632891594, 4.84612618925474, 3.6020388027617405, 2.773508474144308, 2.2063027086687677, 1.8073894455536434, 1.519550075710339, 1.306816366665644, 1.1460626672226468, 1.0220846859567687, 0.9246680413224861, 0.8468080352164313, 0.7836068351296683]
    six2=[0.7315766963622619, 0.6881911734290278, 0.6515906932996574, 0.6203859525832096, 0.5935244342299693, 0.57019833479643, 0.5497800997421118, 0.5317766469811758, 0.515796427038065, 0.501525425561435, 0.48870946610263377, 0.4771410123263294, 0.4666492323750237, 0.45709242817755374, 0.44835222769276073, 0.4403290720612215, 0.4329387033389642]
    append!(six1, six2);
        orders=[2, 3, 4, 5]
        nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 27:32, hs, 0.1)

end






function spiGraphj2028ratiotest()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.187155500471157, 6.119167060550142, 6.032007947659109, 5.918951065918273, 5.752702069398991, 5.4854595000158, 5.073274842932856, 4.5174293235768666, 3.8816843302679445, 3.25661183561236, 2.7081434002575966, 2.2600918041096456, 1.9073153638699076, 1.6332768542825689, 1.4203216796083549, 1.2535329380068236, 1.121403887436972, 1.0153866604822226, 0.9292128548924707, 0.8582875273733697, 0.7992219381571336, 0.7494934250192427, 0.7072034837315225, 0.6709068788507473, 0.6394907431915329, 0.6120885228168033, 0.5880182023380909, 0.5667375267932173, 0.5478112092866088, 0.5308866659453043, 0.5156758760838591, 0.5019416857507774, 0.48948736657893077]
    one2=[0.47814858277758593, 0.4677871564485917, 0.4582861881114621, 0.44954620747589924, 0.4414821140025489, 0.4340207277784299, 0.42709881562752106, 0.4206614899769747, 0.41466090213061946, 0.4090551696112789, 0.4038074907744389, 0.39888541015475787, 0.39426020583184684, 0.38990637611300716, 0.3858012074771498, 0.3819244093386197, 0.37825780401852016]
    append!(one1, one2)

    two1=[15.08891027670218, 14.888903632051973, 14.60433084402858, 14.245084206860776, 13.836336721216531, 13.392495608171807, 12.85051910425864, 12.022068382486069, 10.709779901411771, 8.964642349669344, 7.118905634528686, 5.500758626968015, 4.240466946983711, 3.314622474076801, 2.6473516409532696, 2.1650959101704603, 1.8118048178904875, 1.54828296400929, 1.3479014414578425, 1.1926324571275684, 1.070168295840693, 0.9719887183658753, 0.892099172899487, 0.8262106452738074, 0.7712032150101316, 0.724771114517461, 0.6851845779005339, 0.6511276477623666, 0.6215860356898126, 0.5957684359547274, 0.573050521685905, 0.552934540696535, 0.5350197887889085]
    two2=[0.5189807688591566, 0.5045508495815788, 0.4915099067656023, 0.4796748817807054, 0.4688924996191788, 0.45903360212810373, 0.4499887008603265, 0.44166445921977826, 0.4339808887999935, 0.42686909905829457, 0.4202694789997614, 0.4141302186159377, 0.4084060993625994, 0.40305749908781763, 0.39804956895713045, 0.39335154914943804, 0.38893619714174343]
    append!(two1, two2)

    three1=[37.35720192013909, 36.871763934264884, 36.17364727269255, 35.261766277687485, 34.17630002464164, 33.013542922711025, 31.85470151608152, 30.51025460597659, 28.213148825960882, 24.06645721136229, 18.476402180050247, 13.096789337663049, 9.018284485877004, 6.2788935018206855, 4.510489015770908, 3.364994799525983, 2.6061533159270382, 2.0885682050821486, 1.7247062616119524, 1.461435006385737, 1.2658356406967943, 1.1169978784283425, 1.0012915655331285, 0.9096059080405965, 0.8357048239601668, 0.7752247426919815, 0.7250496132283784, 0.6829122589478773, 0.6471345787829259, 0.6164547701095774, 0.589910225705633, 0.5667567488459498, 0.5464118977233299]
    three2=[0.5284146383671982, 0.5123961986130293, 0.4980587316357154, 0.48515950146883646, 0.4734990248587425, 0.46291208271102857, 0.45326083729896327, 0.44442951142257736, 0.43632023822124333, 0.4288497966217452, 0.42194702318341193, 0.415550744685808, 0.40960811507575745, 0.404073268749065, 0.3989062230487333, 0.39407197857342313, 0.38953977739591605]
    append!(three1, three2)
    four1=[61.13719908137158, 60.39180534682765, 59.31237139932223, 57.82881430855295, 55.879405779224044, 53.568317812979146, 51.3788043630319, 49.96206411110009, 48.77392324156244, 44.81967745074975, 35.911406756065986, 25.121810798141695, 16.47739442323969, 10.800354327650332, 7.296831358317693, 5.134098130295866, 3.766777893196651, 2.874655646751584, 2.273135424296011, 1.8545159299879002, 1.5544924973610201, 1.3336245406909737, 1.1670447113196443, 1.0386472411818608, 0.9377319593410951, 0.8570188926735792, 0.7914446518272042, 0.7374151802484752, 0.6923311564143368, 0.6542800140405637, 0.621832011456656, 0.5939026252315583, 0.5696580469703854]
    four2=[0.5484492075460665, 0.529765005810681, 0.5131986751614432, 0.49842327211020654, 0.4851735895088565, 0.4732326537049759, 0.46242153276752607, 0.4525915655784061, 0.4436183786613047, 0.4353972382754871, 0.42783940854312563, 0.42086927509391603, 0.4144220559777311, 0.40844196684356937, 0.40288074042715644, 0.39769642402257455, 0.3928523969505112]
    append!(four1, four2)

    five1=[113.14040338910615, 111.79967454495633, 109.91427186316861, 107.44387158615487, 104.21995254676636, 99.85287502001634, 94.10128720651737, 88.24333438014824, 85.64368358831376, 85.25102748550538, 76.00987630182652, 55.895086629376266, 36.329195971973114, 22.767371308672924, 14.391771163612104, 9.36802679689788, 6.341857776428103, 4.481094152551036, 3.303465336282383, 2.5338489650317166, 2.014311406376416, 1.6525219949173722, 1.3931806216259686, 1.2022747333977484, 1.0583149068858202, 0.9473648989018356, 0.8601600881381961, 0.790396794354852, 0.7336923142394971, 0.6869379282471936, 0.6478873918628634, 0.6148896672386911, 0.5867118885257026]
    five2=[0.5624199083011134, 0.5412962949863619, 0.5227831195892243, 0.5064414322277692, 0.4919221509684695, 0.47894486864847974, 0.46728223369047894, 0.4567483030726993, 0.4471897621891182, 0.43847923771084013, 0.43051015504586454, 0.4231927478574138, 0.41645093441120384, 0.4102198521343937, 0.40444389884696125, 0.3990751619780858, 0.3940721536398889]
    append!(five1, five2)

    six1=[204.27159453471836, 201.86533032446204, 198.4445166141784, 193.98301890120172, 188.51908280585633, 181.87899218994716, 172.86089882527523, 159.36079669812156, 144.10578858892086, 140.4259466909474, 141.97099032402198, 118.14735487554555, 80.09280604833127, 49.386661572160556, 29.640468735369062, 17.914041623905604, 11.139432079625916, 7.220816555401745, 4.9085821816026485, 3.5019561389287865, 2.6156773844668537, 2.0367995295691452, 1.6453106110068234, 1.3717703184645909, 1.1748164378315598, 1.029076286190343, 0.9185345193246764, 0.8328041290288148, 0.7649748301963324, 0.7103391237647765, 0.6656188934257696, 0.6284845251362798, 0.5972490725796865]
    six2=[0.5706695834352961, 0.547815438075737, 0.5279794534930736, 0.5106168196483307, 0.4953024506661819, 0.4817007456746957, 0.46954384525155335, 0.4586157751148107, 0.4487407487479838, 0.43977442781467085, 0.4315973221682042, 0.4241097558088029, 0.41722798707004893, 0.4108811902249099, 0.4050090900359059, 0.39956008946158555, 0.3944897774736611]
    append!(six1, six2)


    orders=[2, 3, 4, 5]
    nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 22:27, hs, 0.28)

end






function spiGraphj2046ratiotest()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.173024273900171, 6.091851437635466, 5.982894427573821, 5.810552270322668, 5.493362636174375, 4.955030329457227, 4.224198997165336, 3.4451139406380342, 2.7581472229986095, 2.218173035564729, 1.8154775003126358, 1.5192393287622028, 1.299890302208552, 1.1349330312834034, 1.0085409848678175, 0.9098390928453866, 0.8313545336923933, 0.7678979129231069, 0.7158107767577429, 0.672470540004624, 0.6359652088719532, 0.604877902260269, 0.5781422874838003, 0.5549441649558389, 0.5346534423649003, 0.5167763979132396, 0.5009216867010025, 0.486775792324996, 0.4740850625547059, 0.4626423977129538, 0.4522772700359417, 0.44284815741420774, 0.4342367477189263]
    one2=[0.42634345599899426, 0.41908392534919287, 0.4123862720694923, 0.4061888992321707, 0.40043874814743424, 0.39508988998072103, 0.3901023836640801, 0.38544134382444184, 0.3810761755068464, 0.3769799422458335, 0.37312884141729347, 0.36950176641506494, 0.36607993949683454, 0.36284660246110817, 0.35978675489245826, 0.3568869317269034, 0.35413501347036186]
    append!(one1, one2)

    two1=[15.04464998679926, 14.781847885652372, 14.40665147068444, 13.94934293075778, 13.438474583781137, 12.755005190997, 11.545152871934858, 9.612780876025624, 7.372100095623583, 5.41857885724943, 3.9819682512655725, 2.9981282795887365, 2.3330684225227456, 1.87697752491242, 1.5562878044922268, 1.3244983712365157, 1.152422700375683, 1.0214936067962088, 0.9196434648882432, 0.8388390876702829, 0.7736034930454405, 0.7201163513319073, 0.6756556264485305, 0.6382434594039672, 0.6064166837597598, 0.5790749740353711, 0.5553783581694354, 0.5346767522550047, 0.5164606671367897, 0.500326166643222, 0.4859495821842624, 0.47306901245726446, 0.46147061190608174]
    two2=[0.45097830577371845, 0.4414459887598858, 0.43275154557629614, 0.4247922230938208, 0.4174810158068702, 0.41074381855123165, 0.40451716557599793, 0.398746421658016, 0.39338432458696, 0.3883898029062746, 0.3837270108496628, 0.37936453587659325, 0.37527474424672075, 0.37143323769549613, 0.36781840005587774, 0.36441101710920826, 0.3611939563655325]

    append!(two1, two2)

    three1=[37.251577231745344, 36.61673465199894, 35.68596408149432, 34.488023271207275, 33.164666193081864, 31.82952462147744, 29.921992370676342, 25.81411083170729, 19.18306160774216, 12.637974080534164, 8.050380876886418, 5.276322201215343, 3.6442895054627327, 2.66027319668678, 2.041818381412468, 1.6356140770267305, 1.357565234279036, 1.1600679604085884, 1.0151513690608356, 0.9057567453659205, 0.8211096360359669, 0.7541828619770141, 0.7002580049411831, 0.6560826377273303, 0.6193611814305724, 0.5884384480294782, 0.5620977372768674, 0.5394288948298271, 0.5197401737234464, 0.5024981577908808, 0.4872860471365313, 0.4737741954792469, 0.4616989711926337]
    three2=[0.45084736859937635, 0.4410456536269693, 0.4321508809723563, 0.424044482576599, 0.4166273690148989, 0.40981614885226214, 0.40354018313940754, 0.39773927025126665, 0.3923618110226588, 0.3873633431204177, 0.3827053618274853, 0.3783543646211315, 0.3742810720511129, 0.37045978846975497, 0.36686787440937896, 0.3634853087138276, 0.3602943233055303]
    append!(three1, three2)

    four1=[60.97703867096892, 60.007260858749866, 58.53080134929327, 56.40496780490066, 53.73043372032114, 51.35596362734265, 50.13701192121373, 47.227028786523285, 37.34904652144451, 24.175211327974502, 14.467456179493313, 8.82815069747257, 5.689842846581073, 3.8968739911142594, 2.8253492379431373, 2.1537361111905904, 1.7133878250341217, 1.4126504129582176, 1.1996855706766154, 1.0439927429928064, 0.926944792402876, 0.8367683792211011, 0.7657855453199043, 0.7088450455335236, 0.6624010075120879, 0.6239553107000442, 0.5917106193083488, 0.5643489156763777, 0.5408867901339347, 0.5205788259709981, 0.5028518056440756, 0.4872590804599583, 0.47344838793601707]
    four2=[0.4611387976641126, 0.45010395719889823, 0.44015975251321027, 0.4311551064966812, 0.42296503781155764, 0.41548536789627855, 0.40862864439361457, 0.4023209711228991, 0.3964995219247392, 0.39111057376240427, 0.38610793914310276, 0.3814517073942344, 0.3771072265222081, 0.37304427504214704, 0.36923638346668786, 0.36566027540381846, 0.36229540487233375]
    append!(four1, four2)

    five1=[112.85084044982874, 111.12784973400917, 108.64494443178485, 105.17949683442679, 100.09067983739395, 93.04674561972548, 87.28514391909582, 87.01836480440298, 78.614069135991, 54.07464333863845, 31.777553991148793, 18.223194348128725, 10.769724644791747, 6.70494399840482, 4.432371113692367, 3.109918071133987, 2.3046101709427402, 1.7915202512619959, 1.450452936087336, 1.2148310164439915, 1.0463522347553642, 0.9221491347702793, 0.8280840638120364, 0.7551296513420283, 0.6973485807943605, 0.6507291435300642, 0.6124933849534833, 0.5806742489914605, 0.5538502694302041, 0.5309750273615567, 0.5112650481996464, 0.4941245745480087, 0.4790941146892066]
    five2=[0.4658146255127176, 0.4540021682438659, 0.4434297019404475, 0.43391381810807195, 0.4253049493014644, 0.41748005135396127, 0.41033707396322183, 0.4037907355545044, 0.3977692636674844, 0.3922118568680288, 0.3870666898832837, 0.38228933345114047, 0.3778414930800817, 0.3736899941380108, 0.3698059606743638, 0.3661641451081907, 0.3627423790408611]
    append!(five1, five2)

    six1=[203.7515723871598, 200.63671268380585, 196.11198169683834, 190.1528290717398, 182.49909770948267, 170.939331984241, 152.72908832068225, 141.31238233576713, 144.84969017608557, 115.79886340667973, 70.52395596718816, 39.025137893344166, 21.35615332388735, 12.047474354138426, 7.183458440127513, 4.577680282413976, 3.120359331310552, 2.2637769996229276, 1.7345158657990691, 1.3917541679385856, 1.160052750998832, 0.9972970014377902, 0.8790124508798105, 0.7904281879150481, 0.7223125802192905, 0.6687082031267364, 0.6256565651964909, 0.5904564609406512, 0.5612194447700087, 0.5365958461116944, 0.5156014753575091, 0.4975053868480036, 0.48175554459112574]
    six2=[0.46792860516950485, 0.45569532823198633, 0.44479634467032847, 0.43502489795144467, 0.4262143678006536, 0.41822912678285007, 0.4109577453514448, 0.40430788717190214, 0.39820243014093226, 0.39257647848989446, 0.3873750550186079, 0.3825512794405324, 0.3780649450347715, 0.37388137058883725, 0.3699704886571351, 0.3663061025850658, 0.3628652842492893]
    append!(six1, six2)
    orders=[2, 3, 4, 5]
    nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 18:23, hs, 0.46)

end



function plotRatioTest(hs, five, six, j2)
    ratios=[];
    for i=1:length(six)
        push!(ratios, six[i]/five[i]);
    end
    display(plot(hs, ratios, title="order 6/order 5 result, J2="*string(j2), xaxis="h", yaxis="a_6/a_5"));
end







function spiGraphj2064ratiotest()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.15507997447002, 6.055817094912108, 5.874358313873518, 5.4391855895180505, 4.613273182813163, 3.58566078682122, 2.6859304520371214, 2.037238785126839, 1.5997304479269552, 1.3048269451374037, 1.101002868150013, 0.9555467200002079, 0.8484063708426111, 0.7671814008150875, 0.7040176469252378, 0.6537978981657954, 0.6130924136439367, 0.5795402403673582, 0.5514757697863566, 0.527697448739759, 0.5073208313959647, 0.48968291995346247, 0.4742784623276139, 0.46071662934424773, 0.44869097492267074, 0.4379582316412861, 0.4283230951886815, 0.4196271398116965, 0.4117406297168842, 0.40455639129926513, 0.3979851724521898, 0.3919520889103434, 0.3863938748168461]
    one2=[0.38125673499434215, 0.37649465214115185, 0.3720680413659918, 0.3679426723655328, 0.3640887996215651, 0.3604804555923897, 0.35709487259869266, 0.3539120070550197, 0.3509141456495724, 0.34808557756262026, 0.34541232022815765, 0.34288188875946735, 0.34048310117750835, 0.33820591315012927, 0.3360412771765906, 0.3339810221176124, 0.3320177497346233]
    append!(one1, one2)

    two1=[14.971183455851403, 14.592660018152387, 14.068782071290574, 13.446996417305943, 12.374170811307348, 10.144849282508416, 7.242412438051902, 4.869325644326995, 3.3367065670004923, 2.4064030044661693, 1.832371534089242, 1.4632130482792336, 1.2148622201435697, 1.0406699278548064, 0.9139441784818706, 0.8188060592033078, 0.7454330559495953, 0.6875239637481774, 0.6409012854599931, 0.602712772135793, 0.5709592851380052, 0.5442065165104064, 0.5214037141695411, 0.5017665962229334, 0.48469985955449346, 0.46974474445859504, 0.4565428309541345, 0.4448105781213759, 0.434321114895573, 0.42489101467179924, 0.41637055256712874, 0.4086364338821711, 0.4015863010761645]
    two2=[0.39513453760967004, 0.38920902903052923, 0.3837486386854978, 0.3787012225818871, 0.3740220550456836, 0.36967257030955225, 0.3656193491473745, 0.3618332971728948, 0.3582889741629685, 0.3549640432780211, 0.3518388160990516, 0.34889587473906425, 0.34611975633447434, 0.34349668831433633, 0.3410143652296467, 0.33866175977875124, 0.33642896211080764]
    append!(two1, two2)

    three1=[37.0805500223624, 36.16651829226216, 34.815441418610575, 33.267628384942256, 31.53920355899043, 27.276445428657187, 18.615494238951644, 10.592844976086555, 5.990100368586053, 3.6703749517134887, 2.467832221804724, 1.7991026887439956, 1.3992466042141154, 1.144254343202318, 0.9724990545251094, 0.8513756294133067, 0.7626074024317367, 0.6954106882185105, 0.6431307135494528, 0.6014964216253067, 0.5676708507665251, 0.539711858300516, 0.5162539726923892, 0.49631420131162396, 0.4791698308285893, 0.4642793965214328, 0.45123029369795764, 0.43970326592735, 0.42944784039421857, 0.4202650190399211, 0.4119948746033134, 0.40450752302099957, 0.39769645884136257]
    three2=[0.3914735701450576, 0.38576536417856255, 0.3805100772302603, 0.375655438431147, 0.3711569225327462, 0.3669763722879982, 0.3630809030051616, 0.35944202449864515, 0.35603493205474074, 0.35283792981249384, 0.3498319587594863, 0.347000207938309, 0.34432779230038146, 0.3418014843230469, 0.3394094891994561, 0.3371412556489105, 0.3349873158844945]

    append!(three1, three2)

    four1=[60.724676355257394, 59.31399035901279, 56.92418214848045, 53.67410628067966, 51.52555121633216, 49.37278963083208, 36.56554990876212, 19.93364798136293, 10.357248546575459, 5.835254349798168, 3.6336801618371743, 2.4771772113268202, 1.820708245920358, 1.421255929138966, 1.1632076204760349, 0.9878326124996749, 0.8634296037832278, 0.7719324475575662, 0.7025401451565647, 0.64851756961983, 0.6055067026853134, 0.5705943329927261, 0.5417762464632352, 0.5176379842000645, 0.4971583806864289, 0.47958509207978606, 0.4643536383485375, 0.45103348256067466, 0.4392913357255963, 0.4288656898040861, 0.4195488238669408, 0.41117387999774424, 0.4036054399727092]
    four2=[0.39673255806368585, 0.3904635437958939, 0.3847220080966185, 0.3794438339610122, 0.3745748315481316, 0.37006890565905914, 0.3658866108939074, 0.3619940026444597, 0.35836171673809064, 0.35496422620999046, 0.35177923738390754, 0.348787195647952, 0.3459708788726582, 0.3433150605968457, 0.34080622966620755, 0.3384323557984451, 0.33618269224367014]
    append!(four1, four2)

    five1=[112.40027866677214, 109.99814837506028, 106.17464057559818, 99.61134582224648, 90.63356880179782, 88.97780787942432, 78.25337375495005, 45.03163651672803, 22.3121038761398, 11.366978253834676, 6.273041927698647, 3.8087230631454165, 2.5351864804124413, 1.8275618937474396, 1.406453481186332, 1.1400715319814299, 0.9624099738980493, 0.8384246059529867, 0.7484841480224713, 0.6810484555659513, 0.6290365577373598, 0.5879352373487925, 0.5547692295660043, 0.527517470806657, 0.5047699223736265, 0.48551907999058563, 0.4690294895315573, 0.4547538515655457, 0.44227774917391804, 0.4312824104528732, 0.42151910889306266, 0.41279123236337156, 0.4049415080232977]
    five2=[0.39784275650940676, 0.391391102575833, 0.38550092305516603, 0.38010103896549396, 0.3751318151511293, 0.3705429240102225, 0.3662916060609127, 0.36234130457216884, 0.35866058209273716, 0.35522225684548914, 0.3520027060240139, 0.34898130214052947, 0.34613995228174244, 0.3434627199770873, 0.34093551205988426, 0.33854581965663455, 0.33628250006434146]
    append!(five1, five2)

    six1=[202.93118839888297, 198.52498068098316, 191.8839435324265, 182.2968953868581, 164.14516641060158, 143.76857819990352, 147.436104726319, 99.7493006787602, 49.33166820085363, 23.153159992255475, 11.290871630511026, 6.0155173730243305, 3.565110418211789, 2.3405474362407093, 1.6781139077180045, 1.292010845718345, 1.0515408176862933, 0.8929216850642712, 0.7830266350664472, 0.7036416578893063, 0.6442269586562057, 0.5983996700115921, 0.562135088399716, 0.5328028764131822, 0.5086283854052687, 0.48837988151410583, 0.47118056589732843, 0.456392028407889, 0.4435399132753701, 0.43226527512154556, 0.4222919987416476, 0.4134045074752269, 0.40543220078375997]
    six2=[0.3982384126258975, 0.3917124257456623, 0.38576362917096785, 0.3803171667567351, 0.37531066580894384, 0.3706917411645958, 0.36641607247882235, 0.36244591154726036, 0.3587489019680383, 0.3552971485596563, 0.3520664722511889, 0.3490358065873225, 0.34618671209011875, 0.3435029768875957, 0.3409702859662399, 0.338575953294625, 0.3363086915531317]
    append!(six1, six2)
    orders=[2, 3, 4, 5]
    nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 11:19, hs, 0.64)


end






function spiGraphj2082ratiotest()
    hs= [0.1, 0.14800000000000002, 0.196, 0.244, 0.292, 0.33999999999999997, 0.38799999999999996, 0.43599999999999994, 0.48399999999999993, 0.5319999999999999, 0.58, 0.628, 0.676, 0.7240000000000001, 0.7720000000000001, 0.8200000000000002, 0.8680000000000002, 0.9160000000000003, 0.9640000000000003, 1.0120000000000002, 1.0600000000000003, 1.1080000000000003, 1.1560000000000004, 1.2040000000000004, 1.2520000000000004, 1.3000000000000005, 1.3480000000000005, 1.3960000000000006, 1.4440000000000006, 1.4920000000000007, 1.5400000000000007, 1.5880000000000007]
    hs1=[1.6360000000000008, 1.6840000000000008, 1.7320000000000009, 1.780000000000001, 1.828000000000001, 1.876000000000001, 1.924000000000001, 1.972000000000001, 2.020000000000001, 2.068000000000001, 2.116000000000001, 2.164000000000001, 2.212000000000001, 2.260000000000001, 2.308000000000001, 2.356000000000001, 2.4040000000000012, 2.4520000000000013]
    append!(hs, hs1)

    one1=[6.139499044497599, 5.908464742770815, 4.936844358014182, 3.361095442694028, 2.178645390218772, 1.5162604944007148, 1.1492320921394177, 0.931923138567017, 0.7936424389098415, 0.7000060105330596, 0.6332852679036982, 0.5837306154796595, 0.5456556266370494, 0.5155698996243553, 0.4912350003552516, 0.4711603693992381, 0.4543207165295876, 0.4399906323007735, 0.42764407047497777, 0.41689118672946773, 0.4074374620886483, 0.39905654477180014, 0.39157177776840885, 0.38484336625098003, 0.37875929133857755, 0.37322876424524687, 0.36817743564261124, 0.3635438386719452, 0.35927671273200273, 0.35533296524200725, 0.35167610170205477, 0.348275003763901, 0.34510296889547076]
    one2=[0.3421369487856025, 0.33935694024406937, 0.33674549420370753, 0.334287316987942, 0.3319689442502511, 0.32977847259442566, 0.32770533730916185, 0.32574012722326107, 0.323874429634611, 0.32210069975346806, 0.32041215024428704, 0.3188026573364856, 0.31726668066588004, 0.3157991945510065, 0.3143956288380799, 0.31305181778833857, 0.3117639557546148]
    append!(one1, one2)

    two1=[14.785681185586684, 14.126097101335947, 13.067117729923705, 9.777009487896619, 5.63214154775028, 3.2227209052704, 2.0625736058622213, 1.4722069210516848, 1.1413057872616021, 0.9389287101595608, 0.8060657242662899, 0.7137659184238745, 0.6466727456127122, 0.5960776013877865, 0.5567557220349039, 0.5254199543685973, 0.4999170628888904, 0.4787870312299606, 0.4610099358765254, 0.4458545668189308, 0.4327846403107529, 0.4213988559936965, 0.41139151394176937, 0.40252599586585025, 0.3946165107773518, 0.38751527769940985, 0.38110336290082997, 0.37528402182958676, 0.36997778842767476, 0.3651188034322382, 0.3606520343821732, 0.3565311462581577, 0.35271685291581845]
    two2=[0.3491756280098426, 0.3458786876665251, 0.3428011806662245, 0.3399215386136524, 0.337220950538664, 0.33468293509709274, 0.33229298992236433, 0.330038302411671, 0.3279075097802253, 0.3258904988764219, 0.3239782382963622, 0.32216263687991475, 0.3204364238813592, 0.3187930470418658, 0.31722658551638216, 0.3157316751944923, 0.3143034443989252]
    append!(two1, two2)

    three1=[36.665946349253524, 34.98913489729257, 33.05521883480543, 26.624697295547026, 12.818301928347047, 5.39898106631926, 2.742013328771786, 1.6925916655923168, 1.2045745392349132, 0.9440461334213236, 0.7892397462041023, 0.6893377155005755, 0.6205869575420668, 0.5708104600843985, 0.5332767386177274, 0.5040259453877005, 0.480604728978688, 0.4614251650561655, 0.4454204464995861, 0.4318505037336006, 0.42018743503448275, 0.41004539351241504, 0.4011362417195314, 0.39324067417305675, 0.3861889182817386, 0.37984753361456447, 0.37411019187657785, 0.36889111436898947, 0.36412032010703316, 0.3597401307557962, 0.35570256283549295, 0.351967356193396, 0.3485004652806931]
    three2=[0.3452728915812062, 0.3422597706083029, 0.3394396510451913, 0.33679392044128653, 0.33430634382076224, 0.33196269006750095, 0.3297504272023768, 0.32765847207781607, 0.32567698346682183, 0.32379718998174195, 0.3220112461182284, 0.32031211118296377, 0.31869344694943436, 0.31714953071727153, 0.3156751811270907, 0.3142656945730091, 0.31291679047972853]
    append!(three1, three2)

    four1=[60.12528208529269, 56.99333416624111, 53.24311376460137, 50.14415105781351, 25.110409951150153, 9.535835394729189, 4.368965603311233, 2.4536596566093385, 1.6137388910024044, 1.1887364321663965, 0.9477928981356096, 0.7984999888903854, 0.6993184973343745, 0.6296882680450638, 0.5785912618434624, 0.5397211555403492, 0.50926439270382, 0.4848054264957532, 0.46475267213602667, 0.44802132887455154, 0.43385001490891795, 0.4216904979135669, 0.4111390485363155, 0.40189238067968547, 0.3937185946213899, 0.38643754452572676, 0.3799072818455295, 0.37401450841768424, 0.3686677330049682, 0.3637922852123901, 0.35932662898989165, 0.3552195992449582, 0.3514283049191391]
    four2=[0.3479165189353326, 0.3446534289768931, 0.34161265857186746, 0.33877149272841833, 0.33611026037032093, 0.33361183757015106, 0.33126124527940015, 0.3290453208643235, 0.32695244848581817, 0.32497233635464723, 0.32309583121146035, 0.3213147636877941, 0.3196218179679099, 0.31801042201528257, 0.3164746542235116, 0.3150091639221786, 0.31360910342658]
    append!(four1, four2)

    five1=[111.4294611865314, 106.56063883312427, 94.90967859329649, 92.95625564934653, 57.57217515455528, 21.312243125354726, 8.400449988873465, 3.9460399107161015, 2.2368150880401623, 1.4798448397007666, 1.0969937010050144, 0.8808237459576513, 0.7474840257048738, 0.659220907526359, 0.5973964842189191, 0.5520687749861364, 0.5175775907172481, 0.4905182025161864, 0.46874448474379937, 0.450848330495581, 0.43587334885765094, 0.4231501412347158, 0.41219770751913004, 0.4026623381335577, 0.3942785515302625, 0.3868434271629272, 0.38019931757903275, 0.37422194527934316, 0.36881203867274254, 0.36388934883825846, 0.3593882969689247, 0.35525475982293536, 0.3514436629161044]
    five2=[0.34791715506478615, 0.3446432072821447, 0.3415945254696277, 0.338747699186431, 0.3360825272186178, 0.33358147994226134, 0.3312292664789094, 0.32901248398677574, 0.32691933093206327, 0.32493937150322355, 0.32306334114640956, 0.3212829838852188, 0.31959091677389073, 0.31798051573498104, 0.31644581912419045, 0.3149814451611064, 0.3135825224097617]
    append!(five1, five2)

    six1=[201.06472032474483, 192.8088994663855, 174.7172156775645, 147.41738806218098, 124.96405416657039, 48.20930598367367, 16.84598021050227, 6.536036445286065, 3.1180759312964446, 1.8218900144418284, 1.2464997611985031, 0.9529802381551329, 0.7852611501439241, 0.680368556649547, 0.6099109305757571, 0.559826613986102, 0.5225791319074151, 0.49385218655194196, 0.4710314188017848, 0.45245629825188804, 0.4370284749514933, 0.42399568919672775, 0.41282695203411834, 0.4031375004147996, 0.39464204726742835, 0.3871247392575091, 0.38041930122728407, 0.37439558836686626, 0.3689502682509849, 0.3640002363650723, 0.3594778755472585, 0.35532758898194716, 0.35150322289336716]
    six2=[0.3479661262686605, 0.3446836726417737, 0.3416281162711056, 0.33877570164608484, 0.3361059627434179, 0.33360116509704896, 0.3312458578393688, 0.32902651164396834, 0.3269312257106042, 0.32494948453954053, 0.3230719617695176, 0.32129034971765386, 0.3195972238793926, 0.3179859269936004, 0.31645047050366015, 0.31498545104333786, 0.3135859769304199]
    append!(six1, six2);
    orders=[2, 3, 4, 5]
    nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, 10:15, hs, 0.82)
end



function nlcSpiRatioTest(one1, two1, three1, four1, five1, six1, orders, nums, hs, j2)
    pow=1;
    powy=1;
    alpha=0;
    factor=1;
    xmin=0;
    xmax=1;
    ymax=2;
    ymin=0;

    orders=(1 ./(((orders.+alpha).^pow).*factor));
    println(orders);
    num=nums[1];
    println(hs[num]);
    graph=abs.([(two1[num]-one1[num])/(three1[num]-two1[num]), (three1[num]-two1[num])/(four1[num]-three1[num]), (four1[num]-three1[num])/(five1[num]-four1[num]), (five1[num]-four1[num])/(six1[num]-five1[num])])
    graph=abs.(1 ./(graph.^powy));
    display(plot(orders, graph, title="J2="*string(j2)*", alpha="*string(alpha)*", pow="*string(pow),label="h: "*string(hs[nums[1]]), xlims=(xmin,xmax), ylims=(ymin,ymax), xlabel="1/order", ylabel="a_(n+1)/a_n"));
    for i=2:length(nums)
        num=nums[i];
        println(hs[num]);
        graph=[(two1[num]-one1[num])/(three1[num]-two1[num]), (three1[num]-two1[num])/(four1[num]-three1[num]), (four1[num]-three1[num])/(five1[num]-four1[num]), (five1[num]-four1[num])/(six1[num]-five1[num])]
        graph=abs.(1 ./(graph.^powy));
        println("hs ", string(hs[num])," ", graph);
        display(plot!(orders, graph, label="h: "*string(hs[num]), xlims=(xmin,xmax), ylims=(ymin,ymax)));
    end

end

function find_1d()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    J = 1
        J2 = 0
        N = 14
        h = 1
        numSites = 14
        width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
        end
        plot(hss, gs)
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energy: "*string(numSites)*", pbc, "*string(pbc)*".png");


end

function hamiltonianTest()
    lol=getPlaquetteNumberList(4);
    h=0.1;
    h2=0.1;
    N=16;
    J=1;
    J2=1;

    bonds = bondListFrustrated(4)
    eigensystem=calculateEigensystemSusceptibility(N, J, J2, h, h2, bonds,"lanczos", "one", h, h2, 0, lol);
    Eh=eigensystem[1][1]
    println("Eh:", eigensystem[1]);
    eigensystem=calculateEigensystemTransverse(N, J, J2, h, bonds, "lanczos", "one", h, 0);
    E0=eigensystem[1][1]
    println("E0:", eigensystem[1]);
    println(calculateSusceptibility(E0,Eh,h2));
end



function metropolisTest()
    thermalizationSteps=0;
    iterations=1000000;
    N=4;
    bonds=bondListFourNeighbors(N)
    J=1;
    T=1;
    energies=metropolisAlgorithm(thermalizationSteps, iterations, bonds, N*N, J, T);

    plot(1:length(energies), energies);
end


function meanFieldTest()
    J=1
    J2=1
    h=0.1
    firstGuess=10
    maxIterations=30;
    println(calculateBaseWeightMeanFieldSz(J, J2, h, firstGuess, maxIterations));

    graphs=readFromGraphFile();

    obtainMapOfNumNearFarBonds(graphs)
end

function bondsmaptest()
    N=16;
    bonds = bondListFrustrated(4)
    maps=obtainMapOfNumNearFarBonds(N, bonds);
    println(bonds);
    map=obtainMapOfNumNearFarBonds(N, bonds, maps);
    println(map)
end


function bondsTest()
    N=4;
    bonds = bondListFrustratedNoPBC(N)
    maps=obtainMapOfNumNearFarBonds(N*N, bonds);
    factors=calculateExternalFieldFactors(N, maps[1], maps[2]);
    println(maps);
    println(factors);
end


function lel()
    N=4;
    bonds = bondListFrustratedNoPBC(N)
    maps=obtainMapOfNumNearFarBonds(N*N, bonds);
    factors=calculateExternalFieldFactors(N, maps[1], maps[2]);
    result=obtainMeanFieldMapping(N*N, bonds, maps, factors);
    println(result);
end

function testtest()
    N=4;
    bonds = bondListFrustratedNoPBC(N)
    maps=obtainMapOfNumNearFarBonds(N*N, bonds);
    factors=calculateExternalFieldFactors(N, maps[1], maps[2]);
    result=obtainMeanFieldMapping(N*N, bonds, maps, factors);
    map1=result[1];
    map2=result[2];
    firstGuess=0.19347940353388252;
    maxIterations=5;
    test=calculateSelfConsistentMz(N*N, map1, map2, 5, 1, 0.1, bonds, 1, firstGuess, maxIterations)
end

function findHcFromIterations()
    hs=[1.5, 1.52, 1.54, 1.56, 1.58, 1.6, 1.62, 1.6400000000000001, 1.6600000000000001, 1.6800000000000002]
    hs2=[1.5, 1.52, 1.54, 1.56, 1.58]

    one=[0.1, 0.11798670045511729, 0.13587749168338245, 0.15244609206005827, 0.1667201008179561, 0.1782243110785705, 0.18698671566480932, 0.1933692384297837, 0.19786554838840853, 0.2009580692007149, 0.2030498703585755, 0.20444875971823812, 0.20537712882697998, 0.20599010359753628, 0.2063934685044329, 0.20665831063848328, 0.2068319470278696, 0.20694567769951233, 0.20702012369245154, 0.20706883459840814, 0.2071006981399348, 0.20712153754475673, 0.20713516536804813, 0.2071440765420535, 0.20714990323235286, 0.20715371296886245, 0.20715620388318626, 0.20715783249150088, 0.20715889729778914, 0.20715959347851035, 0.20716004864647872, 0.20716034623784677, 0.2071605408044216]
    one1=[0.20716066801277436, 0.20716075118203164, 0.2071608055583474, 0.20716084110972086, 0.20716086435332293, 0.2071608795500423, 0.2071608894857117, 0.20716089598166146]
    append!(one, one1)

    two=[0.1, 0.11322830905107018, 0.126154361526511, 0.13820192910481435, 0.14891022982166757, 0.15801120104473546, 0.16544343804276973, 0.17131111801681165, 0.1758181653969125, 0.17920635628933781, 0.1817119197312634, 0.18354214386327738, 0.1848670080820971, 0.18581975043761717, 0.18650163678410345, 0.18698800395221976, 0.18733406725348684, 0.18757987229404013, 0.18775424897972567, 0.18787784496900584, 0.1879653936611041, 0.1880273810213006, 0.18807125639005845, 0.18810230500623135, 0.18812427326593575, 0.18813981505091643, 0.18815080946434345, 0.18815858659012527, 0.18816408768492426, 0.18816797873727192, 0.18817073091506775, 0.18817267752916045, 0.18817405435486875]
    two1=[0.18817502816672835, 0.1881757169284579, 0.18817620407705854, 0.18817654862752672, 0.18817679232075601, 0.1881769646795901, 0.18817708658507284, 0.18817717280598312]
    append!(two, two1);

    three=[0.1, 0.10877258224124835, 0.11717275792634795, 0.12499363853384965, 0.13207676039483224, 0.138325723733976, 0.14370778077096166, 0.14824513459346642, 0.15200024643979745, 0.15505977227618276, 0.1575204879419085, 0.15947881770131814, 0.16102416182475082, 0.162235410217063, 0.1631797519413585, 0.1639129373489533, 0.16448033410865914, 0.1649183242383338, 0.16525576241201073, 0.16551534166754994, 0.16571479527784877, 0.16586791329087344, 0.16598537949380696, 0.1660754475994142, 0.16614448013185826, 0.16619737361440834, 0.16623789156740593, 0.16626892386249775, 0.1662926878782752, 0.16631088402622654, 0.16632481571055582, 0.1663354816874408, 0.1663436470761413]

    three1=[0.1663498978987174, 0.16635468293567288, 0.16635834582750342, 0.1663611496837904, 0.1663632959418684, 0.1663649388147142, 0.16636619635746472, 0.16636715894251977]
    append!(three, three1)

    four=[0.1, 0.10459805215662801, 0.10890406560551773, 0.11288393960351731, 0.11651653431221619, 0.11979335158924889, 0.12271724673775494, 0.12530048466756594, 0.12756248070591683, 0.1295275259693718, 0.13122271791091925, 0.13267622687862526, 0.1339159499319096, 0.13496854421280494, 0.1358587957867056, 0.13660926274794136, 0.13724012813182898, 0.13776920339598203, 0.13821203261396112, 0.13858205809353671, 0.13889081812878756, 0.13914815615690235, 0.13936242744432245, 0.13954069463217347, 0.139688907254436, 0.1398120629767191, 0.13991435005790998, 0.1399992716426095, 0.14006975313733852, 0.14012823425143833, 0.14017674740237995, 0.1402169841712793, 0.1402503514012626]
    four1=[0.14027801839702572, 0.14030095653012611, 0.1403199723988099, 0.14033573554106138, 0.1403488015612949, 0.1403596314059169, 0.14036860741316862, 0.14037604666570647]
    append!(four, four1)

    five=[0.1, 0.10068434456015143, 0.10131016803912832, 0.10188147760585667, 0.10240218788812311, 0.10287608538276598, 0.10330680141199303, 0.10369779262126055, 0.10405232798813817, 0.1043734813341489, 0.10466412839014375, 0.10492694754647647, 0.10516442351218765, 0.10537885320486785, 0.10557235328965883, 0.10574686887713898, 0.10590418297431217, 0.10604592635823076, 0.10617358760834053, 0.10628852309088195, 0.1063919667372376, 0.10648503949878689, 0.10656875839476884, 0.10664404509626817, 0.10671173401225001, 0.10677257986000616, 0.10682726471645587, 0.10687640455659184, 0.10692055529311316, 0.10696021833662515, 0.10699584569958395, 0.10702784466940996, 0.1070565820776328]
    five1=[0.10708238819217894, 0.10710556025999453, 0.10712636572635768, 0.1071450451564889, 0.10716181488365703, 0.1071768694069502, 0.1071903835601537, 0.10720251447199995]
    append!(five, five1)
    six=[0.1, 0.09701228833968416, 0.09434733171732036, 0.09195408014956588, 0.08979200968202884, 0.08782849814708353, 0.08603695661028825, 0.08439547256661957, 0.08288580739035344, 0.08149264387082455, 0.08020301343397243, 0.07900585453801044, 0.07789166822176927, 0.07685224656189196, 0.07588045650875681, 0.07497006625464776, 0.0741156046032868, 0.07331224618887429, 0.0725557171212019, 0.07184221690341233, 0.0711683534127618, 0.07053108844281425, 0.06992769184138675, 0.069355702688748, 0.0688128962759386, 0.06829725588813111, 0.06780694858968882, 0.06734030435837247, 0.06689579803583137, 0.06647203365671012, 0.06606773079551907, 0.06568171263168801, 0.06531289548364531]
    six1=[0.0649602796032859, 0.0646229410556945, 0.06430002453638907, 0.06399073700107907, 0.06369434200174535, 0.06341015463846562, 0.06313753704959296, 0.06287589437394062]
    append!(six, six1)
    seven=[0.1, 0.0935639636644397, 0.08796922061312122, 0.08304200900123833, 0.07865529398535105, 0.07471376803642965, 0.07114433944952105, 0.06788988596481545, 0.0649050276774459, 0.06215319108889855, 0.05960452299363238, 0.05723437814151721, 0.0550222031100979, 0.05295069931673278, 0.05100518626363978, 0.0491731107655489, 0.04744366418688786, 0.045807480672303454, 0.04425639686198295, 0.04278325881104305, 0.04138176552781416, 0.04004634119359465, 0.038772030047883765, 0.03755440933401036, 0.03638951674731179, 0.035273789613058375, 0.03420401361604445, 0.03317727935752196, 0.03219094536487181, 0.031242606450787056, 0.03033006653089935, 0.029451315175919226, 0.028604507306683936]
    seven1=[0.02778794554627127, 0.0270000648279113, 0.026239418925868774, 0.025504668631924417, 0.02479457134520733, 0.02410797188021607, 0.023443794328299215, 0.022801034833089127]
    append!(seven, seven1)

    eight=[0.1, 0.09032270586107935, 0.08212910790574629, 0.07506933287080658, 0.06890187933541073, 0.06345381308905318, 0.05859747355386601, 0.05423616940526948, 0.050295034483738184, 0.04671498046214359, 0.043448579429916576, 0.04045718896544733, 0.037708900082482615, 0.035177043851000143, 0.032839085738673814, 0.030675794338270893, 0.028670607697060774, 0.02680914420281369, 0.025078820728959037, 0.02346855139170553, 0.021968507602080065, 0.020569925222719436, 0.019264948277833205, 0.018046501283180777, 0.01690818417002887, 0.015844185182821928, 0.01484920817754939, 0.013918411535569346, 0.013047356505866827, 0.012231963246644759, 0.011468473190865877, 0.010753416634879213, 0.010083584664609777]
    eight1=[0.009456004702931396, 0.008867919096118747, 0.008316766264079197, 0.007800164024397981, 0.007315894769207781, 0.006861892229029434, 0.006436229603070098, 0.00603710887173377]
    append!(eight, eight1)

    nine=[0.1, 0.08727307834543341, 0.0767814098971912, 0.06795270421973547, 0.06040841561701575, 0.053885884894928245, 0.04819557701609276, 0.04319615616357935, 0.03877923875213464, 0.034859685757354555, 0.03136920979118118, 0.02825204151743167, 0.025461916982815247, 0.022959935805170056, 0.020713007352317403, 0.018692702314345028, 0.01687438901923728, 0.015236573129695272, 0.013760384858919105, 0.012429174736052808, 0.011228190346745263, 0.010144314283917596, 0.009165848972297653, 0.008282337851305107, 0.007484415120392267, 0.006763678206393181, 0.006112578531782178, 0.005524327201268913, 0.0049928129913539235, 0.00451253059799553, 0.004078517525819468, 0.0036862983263193155, 0.003331835139734887]
    nine1=[0.003011483685788359, 0.00272195399652602, 0.0024602753007731985, 0.002223764561984164, 0.0020099982453276786, 0.0018167869497283486, 0.0016421525898497877, 0.0014843078536147338]
    append!(nine, nine1);
    ten=[0.1, 0.08440082482196129, 0.07188268227587351, 0.06160757254147098, 0.05303822954670214, 0.04580917948737971, 0.039659638984278316, 0.03439609298482478, 0.029870235485001638, 0.02596535584058181, 0.022587600775423884, 0.019660167621228568, 0.01711932142112673, 0.014911581414777303, 0.012991677819312038, 0.011321028968687925, 0.00986657857967489, 0.008599888228248032, 0.007496414964168279, 0.006534926351188073, 0.005697019809397393, 0.004966722804006509, 0.004330156929048296, 0.0037752533773894336, 0.003291510372790691, 0.0028697853170679367, 0.0025021159709631828, 0.002181566134318652, 0.0019020921484503338, 0.0016584271971128628, 0.001445980890219238, 0.001260752016653717, 0.0010992526758128117]
    ten1=[0.0009584422618504041, 0.0008356699932471962, 0.0007286248629882802, 0.0006352920389040545, 0.0005539148747849251, 0.0004829618047876344, 0.00042109748983643324, 0.0003671576674974841]
    append!(ten, ten1);

    big=[one, two, three, four, five, six, seven, eight, nine, ten];
    big2=[one, two, three, four, five];

    actualArray::Vector{Float64}=[];

    for i=1:length(big2)
        append!(actualArray, big2[i][length(big2[i])])
    end
    fittingLinear(hs2, (actualArray).^2)

    display(plot(hs2, (actualArray).^3, title="Plot of (Magnetization)^3 after 40 iterations at J2=0.1 vs. h", xaxis="h", yaxis="(Magnetization)^3"));


end



function findHcFromIterationsJ2028()
    hs=[1.3, 1.305, 1.3099999999999998, 1.3149999999999997, 1.3199999999999996, 1.3249999999999995, 1.3299999999999994, 1.3349999999999993, 1.3399999999999992, 1.344999999999999, 1.349999999999999, 1.3549999999999989, 1.3599999999999988, 1.3649999999999987, 1.3699999999999986, 1.3749999999999984, 1.3799999999999983, 1.3849999999999982, 1.3899999999999981, 1.394999999999998, 1.399999999999998];
    hs2=[1.3, 1.305, 1.3099999999999998, 1.3149999999999997, 1.3199999999999996, 1.3249999999999995, 1.3299999999999994, 1.3349999999999993, 1.3399999999999992, 1.344999999999999, 1.349999999999999, 1.3549999999999989, 1.3599999999999988, 1.3649999999999987, 1.3699999999999986, 1.3749999999999984, 1.3799999999999983, 1.3849999999999982, 1.3899999999999981];

    one=[0.1, 0.12448897506671851, 0.14933365185779124, 0.17191741804998334, 0.19029735057576047, 0.20387493244550078, 0.21317670784081694, 0.2192172154794452, 0.22300282295708493, 0.2253222093540808, 0.22672352335431414, 0.22756299620941522, 0.22806332917553748, 0.2283606234270295, 0.22853695318344772, 0.22864142443967803, 0.22870328170225354, 0.22873989343881462, 0.22876155814146926, 0.22877437635779002, 0.2287819598355251, 0.22878644614358615, 0.22878910012484524, 0.2287906701245019, 0.22879159887079722, 0.2287921482752318, 0.22879247327706279, 0.22879266553245142, 0.22879277926133285, 0.2287928465377454, 0.22879288633511496, 0.22879290987724318, 0.2287929238036223]
    one1=[0.2287929320417657, 0.22879293691506394, 0.2287929397978345, 0.22879294150315083, 0.2287929425119213, 0.22879294310867934, 0.22879294346168458, 0.22879294367048594]
    append!(one, one1)

    two=[0.1, 0.12294859425473187, 0.14614399725561064, 0.16735540684955247, 0.184885863412862, 0.19812730528480307, 0.20743776082111406, 0.21365112730239771, 0.21765218737579203, 0.22016915488397026, 0.22172918617678153, 0.22268719177241178, 0.2232721487670949, 0.22362807717552335, 0.22384418817494267, 0.2239752358334613, 0.22405463954292995, 0.224102728539383, 0.2241318441221549, 0.22414946913651984, 0.224160137249223, 0.22416659405822173, 0.22417050185058365, 0.22417286687071977, 0.22417429817526288, 0.22417516438992996, 0.22417568861375997, 0.2241760058674245, 0.2241761978649512, 0.22417631405910382, 0.2241763843780595, 0.2241764269340144, 0.224176452688242]
    two1=[0.22417646827428686, 0.2241764777067279, 0.22417648341511312, 0.2241764868697226, 0.22417648896039766, 0.22417649022563266, 0.22417649099134493, 0.22417649145473176]
    append!(two, two1);

    three=[0.1, 0.12143762541910035, 0.1430185671161733, 0.16285593438908044, 0.17948555217204118, 0.19231502408207418, 0.20156636689213295, 0.20790876610819956, 0.21210510932617557, 0.21481595916984844, 0.21654004458050366, 0.21762564264104628, 0.21830489720012738, 0.21872822095629546, 0.2189913912032947, 0.21915474578967745, 0.21925604591048103, 0.21931882724876814, 0.21935772202000653, 0.21938181290541267, 0.219396732358679, 0.21940597114729932, 0.2194116919056807, 0.21941523414255515, 0.21941742741491171, 0.21941878542170995, 0.21941962625104164, 0.2194201468599957, 0.2194204691998917, 0.21942066877928806, 0.2194207923503698, 0.21942086886024517, 0.21942091623187787]
    three1=[0.21942094556232614, 0.21942096372247016, 0.21942097496642957, 0.21942098192820464, 0.2194209862386321, 0.21942098890745876, 0.21942099055987535, 0.21942099158299963]
    append!(three, three1)

    four=[0.1, 0.11995549677641269, 0.13995762396981276, 0.15842429322381057, 0.1741083366895517, 0.18645249215631104, 0.1955733430928081, 0.20199379999358022, 0.20635785818354543, 0.20925316122423546, 0.21114304146017046, 0.21236351454172522, 0.21314623457263457, 0.2136459749132383, 0.21396413156266417, 0.21416631531525956, 0.2142946512243791, 0.2143760523639233, 0.2144276595244312, 0.21446036804007404, 0.21448109474117416, 0.21449422725508543, 0.21450254743692196, 0.21450781848559403, 0.21451115772914303, 0.2145132731210526, 0.21451461319357706, 0.2145154621051179, 0.21451599987248254, 0.2145163405355964, 0.21451655633733285, 0.21451669304227416, 0.21451677964132027]
    four1=[0.21451683449957545, 0.21451686925084418, 0.21451689126484405, 0.21451690521013073, 0.21451691404410572, 0.2145169196401736, 0.2145169231851489, 0.2145169254307952]
    append!(four, four1)

    five=[0.1, 0.11850163919453777, 0.13696126511688064, 0.15406530380520214, 0.1687659810220011, 0.18055520457861704, 0.18947193020550376, 0.19591284784145896, 0.20040924235439414, 0.20347286751618843, 0.20552558648220687, 0.20688548168887028, 0.207779620207855, 0.20836460116518477, 0.20874607120557948, 0.2089943003866331, 0.20915560316292003, 0.20926032529924127, 0.20932827386645436, 0.20937234525302037, 0.20940092285789347, 0.20941945072195817, 0.20943146173853194, 0.20943924756873347, 0.2094442943110222, 0.20944756549551571, 0.2094496857646072, 0.20945106003363034, 0.20945195077001413, 0.20945252810046144, 0.20945290229574035, 0.2094531448289766, 0.2094533020257446]
    five1=[0.20945340391200393, 0.20945346994899747, 0.20945351275046165, 0.2094535404919905, 0.20945355847247976, 0.2094535701264283, 0.20945357767985956, 0.2094535825755809]
    append!(five, five1)

    six=[0.1, 0.11707548709250126, 0.13402943413130494, 0.14978329865973702, 0.16346994600435122, 0.17463952378730968, 0.1832777435319388, 0.18967578037478852, 0.1942612130637297, 0.19746947791447664, 0.1996762246895854, 0.2011762257757242, 0.20218760090071014, 0.20286578948490627, 0.2033188815593729, 0.20362084193938634, 0.20382175019643312, 0.20395527717739367, 0.2040439567009195, 0.20410282305176525, 0.2041418865445914, 0.20416780339615, 0.20418499561143091, 0.20419639917518867, 0.20420396266550886, 0.20420897899374035, 0.20421230587821007, 0.20421451226465623, 0.20421597552030807, 0.20421694593052098, 0.20421758948927868, 0.20421801628445438, 0.20421829932574415]
    six1=[0.20421848703230067, 0.20421861151488227, 0.20421869406875273, 0.2042187488164914, 0.20421878512383806, 0.20421880920198943, 0.20421882517004458, 0.20421883575965558]
    append!(six, six1)

    seven=[0.1, 0.11567647924983138, 0.13116193245439878, 0.1455821141421177, 0.15823125114256426, 0.16872242188965547, 0.1770086329762726, 0.18329593381120446, 0.18791945936045387, 0.19124050889252492, 0.19358548515116702, 0.19522115230825637, 0.19635231095462263, 0.19712992007738314, 0.19766228832805702, 0.19802573163761458, 0.1982733727379794, 0.19844188706672222, 0.1985564545754142, 0.1986342978649668, 0.19868716683230073, 0.1987230638320807, 0.19874743253479296, 0.1987639730971264, 0.19877519922148693, 0.19878281796657812, 0.19878798831015004, 0.19879149698719858, 0.19879387798648163, 0.1987954937195911, 0.19879659013781872, 0.19879733415046444, 0.19879783902410597]
    seven1=[0.19879818162135926, 0.19879841410064739, 0.19879857185599903, 0.19879867890526062, 0.19879875154644921, 0.19879880083906765, 0.1987988342878979, 0.19879885698549798]
    append!(seven, seven1)

    eight=[0.1, 0.1143040595309286, 0.12835843094192692, 0.14146508928273732, 0.15306034964734422, 0.16282119902929132, 0.17068444935071533, 0.17679020524084688, 0.1813939476893964, 0.1847874793673434, 0.1872469075769529, 0.18900735888109133, 0.19025624694975052, 0.19113658143855944, 0.19175432458582153, 0.19218642652014684, 0.19248800196385638, 0.19269815171767082, 0.19284443331560566, 0.1929461803293743, 0.19301691377620478, 0.19306606890568923, 0.19310021981404724, 0.1931239422246351, 0.19314041861162526, 0.19315186129975223, 0.19315980766244065, 0.1931653257783155, 0.19316915756061936, 0.19317181829922883, 0.19317366585520795, 0.19317494874348828, 0.1931758395372945]
    eight1=[0.19317645807124093, 0.19317688755670545, 0.19317718577376378, 0.19317739284307175, 0.19317753662312084, 0.19317763645773162, 0.19317770577850604, 0.19317775391179584]
    append!(eight, eight1)

    nine=[0.1, 0.11295767753027537, 0.12561848124688726, 0.13743507110965517, 0.14796701970608364, 0.15695318883488218, 0.16432672022955755, 0.1701790026489305, 0.17469935070252537, 0.17811680340629374, 0.1806582207107225, 0.18252487375242846, 0.18388337815421524, 0.1848654343143035, 0.18557189764893886, 0.18607831840110398, 0.18644042214936232, 0.18669886615976347, 0.18688308616316782, 0.18701427755999364, 0.18710764332383892, 0.18717405831722075, 0.18722128632035717, 0.18725486239176115, 0.18727872878705593, 0.18729569135648055, 0.1873077461391161, 0.18731631258728446, 0.18732239987012833, 0.18732672533577066, 0.18732979883284623, 0.1873319826990139, 0.18733353442294703]
    nine1=[0.18733463697606167, 0.1873354203735309, 0.18733597699904625, 0.18733637249570478, 0.1873366535056368, 0.1873368531697165, 0.18733699503550555, 0.1873370958342558]
    append!(nine, nine1)

    ten=[0.1, 0.11163678914397267, 0.12294152693783261, 0.13349442572389916, 0.14296027425732288, 0.1511354628314039, 0.15795824555716956, 0.1634860303313031, 0.1678553059776717, 0.1712406122895291, 0.17382261371310367, 0.1757681530103081, 0.17722063743229285, 0.17829751619126752, 0.17909179772223305, 0.1796754014075836, 0.18010299924686782, 0.18041564521060915, 0.18064389533135228, 0.1808103467418289, 0.1809316332153524, 0.18101995766368256, 0.18108425052539429, 0.18113103573802594, 0.18116507306836824, 0.18118983191210727, 0.18120783938791332, 0.181220935344135, 0.1812304587846716, 0.18123738395370875, 0.18124241956534587, 0.18124608110227164, 0.18124874346276945]
    ten1=[0.18125067928141642, 0.18125208681374408, 0.18125311022244997, 0.1812538543333436, 0.18125439536746238, 0.18125478874585593, 0.18125507476526803, 0.18125528272531602]

    eleven=[0.1, 0.11034085707282086, 0.12032691426997637, 0.1296450543417231, 0.13804829064139823, 0.14538454569088666, 0.1516026297874605, 0.15673790210233743, 0.1608864483822062, 0.16417741019938933, 0.16675000301103265, 0.1687377784823692, 0.1702598004018868, 0.17141706481293884, 0.17229228653319453, 0.1729515161118694, 0.17344653310727592, 0.17381738329953877, 0.1740947297454202, 0.1743018782569138, 0.1744564459382773, 0.17457169574209536, 0.17465758254063293, 0.1747215615074621, 0.1747692065064093, 0.17480467968123042, 0.17483108614801118, 0.1748507408541589, 0.17486536877610895, 0.1748762547881263, 0.17488435567793925, 0.1748903837728351, 0.1748948693166902]
    eleven1=[0.1748982069679936, 0.17490069044415787, 0.1749025383249315, 0.1749039132661304, 0.17490493630348725, 0.1749056974999317, 0.17490626387022584, 0.17490668527849038]
    append!(eleven, eleven1)

    twelve=[0.1, 0.10906935126196646, 0.1177739025421601, 0.1258884134890338, 0.13323836061770294, 0.13971615234071924, 0.14528377277485074, 0.14996358920584338, 0.15382217170988297, 0.15695245849536488, 0.15945815790160894, 0.16144223749517012, 0.16299969647177567, 0.1642138916155974, 0.16515538660895712, 0.16588236650114793, 0.16644188210893243, 0.16687142858463389, 0.16720055901697395, 0.16745237375687888, 0.16764481595586297, 0.1677917564919617, 0.16790387936051307, 0.16798939121793424, 0.1680545826145106, 0.16810426769082748, 0.16814212623016087, 0.1681709683531576, 0.1681929385431145, 0.1682096724420393, 0.16822241708047764, 0.1682321229131491, 0.16823951418145186]
    twelve2=[0.16824514265430449, 0.16824942864379552, 0.16825269229082654, 0.16825517741928347, 0.16825706971760368, 0.16825851059370325, 0.1682596077306466, 0.16826044312754676]
    append!(twelve, twelve2)

    thirteen=[0.1, 0.1078217492819643, 0.11528167398815409, 0.12222553853398382, 0.12853686041909435, 0.13414495633220594, 0.1390253452238246, 0.14319372551246567, 0.14669609628188926, 0.14959778870334012, 0.15197351783449545, 0.15389959666019687, 0.15544860302981212, 0.15668624483937604, 0.1576699257904183, 0.1584484814738287, 0.15906263287594827, 0.15954581836451567, 0.15992517466187106, 0.16022252519265906, 0.16045529742165543, 0.16063733267014943, 0.16077957762041623, 0.16089066124133394, 0.16097736813545838, 0.1610450221507538, 0.16109779442186048, 0.1611389490160303, 0.16117103778951414, 0.16119605433185122, 0.1612155552103367, 0.16123075523231728]
    thirteen1=[0.1612426021542605, 0.16125183518850836, 0.1612590307702805, 0.16126463832833762, 0.1612690082237392, 0.1612724135603505, 0.1612750672040656, 0.16127713505944546, 0.16127874642399723]
    append!(thirteen, thirteen1)

    fourteen=[0.1, 0.10659753665563053, 0.11284934316314583, 0.11865706977015747, 0.12394923979881452, 0.12868439668488155, 0.13285027574617786, 0.1364598072175172, 0.1395452478215587, 0.14215176809653585, 0.14433152453779152, 0.14613881969729353, 0.14762656206128041, 0.14884396242729733, 0.14983525592363192, 0.15063919121756508, 0.15128904271536991, 0.15181294503800324, 0.15223439994241056, 0.1525728523444314, 0.15284426942811846, 0.15306168433017453, 0.15323568482798133, 0.15337483972231591, 0.1534860630325345, 0.15357492024206024, 0.15364588280339422, 0.15370253775485407, 0.15374775917720634, 0.15378384768575448, 0.1538126434422469, 0.15383561741237234, 0.15385394486560658]
    fourteen1=[0.15386856445198532, 0.15388022560899697, 0.1538895265552389, 0.1538969447088718, 0.15390286102143652, 0.15390757943179195, 0.1539113424106641, 0.15391434337652052]
    append!(fourteen, fourteen1)

    fifteen=[0.1, 0.10539620713521988, 0.11047596579935391, 0.11518328031121795, 0.11948002845176182, 0.1233465278998205, 0.12678027531581246, 0.12979333555878692, 0.13240898536154475, 0.13465818468771565, 0.13657631428737294, 0.13820044552965322, 0.13956724996043993, 0.14071153851088827, 0.14166534975177192, 0.142457475837686, 0.14311331162518226, 0.14365492505373154, 0.14410126622237143, 0.1444684528873878, 0.1447700882467592, 0.14501758161620512, 0.1452204537940602, 0.14538661695767036, 0.14552262443795064, 0.14563388929390128, 0.145724872791302, 0.1457992451068588, 0.14586002115434105, 0.1459096745953929, 0.14595023301760396, 0.14598335704568538, 0.14601040586891573]
    fifteen2=[0.14603249136546886, 0.14605052270691132, 0.1460652430502951, 0.14607725967684318, 0.1460870687178151, 0.1460950754201476, 0.14610161074327338, 0.14610694494233817]
    append!(fifteen, fifteen2)

    sixteen=[0.1, 0.10421726293375165, 0.10816054711451589, 0.11180410511892956, 0.11513285776826213, 0.11814191522319493, 0.12083542135276838, 0.12322495717657464, 0.12532774689064924, 0.12716487619704364, 0.12875967585129888, 0.1301363612707088, 0.13131896436078022, 0.13233055282166445, 0.13319270631613508, 0.133925206005436, 0.1345458906943311, 0.13507063568724806, 0.13551341655578303, 0.135886427283257, 0.1362002293876274, 0.13646391493484522, 0.136685271560326, 0.1368709416931025, 0.1370265712347522, 0.13715694515009494, 0.1372661089552716, 0.13735747610288274, 0.13743392189919668, 0.13749786495368657, 0.1375513373411896, 0.1375960447120624, 0.1376334175627501]
    sixteen2=[0.1376646548084277, 0.1376907607035976, 0.13771257604978182, 0.13773080452090639, 0.13774603483326148, 0.13775875939013538, 0.13776938994368143, 0.1377782707386126]
    append!(sixteen, sixteen2)

    seventeen=[0.1, 0.10306021491440541, 0.10590204956605083, 0.10851917055960078, 0.11091049561000028, 0.11307957477057633, 0.11503381833124314, 0.11678365662325581, 0.11834170513010608, 0.11972199059163427, 0.12093927442680581, 0.12200849196781659, 0.12294431156211778, 0.1237608072469262, 0.12447123226822883, 0.1250878775506609, 0.12562199848703323, 0.126083794291025, 0.12648242595646955, 0.1268260610760442, 0.12712193603960112, 0.12737642824440745, 0.12759513279428952, 0.12778293970320342, 0.12794410885324567, 0.12808234091733534, 0.1282008431809283, 0.12830238972821073, 0.1283893758343584, 0.12846386666288284, 0.12852764053413515, 0.12858222713152526, 0.12862894106503212]
    seventeen2=[0.1286689112305502, 0.12870310640069038, 0.1287323574641546, 0.12875737670457815, 0.1287787744773329, 0.12879707361010878, 0.1288127218191183, 0.12882610240053052]
    append!(seventeen, seventeen2)

    eighteen=[0.1, 0.10192458274170069, 0.10369940005218709, 0.10532782396166958, 0.10681489167511911, 0.1081669559816289, 0.10939134542106504, 0.11049604927771245, 0.11148943751947181, 0.11238002126584745, 0.11317625558248111, 0.11388638350437738, 0.11451831818127922, 0.11507955881872241, 0.11557713551167058, 0.11601757797299408, 0.1164069033988585, 0.1167506191578898, 0.11705373654332349, 0.11732079241199875, 0.11755587610398077, 0.11776265955986359, 0.11794442901477763, 0.11810411704198358, 0.11824433404625329, 0.11836739857308595, 0.11847536601000841, 0.118570055420449, 0.11865307437471674, 0.1187258417349727, 0.1187896084178786, 0.11884547620467896, 0.1188944146992298]
    eighteen2=[0.11893727655317839, 0.11897481108721882, 0.1190076764410375, 0.11903645038261831, 0.11906163990380969, 0.11908368972204673, 0.11910298980057381, 0.11911988199088074]
    append!(eighteen, eighteen2)

    nineteen=[0.1, 0.10080989499745814, 0.10155149656647358, 0.10222916272581253, 0.10284723102067275, 0.10340996218261117, 0.10392149503525858, 0.10438581168170888, 0.10480671184998382, 0.1051877952052936, 0.10553245043977956, 0.10584385000265777, 0.10612494941974165, 0.10637849025664245, 0.10660700589437579, 0.10681282940184307, 0.10699810290020775, 0.10716478791750891, 0.10731467632453483, 0.10744940152472085, 0.10757044964178682, 0.10767917050867315, 0.10777678831210874, 0.10786441178804276, 0.1079430438975327, 0.10801359093885712, 0.10807687107397226, 0.10813362226270352, 0.10818450961150848, 0.10823013215230728, 0.10827102907373451, 0.10830768543170245, 0.10834053736856794]
    nineteen2=[0.10836997687241762, 0.10839635610779354, 0.10841999134964438, 0.1084411665508822, 0.10846013657329227, 0.10847713010992528, 0.1084923523254633, 0.10850598723941642]
    append!(nineteen, nineteen2)

    twenty=[0.1, 0.09971568926510616, 0.09945721431912191, 0.09922206261857253, 0.09900799341788707, 0.09881300385750798, 0.09863530000527304, 0.09847327201421337, 0.09832547271945684, 0.09819059912300658, 0.09806747631509022, 0.09795504346087552, 0.09785234154548039, 0.09775850262224739, 0.09767274035128042, 0.09759434164984278, 0.09752265930406186, 0.09745710541510755, 0.09739714557172842, 0.09734229365743653, 0.0972921072135151, 0.09724618329050744, 0.09720415473006437, 0.09716568682683442, 0.09713047432700542, 0.09709823872557376, 0.09706872582926737, 0.09704170355641296, 0.09701695994820876, 0.09699430136934266, 0.09697355087815702, 0.09695454674912174, 0.0969371411321579]
    twenty2=[0.09692119883523757, 0.09690659621808385, 0.09689322018619598, 0.09688096727542787, 0.09686974281865275, 0.0968594601866211, 0.09685004009611008, 0.09684140997911118]
    append!(twenty, twenty2)

    twentyone=[0.1, 0.09864151218498243, 0.09741541134121057, 0.0963052049529232, 0.09529701639824086, 0.09437907856241066, 0.09354134199803127, 0.09277516828987041, 0.09207308761084403, 0.09142860520559275, 0.09083604557091426, 0.0902904259692595, 0.08978735297829932, 0.08932293728617478, 0.08889372305388679, 0.08849662899418924, 0.08812889894047495, 0.08778806015194848, 0.08747188796485274, 0.08717837567887793, 0.08690570878669915, 0.08665224282444067, 0.08641648425643426, 0.08619707391402495, 0.08599277259399721, 0.08580244849064524, 0.08562506619098298, 0.08545967700767226, 0.08530541046092827, 0.0851614667506385, 0.08502711008500219, 0.08490166275221624, 0.0847844998388203]
    twentyone1=[0.0846750445126707, 0.0845727637999954, 0.08447716479646923, 0.08438779126006622, 0.0843042205410044, 0.0842260608098709, 0.08415294855023604, 0.08408454628623281]
    append!(twentyone, twentyone1)
    big=[one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen];

        actualArray::Vector{Float64}=[];

        for i=1:length(big)
            append!(actualArray, big[i][length(big[i])])
        end
        fittingLinear(hs2, (actualArray).^2)

        display(plot(hs2, (actualArray).^2, title="Plot of (Magnetization)^2 after 40 iterations at J2=0.28 vs. h", xaxis="h", yaxis="(Magnetization)^2"));

end



function findHcFromIterationsJ2046()
    hs=[1.1, 1.105, 1.1099999999999999, 1.1149999999999998, 1.1199999999999997, 1.1249999999999996, 1.1299999999999994, 1.1349999999999993, 1.1399999999999992, 1.1449999999999991, 1.149999999999999, 1.154999999999999, 1.1599999999999988, 1.1649999999999987, 1.1699999999999986, 1.1749999999999985, 1.1799999999999984, 1.1849999999999983, 1.1899999999999982]
    one=[0.1, 0.1304990770282167, 0.16193221155459409, 0.18982928722854994, 0.21117481170538197, 0.225620120603539, 0.23457491221679388, 0.23982209282140868, 0.24279480023034056, 0.24444667133393067, 0.24535469590726952, 0.2458508581768657, 0.24612108510188488, 0.24626799752128575, 0.24634779088837863, 0.24639110665442057, 0.24641461385053254, 0.24642736907647195, 0.24643428959840818, 0.24643804425021448, 0.2464400812440259, 0.24644118634992307, 0.24644178588542776, 0.24644211114058887, 0.24644228759500886, 0.2464423833233258, 0.24644243525687204, 0.2464424634313226, 0.2464424787162432, 0.24644248700843477, 0.24644249150702216, 0.24644249394756085, 0.24644249527157402]
    one1=[0.24644249598986848, 0.24644249637956353, 0.2464424965909447, 0.24644249670562493, 0.24644249676785193, 0.24644249680161093, 0.2464424968199257, 0.24644249682986902]
    append!(one, one1)

    two=[0.1, 0.1285157428964634, 0.15780996817367854, 0.18408824891114658, 0.20466741279668885, 0.21903172081520633, 0.22824262581247362, 0.2338250956599049, 0.2370922027988944, 0.23896499337476262, 0.24002573095229374, 0.24062244162423962, 0.240956827979269, 0.24114380810733557, 0.24124823624015576, 0.24130651983254972, 0.24133903690171155, 0.24135717472325524, 0.2413672907016662, 0.24137293230101978, 0.24137607846051254, 0.2413778329484524, 0.24137881134544928, 0.2413793569489084, 0.2413796612037475, 0.24137983087065934, 0.24137992548483603, 0.24137997824608334, 0.24138000766816473, 0.2413800240752878, 0.24138003322466617, 0.24138003832677846, 0.24138004117194142]
    two1=[0.2413800427585463, 0.24138004364330917, 0.24138004413669545, 0.24138004441182145, 0.2413800445652346, 0.24138004465081037, 0.2413800446985138, 0.2413800447251263]
    append!(two, two1)
    three=[0.1, 0.12657797471796747, 0.15377913275896907, 0.17841006689665698, 0.19812044475195403, 0.21229291775276146, 0.22168785686194376, 0.22757701530369592, 0.23113838617651622, 0.2332451155850043, 0.23447506366219126, 0.23518760723615167, 0.23559855570591579, 0.23583495022740253, 0.2359707312624128, 0.23604865471913933, 0.2360933522356541, 0.23611898384361704, 0.23613367980244318, 0.23614210499125635, 0.23614693489215358, 0.23614970364082508, 0.2361512908027683, 0.23615220062092263, 0.23615272215831007, 0.2361530211195532, 0.2361531924929341, 0.2361532907291475, 0.2361533470409584, 0.23615337932047767, 0.2361533978239966, 0.23615340843077479, 0.23615341451085986]
    three1=[0.23615341799615622, 0.236153419993998, 0.23615342113925006, 0.23615342179573282, 0.23615342217202417, 0.23615342238774178, 0.23615342251137078, 0.2361534225822482]
    append!(three, three1);
    four=[0.1, 0.12468475642494825, 0.14984112504602082, 0.17280631279740072, 0.19155409830366665, 0.20542125458564495, 0.2149169345620218, 0.22107201859453637, 0.22491882812062994, 0.22726795602075378, 0.22868214485923163, 0.22952615928024506, 0.2300272785933251, 0.23032389345462706, 0.23049914053472084, 0.23060256880767713, 0.23066357172383026, 0.23069953824272774, 0.23072073892290093, 0.23073323415542166, 0.23074059801309196, 0.23074493758297207, 0.23074749485159707, 0.23074900180268335, 0.2307498898127999, 0.23075041309302247, 0.23075072144680936, 0.23075090315037874, 0.23075101022266795, 0.2307510733170398, 0.23075111049655062, 0.23075113240525907, 0.23075114531535065]
    four1=[0.23075115292285997, 0.2307511574057218, 0.2307511600473499, 0.23075116160396603, 0.23075116252123365, 0.23075116306175053, 0.2307511633802552, 0.2307511635679684]
    append!(four, four1)


    five=[0.1, 0.12283507147079636, 0.14599694689675236, 0.16728774034884633, 0.18498917932925588, 0.19843745574912133, 0.20794064118401476, 0.2143080059964867, 0.2184209332204921, 0.2210144775080401, 0.22262502908210396, 0.22361561050632436, 0.22422127594605012, 0.2245902519549507, 0.22481453737242751, 0.2249506875952273, 0.22503326856678899, 0.22508333259641827, 0.2251136743552184, 0.2251320598947072, 0.22514319934949278, 0.22514994808435765, 0.2251540365763372, 0.2251565133894943, 0.22515801382338466, 0.22515892276617716, 0.2251594733885839, 0.22515980694534832, 0.22516000900740116, 0.22516013141241437, 0.22516020556279412, 0.22516025048152458, 0.22516027769231228]
    five1=[0.22516029417601846, 0.22516030416151314, 0.22516031021050548, 0.22516031387484578, 0.2251603160946193, 0.22516031743931714, 0.22516031825389868, 0.22516031874735004]
    append!(five, five1)

    six=[0.1, 0.12102790582413142, 0.14224720955131767, 0.16186418986571385, 0.17844672892282853, 0.19136518178874629, 0.20077460456369842, 0.20728758967727462, 0.2116351852887799, 0.21446664408436417, 0.2162809588630685, 0.2174313792203798, 0.21815597470798986, 0.21861043851270315, 0.21889472063280466, 0.21907225293675936, 0.2191830054903361, 0.21925205304702883, 0.21929508263114733, 0.21932189137383923, 0.2193385914131132, 0.21934899339321975, 0.21935547209605546, 0.21935950709664895, 0.21936202007574016, 0.21936358512404092, 0.21936455980535935, 0.21936516681421112, 0.21936554484389376, 0.21936578027061684, 0.21936592688786036, 0.21936601819695303, 0.21936607506165037]
    six1=[0.21936611047534815, 0.2193661325299843, 0.21936614626495868, 0.21936615481871996, 0.21936616014574684, 0.21936616346327004, 0.2193661655293062, 0.2193661668159946]
    append!(six, six1)
    seven=[0.1, 0.119262250633187, 0.13859216243893605, 0.15654451701510028, 0.1719476344713348, 0.18423064316363041, 0.1934395157396099, 0.2000190510045917, 0.20455649313284055, 0.20760871071377046, 0.2096273113581501, 0.2109472947870928, 0.21180404217669102, 0.2123574309087421, 0.21271375379244922, 0.21294272316572063, 0.21308966491563436, 0.21318388633385246, 0.2132442702065436, 0.21328295522958163, 0.21330773338703424, 0.2133236018119941, 0.21333376334783133, 0.21334027003203093, 0.21334443626927768, 0.21334710385231884, 0.21334881184220164, 0.21334990541681226, 0.21335060559540373, 0.21335105389412018, 0.21335134092266844, 0.21335152469576726, 0.21335164235833337]
    seven1=[0.21335171769292982, 0.21335176592658855, 0.21335179680864116, 0.21335181658114713, 0.2133518292406814, 0.21335183734605323, 0.21335184253559505, 0.21335184585825587]
    append!(seven, seven1)

    eight=[0.1, 0.11753710458334644, 0.13503172287732867, 0.15133654598590188, 0.16551224881588578, 0.17706208293987094, 0.18596112128255243, 0.19251718678377513, 0.19718567054382746, 0.2004288631242129, 0.20264299627932786, 0.20413654222991368, 0.2051358321431724, 0.20580077460540222, 0.20624162173809601, 0.20653318760510517, 0.20672571231987483, 0.20685270375749343, 0.20693640994700666, 0.20699155920957826, 0.20702788285184193, 0.20705180233624002, 0.20706755147368336, 0.2070779201637584, 0.20708474616088937, 0.20708923973496823, 0.2070921977945294, 0.2070941450136128, 0.20709542680703155, 0.20709627056557095, 0.20709682597889378, 0.20709719158470444, 0.2070974322475127]
    eight1=[0.2070975906654174, 0.2070976949449924, 0.20709776358761348, 0.207097808772017, 0.2070978385148789, 0.20709785809327264, 0.20709787098086335, 0.2070978794641832]
    append!(eight, eight1)

    nine=[0.1, 0.115851475971, 0.13156550607004705, 0.14624704615536202, 0.15916003380840163, 0.16988914987162199, 0.1783699523412305, 0.18480393722628988, 0.18953094611092403, 0.1929211788567833, 0.19531037398082404, 0.19697319092860063, 0.19812036687646978, 0.19890700560478858, 0.19944416558384806, 0.19980991885806917, 0.20005847501172783, 0.20022716282175929, 0.2003415430367318, 0.2004190520483451, 0.20047155373169107, 0.20050710639394645, 0.20053117707112636, 0.2005474718503369, 0.2005585017290056, 0.20056596737375149, 0.20057102034157723, 0.2005744402461034, 0.20057675483294293, 0.20057832132275608, 0.20057938149894072, 0.20058009900576712, 0.20058058459870373]
    nine1=[0.20058091323650634, 0.20058113565042113, 0.200581286174477, 0.20058138804521414, 0.2005814569886188, 0.20058150364766983, 0.20058153522525843, 0.20058155659612456]
    append!(nine, nine1)

    ten=[0.1, 0.11420438451600452, 0.12819285489474766, 0.14128173054357301, 0.1529092425529273, 0.16274219365914602, 0.1707007728222127, 0.1769086839043815, 0.18160935066069586, 0.18508781269051477, 0.18761771167002622, 0.18943444224487124, 0.19072707147602325, 0.19164074572520348, 0.19228354348769575, 0.1927342789752296, 0.19304960542408942, 0.19326984345232584, 0.19342349257988925, 0.19353060082822074, 0.19360522424626114, 0.1936571950787745, 0.19369337998065608, 0.1937185691462277, 0.19373610163346383, 0.19374830371323729, 0.19375679545448699, 0.1937627048158642, 0.19376681698582685, 0.19376967847638257, 0.19377166964090667, 0.19377305517589155, 0.19377401928176635]
    ten1=[0.1937746901384981, 0.1937751569411742, 0.1937754817560123, 0.1937757077711988, 0.19377586503868016, 0.19377597446954486, 0.19377605061438513, 0.1937761035979179]
    append!(ten, ten1)

    eleven=[0.1, 0.1125948629333623, 0.12491286905745537, 0.13644527372709983, 0.14677665160336598, 0.15565152169376248, 0.16299175570367272, 0.16886811826170206, 0.17344779010762595, 0.17694122322146047, 0.1795621043735732, 0.18150367638549272, 0.1829284805326352, 0.18396678330696783, 0.1847195695478547, 0.18526332434929738, 0.1856550338021541, 0.18593666465039624, 0.18613886793138532, 0.1862838983439348, 0.18638784636965558, 0.18646231072636188, 0.18651563432171545, 0.18655380896010348, 0.18658113317899047, 0.18660068833972626, 0.18661468204294582, 0.1866246952595285, 0.18663185987466088, 0.18663698608704996, 0.18664065374834607, 0.18664327780919143, 0.1866451551922193]
    eleven1=[0.18664649835240493, 0.18664745930025028, 0.18664814679558606, 0.1866486386518308, 0.18664899054074507, 0.18664924229231195, 0.18664942240250637, 0.1866495512582864]
    append!(eleven, eleven1)

    twelve=[0.1, 0.11102195828516129, 0.12172443326995391, 0.13174134647117447, 0.14077735073937772, 0.14864666020614672, 0.15528342579631188, 0.16072561374353544, 0.16508359319211843, 0.16850616558173181, 0.17115265305568783, 0.17317425825283536, 0.17470407628646356, 0.17585347185989572, 0.17671237926966027, 0.17735160957782828, 0.17782590614911697, 0.17817703141941085, 0.1784365371960098, 0.17862809235800273, 0.17876936013196573, 0.17887347168521253, 0.17895016162462354, 0.17900663170856115, 0.17904820180606734, 0.17907879728044374, 0.17910131216341169, 0.1791178788385107, 0.17913006779556537, 0.17913903531605457, 0.1791456325145054, 0.17915048576814166, 0.17915405599928874]
    twelve1=[0.1791566823471238, 0.17915861432740474, 0.1791600355075132, 0.17916108093180072, 0.17916184994515394, 0.1791624156287442, 0.17916283174252431, 0.17916313783294405]
    append!(twelve, twelve1)

    thirteen=[0.1, 0.10948473313134736, 0.11862624417991925, 0.12717266411727157, 0.13492459405774887, 0.14175566188834274, 0.14761743463675223, 0.1525300861383595, 0.15656434126096838, 0.1598211021877797, 0.16241352838917972, 0.1644538617509293, 0.16604525160748762, 0.16727770145424506, 0.16822690405592744, 0.1689548323784632, 0.16951123158373674, 0.16993544733084268, 0.17025825837091466, 0.17050354320197383, 0.17068971188797366, 0.17083089185278047, 0.17093788576974436, 0.1710189319350036, 0.17108030032362745, 0.1711267555861966, 0.1711619142778536, 0.1711885191108911, 0.1712086487240413, 0.17122387768451963, 0.17123539827607756, 0.17124411305490506, 0.17125070510671553]
    thirteen1=[0.1712556913301276, 0.17125946281985072, 0.17126231545752837, 0.171264473075868, 0.1712661049938691, 0.1712673392884046, 0.17126827283673626, 0.1712689789151951]
    append!(thirteen, thirteen1)

    fourteen=[0.1, 0.10798226649775591, 0.11561683585341048, 0.12274104571904985, 0.12922971238779135, 0.13500449694304975, 0.14003525372344544, 0.14433439071929016, 0.14794685017247441, 0.150938661313949, 0.15338639171657267, 0.15536880321033864, 0.15696108809254533, 0.15823145018558799, 0.1592395136653718, 0.16003599547633013, 0.1606631548745033, 0.16115565453666425, 0.16154158535571195, 0.16184350197204794, 0.1620793844598134, 0.16226348682203037, 0.16240706067015453, 0.16251895806234334, 0.16260612523798365, 0.16267400199087378, 0.1627268417304036, 0.16276796619307857, 0.16279996707348368, 0.16282486498992998, 0.16284423442345902, 0.16285930167844162, 0.16287102154886235]
    fourteen1=[0.16288013723311928, 0.16288722710628858, 0.16289274120101907, 0.16289702964291006, 0.1629003648031918, 0.16290295854994832, 0.16290497567819626, 0.16290654436282073]
    append!(fourteen, fourteen1)

    fifteen=[0.1, 0.10651365467834124, 0.11269460366890591, 0.11844748101650307, 0.12370208377845411, 0.1284165559829222, 0.1325768820864998, 0.13619336981890065, 0.13929528085514428, 0.1419248331850308, 0.14413155516929804, 0.14596759278876334, 0.14748420867634043, 0.14872944600475516, 0.1497467798014228, 0.15057452216378367, 0.15124575287880115, 0.15178858289458405, 0.152226603796296, 0.15257941984904744, 0.15286319496393735, 0.15309117389536664, 0.15327415591650412, 0.1534209117430269, 0.15353854225349012, 0.15363278202421476, 0.1537082529737902, 0.15376867430511687, 0.15381703500251145, 0.15385573475470357, 0.1538866985700638, 0.15391146966830435, 0.15393128455776847]
    fifteen1=[0.1539471335818495, 0.15395980966217748, 0.1539699474853743, 0.15397805497244937, 0.15398453852867228, 0.15398972328881644, 0.15399386934096973, 0.15399718472176468]
    append!(fifteen, fifteen1)

    sixteen=[0.1, 0.10507801188742776, 0.10985782653516928, 0.11429220254727966, 0.11834915623137218, 0.12201228258562515, 0.12527966137854726, 0.12816171684685157, 0.13067848860864054, 0.13285674955891166, 0.13472731051294934, 0.13632272605440485, 0.13767549762366013, 0.13881677883212898, 0.13977553017787234, 0.14057804206383412, 0.1412477383528086, 0.14180517929542183, 0.1422681957633317, 0.14265210166660527, 0.14296994551546044, 0.14323277401823567, 0.14344989001400452, 0.14362909405636076, 0.14377690395568757, 0.14389874997697855, 0.14399914557803303, 0.14408183489646184, 0.14414991891811696, 0.14420596258505147, 0.1442520851706435, 0.1442900361657291, 0.14432125874955964]
    sixteen1=[0.14434694270885937, 0.14436806844635738, 0.14438544350286026, 0.144399732814975, 0.1444114837483193, 0.14442114678475088, 0.14442909260253445, 0.14443562616737146]
    append!(sixteen, sixteen1)

    seventeen=[0.1, 0.10367447077690561, 0.10710468739043556, 0.11027476047943588, 0.11317651506985875, 0.1158089421157731, 0.1181772770032002, 0.12029185043071686, 0.12216685260181435, 0.12381912836821043, 0.12526708804477868, 0.12652978431579406, 0.12762617569605442, 0.12857457429767358, 0.1293922607599208, 0.1300952412095058, 0.13069811842347176, 0.13121405024616353, 0.13165477126893432, 0.13203065768088376, 0.13235081927238737, 0.13262320636151795, 0.13285472268651796, 0.13305133798936403, 0.1332181961227174, 0.13335971610829317, 0.13347968474449418, 0.13358134018782078, 0.13366744649559326, 0.1337403594820109, 0.13380208445884284, 0.1338543265492357, 0.13389853430884918]
    seventeen1=[0.1339359373875727, 0.133967578934376, 0.133994343399527, 0.13401698033127996, 0.13403612470374035, 0.134052314252735, 0.13406600423952225, 0.13407758000927947]
    append!(seventeen, seventeen1)

    eighteen=[0.1, 0.10230218283213122, 0.10443329197710133, 0.10639409808019792, 0.10818798634614772, 0.1098205230577939, 0.11129900030302906, 0.11263198886780044, 0.11382892219785042, 0.11489972687691534, 0.11585450816612923, 0.11670329338510226, 0.11745583154344107, 0.11812144465291542, 0.11870892440073755, 0.11922646710116365, 0.11968163980252575, 0.12008137086923108, 0.12043195908245899, 0.12073909615805387, 0.12100789845692983, 0.12124294449401192, 0.12144831559741207, 0.1216276377107819, 0.12178412286740842, 0.12192060929838601, 0.12203959948092784, 0.12214329569796785, 0.12223363288088818, 0.12231230865423778, 0.12238081060680768, 0.12244044088526598, 0.12249233825413898]
    eighteen1=[0.12253749779350247, 0.12257678842022136, 0.12261096842289013, 0.12264069919746777, 0.12266655736360182, 0.12268904543079012, 0.12270860117188637, 0.12272560584822508]
    append!(eighteen, eighteen1)

    nineteen=[0.1, 0.1009603186590173, 0.10184168591696965, 0.10264862608543344, 0.10338576741977762, 0.10405775862320811, 0.10466919899463223, 0.10522458168631678, 0.10572824913415686, 0.10618435946739088, 0.10659686256988614, 0.1069694844274436, 0.10730571842782599, 0.10760882236334636, 0.10788181999780465, 0.10812750618986654, 0.10834845469822493, 0.1085470279264086, 0.10872538798807224, 0.10888550858654032, 0.1090291873021912, 0.10915805796779705, 0.1092736028861364, 0.1093771647061322, 0.10946995782495215, 0.10955307922528844, 0.10962751869010193, 0.10969416836388164, 0.10975383164945322, 0.10980723144498668, 0.10985501773729875, 0.10989777457577918, 0.1099360264567675]
    nineteen1=[0.1099702441517414, 0.11000085001481372, 0.11002822280569116, 0.11005270206389824, 0.11007459206960436, 0.11009416542474489, 0.11011166628671534, 0.11012731328496894]
    append!(nineteen, nineteen1)

    twenty=[0.1, 0.09964806817423277, 0.09932787013571209, 0.09903629457993966, 0.09877057615969041, 0.09852825041442315, 0.09830711561336286, 0.09810520028773148, 0.09792073547203038, 0.09775213086405314, 0.09759795426312612, 0.09745691376447728, 0.09732784228138373, 0.09720968404257616, 0.09710148277284669, 0.0970023713136368, 0.0969115624809601, 0.09682834098987146, 0.0967520563021696, 0.09668211627556454, 0.09661798151131384, 0.09655916031205102, 0.09650520417475687, 0.09645570375396877, 0.09641028523964369, 0.09636860710137118, 0.09633035715739746, 0.09629524993177856, 0.09626302426831942, 0.09623344117325884, 0.09620628186264671, 0.09618134599282673, 0.09615845005518643]
    twenty1=[0.09613742591859314, 0.09611811950466002, 0.09610038958268605, 0.09608410667270895, 0.09606915204619236, 0.09605541681502323, 0.09604280110053345, 0.0960312132751201]
    append!(twenty, twenty1)

    twentyone=[0.1, 0.09836464070921244, 0.09688981470375178, 0.09555466132698166, 0.09434181097846696, 0.09323667259153622, 0.0922268906335283, 0.09130192604189982, 0.0904527290707225, 0.08967148118993618, 0.08895138948709277, 0.088286521427557, 0.08767167095349707, 0.08710224914680853, 0.08657419431344168, 0.08608389754788158, 0.08562814072995159, 0.08520404457657876, 0.08480902488010403, 0.0844407554530274, 0.08409713659932452, 0.08377626816478789, 0.08347642640157488, 0.0831960440251433, 0.08293369295598145, 0.08268806932915157, 0.08245798042746123, 0.08224233325299754, 0.08204012449937612, 0.08185043172585035, 0.081672405566396, 0.08150526283293436, 0.08134828039349475]
    twentyone1=[0.08120078972424238, 0.0810621720490251, 0.08093185399269505, 0.08080930368495633, 0.08069402726035502, 0.08058556570735403, 0.08048349202593207, 0.08038740865843572]
    append!(twentyone, twentyone1)

    big=[one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen];

        actualArray::Vector{Float64}=[];

        for i=1:length(big)
            append!(actualArray, big[i][length(big[i])])
        end
        fittingLinear(hs, (actualArray).^2)

        display(plot(hs, (actualArray).^2, title="Plot of (Magnetization)^2 after 40 iterations at J2=0.46 vs. h", xaxis="h", yaxis="(Magnetization)^2"));
end


function getGcFromIterationsJ2082()
    hs=[0.6, 0.615, 0.63, 0.645, 0.66, 0.675, 0.6900000000000001, 0.7050000000000001, 0.7200000000000001]
    one=[0.1, 0.21012511926899577, 0.3091433496754294, 0.350007140230486, 0.3611589670295157, 0.3638279842081431, 0.3644460487141704, 0.3645880717103696, 0.36462064861373017, 0.36462811797270694, 0.36462983041577846, 0.3646302230060997, 0.3646303130099435, 0.3646303336438682, 0.3646303383743001, 0.3646303394587715, 0.3646303397074056, 0.36463033976442155, 0.36463033977749904, 0.3646303397804923, 0.3646303397811771, 0.3646303397813493, 0.3646303397813884, 0.36463033978139525, 0.36463033978139636, 0.36463033978139653, 0.36463033978139614, 0.3646303397813965, 0.3646303397813966, 0.36463033978139653, 0.3646303397813961, 0.36463033978139636, 0.36463033978139636]
    one1=[0.3646303397813965, 0.36463033978139664, 0.3646303397813966, 0.36463033978139625, 0.3646303397813962, 0.3646303397813963, 0.36463033978139625, 0.3646303397813965]
    append!(one, one1)
    two=[0.1, 0.19120874413714342, 0.2811714144342241, 0.3275324574905935, 0.3433119643764789, 0.3478705749562843, 0.3491229115038149, 0.3494621415420835, 0.3495536797508342, 0.3495783549438507, 0.34958500457214353, 0.3495867964214293, 0.3495872792542622, 0.3495874093579564, 0.3495874444155872, 0.3495874538621074, 0.34958745640758154, 0.34958745709347677, 0.34958745727830576, 0.34958745732812, 0.34958745734156366, 0.34958745734518715, 0.34958745734615704, 0.349587457346421, 0.3495874573464942, 0.34958745734651153, 0.34958745734651664, 0.3495874573465204, 0.34958745734652197, 0.3495874573465218, 0.3495874573465218, 0.3495874573465219, 0.3495874573465222]
    two1=[0.34958745734652186, 0.34958745734652247, 0.3495874573465221, 0.3495874573465216, 0.3495874573465217, 0.3495874573465218, 0.349587457346522, 0.34958745734652236]
    append!(two, two1)
    three=[0.1, 0.1741971180024718, 0.2519422971974491, 0.30082300109225535, 0.3216866139696164, 0.32904769421790553, 0.33146417466485145, 0.3322384005245193, 0.33248451597662243, 0.3325625568134415, 0.33258728313907865, 0.33259511541161624, 0.33259759615206186, 0.33259838186497376, 0.3325986307180325, 0.33259870953518655, 0.332598734498272, 0.3325987424046354, 0.33259874490874586, 0.33259874570185916, 0.33259874595304445, 0.33259874603258943, 0.33259874605779843, 0.33259874606578715, 0.3325987460683198, 0.33259874606911594, 0.3325987460693704, 0.33259874606945655, 0.33259874606948353, 0.33259874606948975, 0.33259874606949413, 0.3325987460694957, 0.3325987460694954]
    three1=[0.33259874606949585, 0.33259874606949663, 0.3325987460694962, 0.3325987460694967, 0.33259874606949663, 0.33259874606949663, 0.33259874606949635, 0.3325987460694967]
    append!(three, three1)
    four=[0.1, 0.15908766507386218, 0.22292739470764386, 0.2702405296548176, 0.2954146676546214, 0.3063723124391873, 0.31071222745199517, 0.31236575819460327, 0.3129863909200728, 0.3132180237877666, 0.3133042911988484, 0.313336394584153, 0.31334833796819744, 0.3133527807657444, 0.31335443336671887, 0.3133550480804554, 0.3133552767326758, 0.313355361783211, 0.3133553934189505, 0.313355405186309, 0.31335540956334534, 0.3133554111914262, 0.3133554117970247, 0.31335541202228856, 0.31335541210609336, 0.3133554121372668, 0.3133554121488486, 0.31335541215313556, 0.31335541215473267, 0.3133554121553208, 0.31335541215554646, 0.3133554121556327, 0.3133554121556618]
    four1=[0.31335541215567436, 0.31335541215568047, 0.3133554121556821, 0.3133554121556831, 0.31335541215568286, 0.31335541215568236, 0.31335541215568236, 0.3133554121556822]
    append!(four, four1)
    five=[0.1, 0.14576630949554173, 0.19548158401368237, 0.23713219349501094, 0.26415400848464393, 0.27869515893739594, 0.2857125318089163, 0.28891790439719434, 0.2903449364805667, 0.29097295745454393, 0.2912479350923502, 0.2913680640847368, 0.29142049324943886, 0.2914433656805912, 0.2914533420078233, 0.2914576930540811, 0.2914595906393191, 0.2914604182044094, 0.29146077911539386, 0.2914609365124928, 0.2914610051549726, 0.291461035090614, 0.291461048145848, 0.29146105383935406, 0.2914610563223679, 0.29146105740522277, 0.29146105787747006, 0.29146105808338524, 0.29146105817320306, 0.2914610582124015, 0.29146105822948126, 0.29146105823693996, 0.29146105824017104]
    five1=[0.29146105824160545, 0.2914610582422199, 0.2914610582424804, 0.29146105824259333, 0.2914610582426426, 0.29146105824266616, 0.29146105824267565, 0.29146105824267954]
    append!(five, five1)
    six=[0.1, 0.13406211956008765, 0.17054235284349706, 0.20362657338306167, 0.22880782929118385, 0.24531835192250181, 0.25505678111226493, 0.26043565004378144, 0.26329753472293976, 0.26478972784489924, 0.26555952114992465, 0.26595445702972703, 0.26615650126886053, 0.2662597144083673, 0.2663124010806217, 0.26633928556741066, 0.2663530012878486, 0.26635999797709714, 0.26636356696157504, 0.2663653874401169, 0.2663663160231868, 0.2663667896683173, 0.2663670312610471, 0.2663671544903511, 0.2663672173459127, 0.266367249406579, 0.2663672657597826, 0.2663672741010576, 0.2663672783556863, 0.2663672805258326, 0.2663672816327709, 0.26636728219740285, 0.26636728248541086]
    six1=[0.2663672826322971, 0.2663672827072085, 0.2663672827454074, 0.2663672827649018, 0.2663672827748386, 0.26636728277990956, 0.2663672827824985, 0.2663672827838293]
    append!(six, six1)
    seven=[0.1, 0.12378523017940773, 0.14854863544586866, 0.17193385587536283, 0.1918189511090939, 0.2071396903162704, 0.2180149069361564, 0.22527464728020116, 0.22991897694602337, 0.23280839201374304, 0.2345746006726111, 0.235642547996984, 0.23628402979989538, 0.2366678137688868, 0.23689687462969972, 0.23703339403078563, 0.23711468975807284, 0.2371630758508867, 0.23719186588009644, 0.2372089930470567, 0.23721918089548436, 0.23722524060447528, 0.23722884476906486, 0.23723098838846843, 0.23723226331433533, 0.23723302157531334, 0.2372334725482091, 0.23723374076187514, 0.2372339002802641, 0.2372339951527087, 0.23723405157740385, 0.2372340851355693, 0.23723410509400578]
    seven1=[0.23723411696414465, 0.23723412402380414, 0.23723412822250076, 0.23723413071963534, 0.23723413220478282, 0.2372341330880781, 0.2372341336133765, 0.23723413392581216]
    append!(seven, seven1)
    eight=[0.1, 0.11474946510022754, 0.1295363589699394, 0.14363520374380118, 0.15638846132691608, 0.1673446541929144, 0.17632257610960822, 0.1833857303729158, 0.18876033278742796, 0.19274461351759828, 0.1956403502384698, 0.197714415586632, 0.19918431942984094, 0.200218202270852, 0.200941522679356, 0.2014456711486912, 0.20179613706849966, 0.2020393232243253, 0.20220785431021865, 0.2023245455824178, 0.20240529353107137, 0.20246114582376631, 0.20249976681970605, 0.20252646723799317, 0.20254492384670295, 0.20255768070538233, 0.20256649741524313, 0.2025725906693369, 0.20257680160067465, 0.2025797116305602, 0.2025817226214904, 0.2025831123123327, 0.20258407264815037]
    eight1=[0.2025847362779215, 0.2025851948705567, 0.20258551177422993, 0.20258573076545458, 0.2025858820956734, 0.20258598666981686, 0.20258605893392861, 0.20258610887075418]
    append!(eight, eight1)
    nine=[0.1, 0.106783892939462, 0.11329407862433281, 0.11942358470288264, 0.12508669361007727, 0.13022429737488542, 0.13480564805024098, 0.1388266688148332, 0.14230568736647847, 0.14527777899711192, 0.14778885617086654, 0.14989034537055937, 0.151634917211528, 0.15307340782496417, 0.15425284631415923, 0.15521538781621227, 0.1559979187220035, 0.15663211756987988, 0.1571447950880041, 0.15755838201642783, 0.1578914741466426, 0.158159376689478, 0.1583746141729923, 0.15854738870789203, 0.15868598027369424, 0.1587970892620016, 0.15888612518990913, 0.15895744726938507, 0.15901456310995155, 0.1590602917307334, 0.15909689658735288, 0.1591261936800295, 0.15914963912461003]
    nine1=[0.15916839990530934, 0.159183410922359, 0.15919542091513533, 0.15920502938210504, 0.15921271623267558, 0.15921886558190873, 0.15922378483295138, 0.15922771997214535]
    append!(nine, nine1)
    big=[one, two, three, four, five, six, seven, eight, nine];

            actualArray::Vector{Float64}=[];

            for i=1:length(big)
                append!(actualArray, big[i][length(big[i])])
            end
            fittingLinear(hs, (actualArray).^2)

            display(plot(hs, (actualArray).^2, title="Plot of (Magnetization)^2 after 40 iterations at J2=0.82 vs. h", xaxis="h", yaxis="(Magnetization)^2"));
end


function getHcFromIterationsJ2064()
    hs=[0.8, 0.81, 0.8200000000000001, 0.8300000000000001, 0.8400000000000001, 0.8500000000000001, 0.8600000000000001, 0.8700000000000001, 0.8800000000000001, 0.8900000000000001, 0.9000000000000001, 0.9100000000000001, 0.9200000000000002, 0.9300000000000002, 0.9400000000000002]

    one=[0.1, 0.20184970582843906, 0.2906454766787166, 0.3299539217446581, 0.3421544081504658, 0.3455029622509917, 0.3463902689496547, 0.3466231842058962, 0.34668417222330916, 0.34670013133437216, 0.34670430674278574, 0.3467053991131151, 0.34670568489570713, 0.3467057596610539, 0.34670577922082574, 0.3467057843380033, 0.3467057856767208, 0.34670578602696406, 0.346705786118583, 0.34670578614257136, 0.34670578614884184, 0.34670578615049497, 0.3467057861509317, 0.34670578615104275, 0.3467057861510757, 0.3467057861510858, 0.34670578615108527, 0.34670578615108527, 0.3467057861510856, 0.3467057861510848, 0.34670578615108516, 0.3467057861510855, 0.3467057861510851]
    one1=[0.34670578615108555, 0.34670578615108544, 0.34670578615108516, 0.34670578615108527, 0.34670578615108505, 0.34670578615108516, 0.34670578615108527, 0.3467057861510852]
    append!(one, one1)
    two=[0.1, 0.19322188401714382, 0.2782970808213997, 0.3197219646678831, 0.33382692235045835, 0.33801988799259364, 0.3392148517042169, 0.33955128196455775, 0.3396456748239371, 0.3396721331855846, 0.3396795474643565, 0.33968162496826093, 0.33968220707889496, 0.33968237018361286, 0.3396824158847802, 0.339682428689951, 0.3396824322779755, 0.3396824332832627, 0.33968243356497035, 0.3396824336438885, 0.33968243366602435, 0.3396824336722041, 0.3396824336739334, 0.33968243367441625, 0.339682433674548, 0.339682433674588, 0.339682433674597, 0.33968243367459744, 0.339682433674598, 0.33968243367459816, 0.3396824336745978, 0.3396824336745979, 0.3396824336745982]
    two1=[0.33968243367459844, 0.3396824336745979, 0.3396824336745981, 0.3396824336745982, 0.3396824336745982, 0.3396824336745988, 0.3396824336745988, 0.3396824336745979]
    append!(two, two1)
    three=[0.1, 0.1849607301935974, 0.26560064581996945, 0.3086682964292445, 0.3247884991754334, 0.3299921697147042, 0.3315898526899906, 0.33207277862227763, 0.33221805908018703, 0.332261701840086, 0.3322748066393673, 0.3322787411654794, 0.33227992240408116, 0.33228027703598423, 0.3322803835033086, 0.3322804154668133, 0.33228042506289684, 0.33228042794381485, 0.332280428808728, 0.3322804290683984, 0.3322804291463482, 0.332280429169753, 0.33228042917678025, 0.33228042917887063, 0.3322804291794926, 0.3322804291796753, 0.3322804291797364, 0.33228042917975464, 0.33228042917976025, 0.3322804291797603, 0.33228042917976064, 0.33228042917976003, 0.3322804291797598]
    three1=[0.3322804291797599, 0.3322804291797603, 0.33228042917976003, 0.3322804291797601, 0.3322804291797607, 0.3322804291797593, 0.33228042917976053, 0.33228042917975914]
    append!(three, three1)

    four=[0.1, 0.17707982708565614, 0.2526702344970489, 0.2967752186118485, 0.3149490394287311, 0.32133685051070243, 0.3234538810816347, 0.32414170534903286, 0.3243637331732655, 0.3244352527496223, 0.32445827503145674, 0.3244656843301767, 0.32446806870963857, 0.3244688360071992, 0.3244690829231421, 0.32446916238037365, 0.3244691879495549, 0.3244691961776948, 0.32446919882551767, 0.32446919967757093, 0.32446919995176854, 0.324469200039996, 0.32446920006839675, 0.3244692000775329, 0.3244692000804756, 0.3244692000814284, 0.3244692000817344, 0.32446920008183755, 0.32446920008186875, 0.3244692000818828, 0.32446920008188546, 0.32446920008188596, 0.3244692000818856]
    four1=[0.3244692000818857, 0.3244692000818858, 0.3244692000818857, 0.3244692000818858, 0.3244692000818857, 0.3244692000818856, 0.3244692000818858, 0.3244692000818859]
    append!(four, four1)

    five=[0.1, 0.16958509755515913, 0.23963346655812426, 0.2840555318793986, 0.30421832750891087, 0.3119557926219685, 0.31472998900208515, 0.3157001844425489, 0.31603651594152066, 0.3161527544327447, 0.316192884851148, 0.31620673450743425, 0.3162115136460206, 0.3162131627247136, 0.31621373174355455, 0.3162139280839476, 0.3162139958312182, 0.3162140192073893, 0.3162140272733298, 0.3162140300565172, 0.31621403101680123, 0.31621403134818327, 0.316214031462537, 0.3162140315019589, 0.3162140315156086, 0.316214031520319, 0.3162140315219421, 0.3162140315224928, 0.3162140315226892, 0.316214031522762, 0.3162140315227844, 0.3162140315227903, 0.31621403152279093]
    five1=[0.3162140315227909, 0.31621403152279104, 0.31621403152279076, 0.3162140315227909, 0.3162140315227914, 0.3162140315227909, 0.3162140315227909, 0.3162140315227906]
    append!(five, five1)
    six=[0.1, 0.1624759970173908, 0.22662455028520545, 0.2705608572291307, 0.29251516456334464, 0.30173647067450354, 0.305322179853327, 0.3066742622555023, 0.3071781623124251, 0.3073651368749707, 0.30743440181402876, 0.30746004560731793, 0.3074695375261627, 0.30747305062067265, 0.30747435082725016, 0.3074748320320793, 0.3074750101246157, 0.307475076036068, 0.30747510042965054, 0.3074751094576202, 0.30747511279882866, 0.3074751140353997, 0.30747511449304354, 0.30747511466241984, 0.30747511472508826, 0.3074751147482765, 0.3074751147568872, 0.3074751147600509, 0.30747511476122996, 0.3074751147616585, 0.30747511476182704, 0.3074751147618868, 0.30747511476190365]
    six1=[0.3074751147619096, 0.30747511476191347, 0.3074751147619151, 0.3074751147619163, 0.3074751147619163, 0.30747511476191647, 0.30747511476191675, 0.30747511476191686]
    append!(six, six1)
    seven=[0.1, 0.15574673185604349, 0.21377638580504918, 0.25638755850979555, 0.2797806040423022, 0.2905562007836879, 0.2951125829372153, 0.29696879630234485, 0.29771346925478304, 0.29801037159544036, 0.29812845451325143, 0.29817537178997433, 0.29819400589376566, 0.29820140563778824, 0.2982043439508285, 0.29820551067656126, 0.2982059739477262, 0.2982061578978556, 0.29820623093841125, 0.29820625994043987, 0.29820627145619244, 0.2982062760287257, 0.2982062778443006, 0.29820627856522774, 0.2982062788514755, 0.29820627896512614, 0.29820627901024543, 0.2982062790281863, 0.2982062790352999, 0.2982062790381325, 0.2982062790392435, 0.298206279039688, 0.29820627903987124]
    seven1=[0.2982062790399411, 0.29820627903996644, 0.2982062790399775, 0.29820627903998037, 0.29820627903998015, 0.2982062790399804, 0.2982062790399801, 0.29820627903998026]
    append!(seven, seven1)
    eight=[0.1, 0.14938741948945317, 0.20121288769392404, 0.24167817772202538, 0.2659948925836206, 0.27829189062854603, 0.2839609615995698, 0.28646193346992954, 0.2875437289575181, 0.2880076602635622, 0.28820588543694053, 0.2882904479703768, 0.28832649789682246, 0.28834186195470524, 0.2883484091346318, 0.28835119897874767, 0.28835238774351934, 0.2883528942766226, 0.2883531101096668, 0.2883532020756904, 0.28835324126218304, 0.2883532579594236, 0.2883532650741071, 0.2883532681056529, 0.28835326939737244, 0.28835326994777577, 0.2883532701822908, 0.28835327028221097, 0.2883532703247813, 0.2883532703429296, 0.2883532703506664, 0.2883532703539634, 0.28835327035535574]
    eight1=[0.28835327035594627, 0.28835327035620656, 0.28835327035630504, 0.28835327035634584, 0.28835327035636776, 0.28835327035637515, 0.2883532703563769, 0.288353270356377]
    append!(eight, eight1)
    nine=[0.1, 0.14338513671290248, 0.1890426014127102, 0.2266167077198552, 0.25119610414466753, 0.2648374748484965, 0.2717094278462749, 0.27500073981092066, 0.27653876591450244, 0.27724918947148985, 0.27757557656491083, 0.27772515617943233, 0.2777936289980828, 0.27782495737818597, 0.27783928764326343, 0.27784584189601047, 0.27784883947403816, 0.27785021038080704, 0.27785083734220517, 0.2778511240712019, 0.27785125520105913, 0.27785131517061445, 0.2778513425964799, 0.277851355139128, 0.27785136087525725, 0.27785136349851886, 0.2778513646982205, 0.2778513652468875, 0.27785136549781175, 0.2778513656125583, 0.2778513656650593, 0.277851365689059, 0.27785136570003366]
    nine1=[0.2778513657050625, 0.27785136570735286, 0.2778513657084141, 0.277851365708891, 0.27785136570910635, 0.2778513657092068, 0.2778513657092556, 0.2778513657092803]
    append!(nine, nine1)
    ten=[0.1, 0.13772482862346733, 0.17735434675068534, 0.21141724028117598, 0.2354963909186348, 0.2501301753809859, 0.2581965694934267, 0.26240137894590004, 0.26452903653303617, 0.2655893915028549, 0.26611382456770355, 0.2663722211673364, 0.26649930003089306, 0.2665617397759092, 0.26659240547991797, 0.266607462828033, 0.26661485542057833, 0.26661848471195154, 0.26662026641578923, 0.26662114108450224, 0.26662157047152346, 0.2666217812629167, 0.26662188474287996, 0.2666219355423605, 0.26662196048038744, 0.2666219727227387, 0.266621978732666, 0.26662198168298135, 0.2666219831313213, 0.2666219838423304, 0.26662198419136923, 0.26662198436272794, 0.26662198444683083]
    ten1=[0.26662198448814, 0.2666219845084144, 0.2666219845183675, 0.26662198452325764, 0.2666219845256455, 0.26662198452682095, 0.2666219845273998, 0.2666219845276653]
    append!(ten, ten1)
    eleven=[0.1, 0.13239006967413855, 0.1662151506620767, 0.19630729718546822, 0.21909013441564, 0.2341837939692605, 0.24328577162438506, 0.2484599507473614, 0.2513019132340997, 0.25283328838885577, 0.253649928849259, 0.25408300383771315, 0.25431199076070116, 0.25443287737770764, 0.25449664299099545, 0.25453026357950387, 0.25454798604438084, 0.25455732697710404, 0.2545622499629411, 0.2545648444546765, 0.25456621176873356, 0.25456693234544925, 0.25456731208863975, 0.2545675122124006, 0.25456761767697333, 0.2545676732564357, 0.2545677025466226, 0.254567717982429, 0.25456772611705203, 0.25456773040396297, 0.25456773266315735, 0.2545677338537335, 0.2545677344811608]
    eleven1=[0.2545677348118091, 0.25456773498605095, 0.2545677350778842, 0.25456773512628056, 0.25456773515179554, 0.2545677351652326, 0.2545677351723249, 0.2545677351760585]
    append!(eleven, eleven1)
    twelve=[0.1, 0.12736368147052546, 0.15567029291003626, 0.18150880289098797, 0.20224845814339326, 0.21712220168968668, 0.22691045827902562, 0.23298284113695525, 0.2366108795874784, 0.23872951247174912, 0.23995013939729146, 0.24064791557360765, 0.2410450180048976, 0.24127043097645792, 0.24139819967041234, 0.2414705619482654, 0.24151152547149946, 0.2415347083632123, 0.24154782652402065, 0.24155524887580915, 0.24155944829588408, 0.2415618241804513, 0.2415631683519915, 0.24156392881884445, 0.24156435905183687, 0.24156460245488937, 0.2415647401592138, 0.24156481806482027, 0.24156486213953912, 0.24156488707460277, 0.24156490118150653, 0.24156490916240564, 0.24156491367754013]
    twelve1=[0.24156491623198192, 0.241564917677129, 0.2415649184947414, 0.24156491895729357, 0.24156491921895573, 0.24156491936700691, 0.24156491945077502, 0.24156491949814593]
    append!(twelve, twelve1)
    thirteen=[0.1, 0.12262821982179471, 0.14574499284877768, 0.16722040916137904, 0.18529764468419813, 0.1992006948522677, 0.20913187326973554, 0.2158451862678439, 0.22021218617661026, 0.22298138097251388, 0.22470884670003874, 0.22577542115001278, 0.22642975062267878, 0.22682959701742658, 0.22707334655770436, 0.2272217199357388, 0.2273119558162885, 0.22736680446301513, 0.22740013242128027, 0.2274203795791938, 0.2274326784803488, 0.2274401487500609, 0.22744468593678308, 0.2274474415935268, 0.22744911521160296, 0.22745013165496905, 0.22745074897070572, 0.2274511238832104, 0.2274513515771786, 0.22745148986136496, 0.22745157384469897, 0.22745162484977458, 0.22745165582637777]
    thirteen1=[0.22745167463920368, 0.22745168606465216, 0.22745169300361656, 0.2274516972178094, 0.22745169977718294, 0.2274517013315607, 0.22745170227554193, 0.2274517028488651]
    append!(thirteen, thirteen1)
    fourteen=[0.1, 0.11816634752582901, 0.1364471479754023, 0.15360435757650168, 0.1685844732812884, 0.1808011095076105, 0.19019245900552553, 0.19707701760740512, 0.20194561212719853, 0.20530011754871394, 0.20756967630050957, 0.20908617988553319, 0.21009103563917098, 0.21075315966357594, 0.21118784224119572, 0.21147251816435192, 0.21165865733609046, 0.21178024017766794, 0.211859601893, 0.211911381253055, 0.21194515476914838, 0.2119671796543512, 0.21198154107511052, 0.21199090474707225, 0.21199700955737422, 0.21200098955939933, 0.21200358424486584, 0.21200527577533673, 0.21200637850945842, 0.2120070973939408, 0.21200756604075927, 0.2120078715547348, 0.21200807072098984]
    fourteen1=[0.21200820055842787, 0.21200828520001036, 0.21200834037820884, 0.21200837634907804, 0.21200839979862326, 0.2120084150854539, 0.21200842505100786, 0.21200843154757443]
    append!(fourteen, fourteen1)
    fifteen=[0.1, 0.11396111059826856, 0.1277705640058066, 0.14077955713573656, 0.15243677360665162, 0.16239305423085515, 0.17053602415314312, 0.17695403178077598, 0.1818622871171248, 0.1855282719328133, 0.1882176132440696, 0.19016429775494892, 0.1915597077590712, 0.1925529270838118, 0.1932563193144297, 0.19375267492489234, 0.1941020459211482, 0.19434751914662599, 0.19451977542905544, 0.19464054632787528, 0.1947251677539596, 0.19478443430966483, 0.19482593036781243, 0.19485497804583024, 0.19487530869223443, 0.1948895367488124, 0.19489949328389242, 0.19490646032948816, 0.1949113353172196, 0.19491474636277656, 0.1949171330411803, 0.19491880295843453, 0.19491997136040443]
    fifteen1=[0.19492078885896194, 0.19492136083770906, 0.19492176103256145, 0.19492204103527758, 0.19492223694335603, 0.1949223740132347, 0.19492246991604772, 0.19492253701573]
    append!(fifteen, fifteen1)

        big=[one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen];

            actualArray::Vector{Float64}=[];

            for i=1:length(big)
                append!(actualArray, big[i][length(big[i])])
            end
            fittingLinear(hs, (actualArray).^2)

            display(plot(hs, (actualArray).^2, title="Plot of (Magnetization)^2 after 40 iterations at J2=0.64 vs. h", xaxis="h", yaxis="(Magnetization)^2"));
end


function fittingLinear(xdata, ydata)
    #=
    model(t, p)=p[1]*t.+p[2];
    p0=[0.5, 0.5];
    fit = curve_fit(model, xdata, ydata, p0);
    #f(x)=fit[1,1]*x+fit[1, 2];
    println("fit: ", fit.param);
    =#
end

function getHcFromIterationsJ20()
one=[0.1, 0.10922093004283126, 0.11806860444664623, 0.12630836613835789, 0.13375930173631184, 0.14031127925591078, 0.14592732326832875, 0.15063338095859471, 0.15450085340397496, 0.15762765857792457, 0.16012191832571318, 0.1620901182322094, 0.16362983150210003, 0.16482615462552902, 0.1657507289914564, 0.16646233161786333, 0.16700827141178343, 0.16742608622019192, 0.16774524276685562, 0.16798868558960622, 0.16817417178033253, 0.16831538039373525, 0.16842281216351604, 0.16850450662375085, 0.16856660660439757, 0.1686137985502354, 0.1686496536750499, 0.16867689096358995, 0.16869757916681105, 0.168713291506541, 0.16872522391047354, 0.16873428523089534, 0.16874116600260608]
one1=[0.16874639079734619, 0.16875035806044614, 0.16875337040711383, 0.1687556576535144, 0.1687573943200461, 0.16875871293044165, 0.16875971411455404, 0.16876047428228325]
append!(one, one1)
two=[0.1, 0.1085526986935471, 0.11673228707440046, 0.12434495893500715, 0.13124305739238115, 0.13733712150811392, 0.1425970084194517, 0.14704376633471358, 0.15073611986217184, 0.15375569344379997, 0.15619399047960814, 0.1581426098062194, 0.15968691632677445, 0.1609026453897509, 0.1618546524496467, 0.16259704513855, 0.16317409118939363, 0.16362147763253876, 0.16396765361877297, 0.16423510559660914, 0.16444149150117113, 0.16460060854071962, 0.1647231961546333, 0.16481758920396242, 0.1648902418212761, 0.16494614316456352, 0.1649891448289384, 0.1650222171917137, 0.1650476492368863, 0.1650672038041363, 0.16508223790102186, 0.16509379576092165, 0.16510268071465306]
two1=[0.16510951063663187, 0.16511476068270164, 0.16511879621043837, 0.16512189812448133, 0.16512428238213997, 0.16512611500037577, 0.1651275235990714, 0.16512860627837192]
append!(two, two1)
three=[0.1, 0.10789117470172774, 0.1154130039177803, 0.12240796096537473, 0.1287577589720644, 0.1343914928006317, 0.1392857869656833, 0.143458309777257, 0.14695739678764977, 0.14985067759145654, 0.1522148702902449, 0.1541278791433647, 0.15566344866453855, 0.15688807646561345, 0.1578596523761468, 0.15862727099638202, 0.1592317528893066, 0.15970653096390872, 0.16007867231098546, 0.16036989564411083, 0.16059750837426906, 0.16077522916005094, 0.16091388713686386, 0.16102200312066242, 0.161106264946719, 0.1611719116170979, 0.1612230409971398, 0.16126285462347703, 0.1612938514832155, 0.16131798080228288, 0.16133676215278173, 0.16135137965129354, 0.16136275570565795]
three1=[0.16137160867069458, 0.16137849787552613, 0.1613838587596195, 0.16138803027257292, 0.1613912762305251, 0.16139380195541128, 0.16139576723535057, 0.16139729641699102]
append!(three, three1)
four=[0.1, 0.10723628086588569, 0.11411062361844722, 0.1204974691112545, 0.12630421842462008, 0.13147639506124625, 0.13599708439896704, 0.13988174030908934, 0.14317028099005838, 0.1459184600930361, 0.14819001969043777, 0.15005045745446013, 0.15156264440588785, 0.1527841355955405, 0.1537658270963191, 0.15455157271262362, 0.155178417313433, 0.15567717994751037, 0.15607319829311248, 0.15638711217968218, 0.15663561376312263, 0.1568321265169747, 0.1569873975743921, 0.1571100014396895, 0.15720676052279775, 0.15728309149950886, 0.15734328769137887, 0.15739074751083246, 0.15742815818229255, 0.15745764282201566, 0.15748087776868813, 0.15749918592479603, 0.15751361085447826]
four1=[0.1575249755066236, 0.15753392869223767, 0.1575409818318888, 0.1575465379867475, 0.15755091477897767, 0.15755436247869165, 0.1575570782710531, 0.15755921750693627]
append!(four, four1)
five=[0.1, 0.10658794063666543, 0.11282500992884184, 0.11861355050765969, 0.12388317433102294, 0.1285937220307553, 0.13273423556241754, 0.136318799018325, 0.1393805712038837, 0.14196533922256616, 0.14412560748130923, 0.14591580448876512, 0.14738880043101957, 0.14859365914382458, 0.14957440661837457, 0.15036955526423168, 0.15101214027136692, 0.15153006924106804, 0.15194663749359497, 0.15228110776479822, 0.1525492899368589, 0.15276408352290025, 0.15293596418976513, 0.15307340757051652, 0.15318325083037163, 0.15327099642185246, 0.1533410643379719, 0.1533969997552027, 0.1534416427965605, 0.1534772665933246, 0.15350568910259632, 0.1535283633763231, 0.15354645024841224]
five1=[0.153560876746834, 0.15357238295904693, 0.15358155958592698, 0.15358887800402102, 0.15359471431140354, 0.15359936854923403, 0.1536030800588337, 0.15360603974670442]
append!(five, five1)
six=[0.1, 0.10594607812766196, 0.11155602207507544, 0.11675624374388434, 0.12149529252290238, 0.1257452539472378, 0.12950046572486296, 0.1327742020144116, 0.13559421694821405, 0.1379980109347257, 0.1400284771693207, 0.14173031545069006, 0.14314735495487618, 0.1443207519672877, 0.1452879296607123, 0.1460820900900543, 0.14673213207155372, 0.1472628330964965, 0.14769518508411855, 0.14804680447125104, 0.14833236304379446, 0.14856400593399874, 0.1487517376877086, 0.14890376720348714, 0.14902680874373525, 0.1491263400967927, 0.1492068211173509, 0.14927187688559965, 0.14932445002841727, 0.1493669266287452, 0.14940123980750444, 0.14942895461552258, 0.14945133739931174]
six1=[0.14946941234461092, 0.1494840074796653, 0.14949579204560515, 0.14950530681683377, 0.1495129886767723, 0.14951919052187002, 0.14952419737141806, 0.1495282393998727]
append!(six, six1)
five=[0.1, 0.10531061812512128, 0.11030351510752955, 0.11492556008693773, 0.11914116703389245, 0.1229326532615926, 0.12629887316413402, 0.1292526037812767, 0.13181726390451867, 0.1340235073639256, 0.1359060974735091, 0.13750130503565794, 0.13884492363786213, 0.13997088719159886, 0.14091041016260802, 0.14169154343724435, 0.14233903671448261, 0.1428744106916326, 0.14331616078334852, 0.14368003334771312, 0.14397933254748727, 0.14422522990935402, 0.14442705923549473, 0.14459258715004422, 0.14472825479404594, 0.14483938959167494, 0.1449303881009303, 0.14500487213515295, 0.14506582090312672, 0.14511568208525205, 0.14515646469583182, 0.14518981638082795, 0.1452170875358342]
five1=[0.14523938434223307, 0.14525761253747965, 0.1452725134722044, 0.14528469376898887, 0.14529464968898023, 0.14530278713083572, 0.14530943803178517, 0.14531487380946037]
append!(five, five1)
six=[0.1, 0.1046814860966571, 0.10906734023917643, 0.11312148472012007, 0.11682132135533128, 0.12015746137705595, 0.12313241345798029, 0.12575856159339646, 0.12805579698417513, 0.13004912652772804, 0.13176649566466117, 0.133236966513482, 0.13448930629077935, 0.13555097750286793, 0.13644748240803273, 0.13720199613093179, 0.13783521962385523, 0.1383653895294754, 0.13880839222135408, 0.13917794069302195, 0.13948578366228037, 0.13974192535740318, 0.13995484169055306, 0.14013168398787973, 0.14027846538963037, 0.1404002277596989, 0.14050118874329495, 0.14058486973243792, 0.14065420614115495, 0.14071164170838235, 0.14075920864876637, 0.14079859543975987, 0.14083120392419998]
six1=[0.14085819725664206, 0.1408805400556028, 0.14089903195640313, 0.14091433559934663, 0.1409269999427401, 0.1409374796583676, 0.14094615125186807, 0.1409533264503787]
append!(six, six1)
seven=[0.1, 0.10405860819921728, 0.10784734517157545, 0.11134397798996093, 0.11453620996740656, 0.11742109639144847, 0.12000388564007179, 0.12229650162440175, 0.12431588234664394, 0.12608235480379837, 0.12761817466386602, 0.1289463047887003, 0.13008945983697967, 0.13106940967088296, 0.13190651273943488, 0.13261944010862883, 0.13322504840168006, 0.13373836264436662, 0.13417263544575356, 0.13453945534599684, 0.13484888343619836, 0.13510960291160662, 0.13532907082051898, 0.1355136648923593, 0.13566882106005335, 0.13579915927714672, 0.13590859661755597, 0.13600044757665739, 0.13607751208336677, 0.13614215208063177, 0.13619635770970176, 0.13624180419667395, 0.136279900529683]
seven1=[0.13631183095931063, 0.13633859027398532, 0.13636101370987316, 0.13637980225925106, 0.13639554404892082, 0.13640873237343681, 0.13641978088862375, 0.13642903640010745]
append!(seven, seven1)
eight=[0.1, 0.10344191128596732, 0.10664337440839652, 0.10959297665510208, 0.11228622011622909, 0.11472485180746608, 0.11691592033466376, 0.11887068731988075, 0.12060350966653262, 0.12213078407611676, 0.12347001560725034, 0.12463904357286676, 0.12565543450348318, 0.12653603485131068, 0.12729666550236876, 0.12795193496614757, 0.12851514691034627, 0.12899827910978384, 0.1294120137239892, 0.12976580225416456, 0.13006795199255247, 0.13032572393889297, 0.13054543486245446, 0.13073255839289893, 0.1308918217496241, 0.13102729602791696, 0.1311424789185676, 0.1312403694175238, 0.13132353454553258, 0.1313941683988273, 0.1314541440340379, 0.13150505878754987, 0.13154827366794805]
eight1=[0.13158494745946275, 0.13161606614817753, 0.13164246824213574, 0.13166486650776782, 0.13168386659378178, 0.13169998296203692, 0.13171365249639727, 0.13172524611445827]
append!(eight, eight1)
nine=[0.1, 0.10283132291240793, 0.1054552695566838, 0.10786839513159426, 0.11007167380721625, 0.11206989616548059, 0.11387096994086734, 0.11548519053384433, 0.11692453593478919, 0.11820202569193586, 0.1193311683209817, 0.1203255081346756, 0.12119827195534151, 0.12196210884799884, 0.12262891161818344, 0.1232097068060496, 0.12371459963450977, 0.12415276123389148, 0.12453244697107188, 0.12486103648846829, 0.12514508785653913, 0.12539039991126105, 0.12560207830520093, 0.12578460202004635, 0.12594188807267298, 0.12607735291790403, 0.1261939696374875, 0.12629432043955074, 0.12638064430487508, 0.12645487983274747, 0.12651870348281993, 0.1265735634984117, 0.12662070984619386]
nine1=[0.12666122052807097, 0.12669602462295002, 0.12672592240466019, 0.12675160286272869, 0.126773658928994, 0.12679260068647807, 0.12680886681035672, 0.12682283446467457]
append!(nine, nine1)
ten=[0.1, 0.10222677134178663, 0.1042828696158553, 0.10617012672915997, 0.10789282998593766, 0.10945727354391184, 0.11087130089385266, 0.11214386584076462, 0.11328463201325029, 0.11430362351678604, 0.11521093278861455, 0.11601648645441832, 0.11672986616746753, 0.11736017894818929, 0.11791597022575591, 0.11840517235290017, 0.11883508155816745, 0.11921235688950851, 0.11954303550611739, 0.11983255955810147, 0.1200858107650506, 0.12030714960911987, 0.12050045676593414, 0.12066917499742492, 0.12081635022515937, 0.12094467089918745, 0.1210565050879977, 0.12115393495254849, 0.12123878844447952, 0.12131266819743451, 0.1213769776707117, 0.12143294466534468, 0.12148164237106582]
ten1=[0.12152400812399176, 0.12156086006483532, 0.12159291188763291, 0.12162078586442521, 0.12164502432190194, 0.1216660997350035, 0.12168442358978618, 0.12170035415466837]
append!(ten, ten1)
eleven=[0.1, 0.10162818554964982, 0.10312601125472516, 0.10449804487393359, 0.10574988687763517, 0.10688790486425254, 0.10791898799054975, 0.10885032834032624, 0.1096892330497112, 0.11044296841165467, 0.11111863518034548, 0.11172307288595008, 0.11226279008797474, 0.1127439170509651, 0.11317217721656024, 0.11355287397403249, 0.11389088951365174, 0.11419069291495927, 0.1144563550251087, 0.1146915680843548, 0.11489966843369913, 0.11508366097982543, 0.11524624438911832, 0.11538983623360076, 0.11551659752017986, 0.11562845620321034, 0.1157271294148807, 0.11581414425286218, 0.11589085704453174, 0.11595847106708536, 0.11601805274625003, 0.11607054638689619, 0.11611678750926821]
eleven1=[0.11615751487723742, 0.11619338131160484, 0.11622496338434105, 0.1162527700884531, 0.11627725057578236, 0.11629880105042222, 0.11631777090028395, 0.11633446814363504]
append!(eleven, eleven1)
twelve=[0.1, 0.10103549522765412, 0.10198452907628738, 0.10285200431289306, 0.10364298445746482, 0.10436258993151405, 0.10501591072950911, 0.1056079351710375, 0.10614349370828867, 0.10662721638216699, 0.10706350230938412, 0.10745649950759137, 0.10781009339063884, 0.10812790236148838, 0.10841327907043485, 0.10866931606904248, 0.10889885476222631, 0.10910449672902607, 0.10928861664141762, 0.10945337615398291, 0.10960073826466571, 0.10973248175654673, 0.10985021542390208, 0.1099553918631894, 0.11004932067322172, 0.11013318096025443, 0.11020803308413982, 0.11027482961353582, 0.11033442548236015, 0.11038758735813695, 0.11043500224550662, 0.11047728535801522, 0.1105149872969524]
twelve1=[0.11054860057984646, 0.11057856556306289, 0.11060527580311477, 0.11062908290085413, 0.11065030087115765, 0.11066921007901888, 0.11068606078033413, 0.11070107630371027]
append!(twelve, twelve1)
thirteen=[0.1, 0.10044863078686514, 0.10085825587108523, 0.1012318422969732, 0.10157220702612389, 0.10188201013860408, 0.10216375158385382, 0.10241977085107719, 0.10265224898900943, 0.10286321247036874, 0.10305453846173264, 0.10322796112298535, 0.10338507861989982, 0.10352736058728068, 0.1036561558287262, 0.10377270008120944, 0.10387812370954246, 0.10397345922685185, 0.10405964856354516, 0.10413755002905421, 0.10420794492836692, 0.10427154380993989, 0.10432899233312826, 0.10438087675207633, 0.1044277290202755, 0.10447003152506698, 0.1045082214652044, 0.10454269488740885, 0.10457381039947809, 0.10460189257862233, 0.10462723509414171, 0.10465010356369123, 0.10467073816196622]
thirteen1=[0.10468935600001733, 0.10470615329303747, 0.10472130733312479, 0.10473497828304355, 0.10474731080578645, 0.1047584355438737, 0.10476847046137117, 0.10477752206056652]
append!(thirteen, thirteen1)
fourteen=[0.1, 0.09986752336012954, 0.09974702285865886, 0.09963737973865455, 0.0995375858644804, 0.09944673175762228, 0.09936399609502301, 0.09928863646470414, 0.09921998120566546, 0.09915742218682469, 0.09910040840183919, 0.09904844027472802, 0.09900106458744766, 0.0989578699524371, 0.09891848276461536, 0.09888256357602777, 0.09884980384394218, 0.09881992300994502, 0.0987926658727148, 0.09876780022228389, 0.0987451147071656, 0.09872441690956191, 0.09870553160672176, 0.09868829919887831, 0.09867257428689295, 0.0986582243842211, 0.09864512874976357, 0.09863317732964627, 0.09862226979709257, 0.09861231468097222, 0.09860322857429134, 0.09859493541514855, 0.09858736583304106]
fourteen1=[0.09858045655460156, 0.09857414986299008, 0.09856839310600263, 0.09856313824834682, 0.09855834146412736, 0.09855396276567774, 0.0985499656655243, 0.09854631686841615]
append!(fourteen, fourteen1)


        big=[five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen];
        hs=[1.6133333333333337, 1.6166666666666671, 1.6200000000000006, 1.623333333333334, 1.6266666666666674, 1.6300000000000008, 1.6333333333333342, 1.6366666666666676, 1.640000000000001, 1.6433333333333344]
            actualArray::Vector{Float64}=[];

            for i=1:length(big)
                append!(actualArray, big[i][length(big[i])])
            end
            fittingLinear(hs, (actualArray).^2)

            display(plot(hs, (actualArray).^2, title="Plot of (Magnetization)^2 after 40 iterations at J2=0 vs. h", xaxis="h", yaxis="(Magnetization)^2"));
end


function ultimatetestttt()
    graphs=readFromGraphFile();
    for graph in graphs
        map1=obtainMapOfNumNearFarBonds(graph)
        println(map1)
    end
    #the graph to calculate weight of
    theGraph=graphs[1];
    list=theGraph.subgraphList;
    maps=obtainMeanFieldMapping(theGraph);
    temp=copy(theGraph.nearBonds);
    bonds=append!(temp, theGraph.farBonds);
    sz=calculateOneSelfConsistentSz(theGraph.numSites, maps[1], maps[2], h, J, J2, bonds, J, guess, theGraph.indicies);

    calculateOneSelfConsistentSz(numSites, map1, map2, h, J1, J2, bonds, J, m, indicies)
end

function fidTest3()
    println("starting fid");

    num=14;
    N=14;
    J=1;
    J2=0;
    hmin=0.1;
    hmax=1;
    pbc=true
    bonds = bonds1D(N, pbc)
    hs=generateHListUniform(hmin, hmax, num);
    println("hs length: ", length(hs));

    println("hs", hs);

    fids=calculateFidelityPlain(hmin, hmax, num, N*N, J, J2, bonds);
    println("fids: ", fids);
    println("fids length: ", length(fids));

    plot(hs, fids);
    savefig("./fidelity pbc 121 c.png");
end

function find_1d_gs_per_site_43()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=true
    ferro=false

    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    Ls=[8,10,12,14,16,18]
    gs=Float64[]
    
     J = -1
        J2 = 0
        N = 14
        numSites = 14
        width = 0

        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            bonds=bonds1D(N, pbc)
            for i=1:N
                if(ferro)
                    push!(hs,0.2)
                else
                    push!(hs,1.7)
                end
                push!(hs2,0)
            end
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1]/numSites)
        end
        plot(Ls, gs, xlabel="L", ylabel="Energy per site", title="Energy per site vs. L, pbc="*string(pbc))
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energy per site: "*string(numSites)*", pbc, "*string(pbc)*"ferro"*string(ferro)*".png");
end

function find_1d_sparse()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]
    J = 1
        J2 = 0
        N = 25
        h = 1
        numSites = 25
        width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
            #push!(es,eigenvalues[2])
        end
        plot(hss, gs)
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./gs energy: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end


function calculateFidelity121()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.2, 3, 20);
    gs=Float64[]
    es=Float64[]
    fidelities=Float64[]
    gs_vectors=[]
    J = -1
        J2 = 0
        N = 16
        h = 1
        numSites = 16
        width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            println(size(eigenvectors))
            push!(gs, eigenvalues[1])
            push!(gs_vectors,eigenvectors)
            #push!(es,eigenvalues[2])
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    states=Int[]
    for i=1:2^numSites
        push!(states, i)
    end

    println(size(gs_vectors))
    for i=1:length(gs_vectors)-1
        inner=abs(innerProduct(gs_vectors[i], gs_vectors[i+1], states))
        push!(fidelities,inner);
    end

    hsss=Float64[]
    for i=1:length(hss)-1
        push!(hsss,hss[i])
    end

    plot(hsss, (fidelities))

    savefig("./fidelity: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");

    return fidelities;
end


function calculate_correlations_121()
    println("HELLOOO")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    Ls=[8,10,12,14]
    hs2 = Float64[]
    gs=Float64[]
    ferro=true
    J = 1
        J2 = 0
        N = 14
        numSites = N

        rs=Int[]
        for sites=1:length(Ls)
            empty!(rs)
            empty!(gs)
            numSites=Ls[sites]
            gs=Float64[]
            N=numSites
            bonds=bonds1D(N, pbc)
            for i=1:N
                if(ferro)
                    push!(hs,1.7)
                else
                    push!(hs,1.7)
                end
                push!(hs2,0)
            end
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
            eigenvalues = temp[1]
            eigenvectors = temp[2]
        for i=2:N
            push!(rs,i)
            println(rs)
            len=calculate_correlation_length(eigenvectors,i,numSites)
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, len)
        end
        if(sites==1)
            plot(rs, gs, title="Correlations vs. site", xlabel="Site number", ylabel="Correlation")
        else
            println(gs)
            plot!(rs, gs, title="Correlations vs. site", xlabel="Site number", ylabel="Correlation")
        end
        #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    end
    savefig("./correlations new: "*string(numSites)*", pbc, "*string(pbc)*".png");

end


function find_sz_121()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 2, 50);
    gs=Float64[]
    es=Float64[]
    J = 1
        J2 = 0
        N = 14
        h = 1
        numSites = 14

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            len=calculateSzSquared(eigenvectors,numSites)
            print(len)
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, len)
            #push!(es,eigenvalues[2])
        end
        plot(hss, gs, title="Sz vs. h", xlabel="h", ylabel="<(M/L)^2>")
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./sz: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end



function find_symmetry_energies_121()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "sparse"
    num = "five"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.2, 1, 25);
    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    N = 19
    h = 1
    numSites = 19
    width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverse(numSites, J, J2, hs, bonds, eigmethod, num)
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
            push!(es,eigenvalues[2])
            push!(es2, eigenvalues[3])
            push!(es3,eigenvalues[4])
        end
        plot(hss, gs)
        plot!(hss,es)
        plot!(hss,es2)
        plot!(hss,es3)
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energies with symmetries: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end

function find_diff_energy_44()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "sparse"
    num = "five"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]
    J = -1
        J2 = 0
        N = 18
        h = 1
        numSites = 18
        width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[2]-eigenvalues[1])
            #push!(es,eigenvalues[2])
        end
        plot(hss, gs, title="Energy difference, ")
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./diff energy: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end

function fitttttt()
    one=[9.059419880941277e-14, 3.6415315207705135e-13, 4.346745186012413e-12, 4.036504464011159e-11, 2.9168667481371813e-10, 1.7261854168282298e-9, 8.668534334788092e-9, 3.794796210598861e-8, 1.4782450197259323e-7, 5.207200191037487e-7, 1.6799930566691046e-6, 5.015431338684095e-6]

two=[1.3970253879946881e-5, 3.6551321535682746e-5, 9.030907175322511e-5, 0.00021159133670334285, 0.0004715309850151783, 0.0010012412642765867, 0.002026352926810304, 0.0039027459033240675, 0.00712677191392963, 0.01227046053125136, 0.01980675816087807, 0.029895883064535944, 0.04231036172934477, 0.05657071906413513]

three=[0.07215320737048625, 0.08862096070643766, 0.10565841832569589, 0.12305491835171178, 0.14067562851424942, 0.1584360594751777, 0.1762837500220531, 0.19418619525661374, 0.21212321445632298, 0.23008222172315573, 0.24805532038914002, 0.2660375215493689, 0.28402564984905965, 0.30201766860879786, 0.32001226125773563, 0.3380085700500963, 0.3560060318200833, 0.3740042739810008, 0.3920030481806105, 0.410002187661366, 0.42800157965100105, 0.4460011473534973, 0.4640008381178067, 0.48200061560826235, 0.5000004545883794]
    append!(one,two)
    append!(one,three)
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    i=1
    four=Float64[]
    hsss=Float64[]
    while(hss[i]<=0.95)
        if(hss[i]>=0.5)
        push!(hsss,hss[i])
        push!(four,abs(one[i]))
        end
        i+=1
    end
    fittingCritical(hsss, four)
end


function fittingCritical(xdata, ydata)
    # Ensure that the model function broadcasts the subtraction and power operations
    model(t, p) = (t .- 0.5).^p[1]
    p0 = [0.5]
    fit = curve_fit(model, xdata, ydata, p0)
    println("fit: ", fit.param)
end



function find_energies_121()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "sparse"
    num = "five"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.2, 1, 25);
    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    N = 8
    h = 1
    numSites = 8
    width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
            push!(es,eigenvalues[2])
            push!(es2, eigenvalues[3])
            push!(es3,eigenvalues[4])
        end
        plot(hss, gs)
        plot!(hss,es)
        plot!(hss,es2)
        plot!(hss,es3)
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energies: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end




function find_energies_121_FULL()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.2, 1, 25);
    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    N = 8
    h = 1
    numSites = 8
    width = 0

        for i=1:N
            push!(hs2,0)
        end

        bonds=bonds1D(N, pbc)
        for i=1:length(hss)
            empty!(hs)
            for j=1:N
                push!(hs,hss[i])
            end
            print(hs)
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
            push!(es,eigenvalues[2])
            push!(es2, eigenvalues[3])
            push!(es3,eigenvalues[4])
        end
        plot(hss, gs)
        plot!(hss,es)
        plot!(hss,es2)
        plot!(hss,es3)
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energies: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end


function find_1d_gs_per_site_diff_43()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false

    ###
    pbc::Bool=false
    ferro=false
    ###


    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    Ls=[8,10,12,14,16,18]
    gs=Float64[]
    
    J = -1
        J2 = 0
        N = 14
        h = 1
        numSites = 14
        width = 0

        
        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            for i=1:N
                if(ferro)
                    push!(hs,0.5)
                else
                    push!(hs,1.7)
                end
                push!(hs2,0)
            end
            bonds=bonds1D(numSites, pbc)
            temp = calculateEigensystemTransverseNoSymmetry(
                numSites,
                J,
                J2,
                hs,
                hs2,
                bonds,
                eigmethod,
                num,
                "H1",
            )
    
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
        end
        temp=[]
        Lss=[]
        for i=2:length(gs)
            push!(temp,0.5*(gs[i]-gs[i-1]))
            push!(Lss,Ls[i])
        end
        plot(Lss, temp, xlabel="L", ylabel="E/L", title="Energy diference per site vs. L")
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energy per site difference: "*string(numSites)*", pbc, "*string(pbc)*"ferro"*string(ferro)*".png");
end




function find_symmetry_energies_splitting_121()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "sparse"
    num = "five"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]

    Ls=[8,10,12,14,16]

    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    N = 19
    h = 0.2
    numSites = 19
    width = 0
    
    hs=Float64[]
    
        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            bonds=bonds1D(N, pbc)
            for i=1:N
                push!(hs,h)
            end
            temp = calculateEigensystemTransverse(numSites, J, J2, hs, bonds, eigmethod, num)
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            push!(gs, eigenvalues[1])
            push!(es,eigenvalues[2])
        end
        plot(Ls, es-gs)
        #plot!(hss, es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energy splitting with symmetries: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end

function fitting_symmetries()
end


# image is a matrix of values
function image_compression(image, dim)
    decomp=svd(image);
    U=decomp.U
    S=decomp.S
    V=decomp.V
    svd_result = U[:, 1:dim] * Diagonal(S[1:dim]) * V[:, 1:dim]'
    return svd_result
end
function test_images_1()
    k=40
    img = FileIO.load("gooty.png")
    greyscale_values = Float32.(map(x -> red(x), img))
    #imshow(Gray.(img))
    img_compressed=image_compression(greyscale_values, k)

    img_saveable = Gray.(img_compressed)
    print("norm: "*string(norm(img_compressed-greyscale_values)))
    # Save the compressed image as JPEG
    FileIO.save("compressed_image1.jpeg", img_saveable)
end

function test_images()
    img = float.(testimage("airplaneF16"))
    channels = channelview(img)
    original_channels = copy(channels)
    println(size(original_channels))
    all_norms=[]
    imgs = []
    ks=[3,10,100]
    for k in ks
        compressed_channels = [image_compression(channels[i, :, :], k) for i in 1:3]
        norms = [norm(original_channels[i, :, :] - compressed_channels[i]) for i in 1:3]
        push!(all_norms, norms)
        img_compressed = colorview(RGB, compressed_channels...)
        push!(imgs, img_compressed)
    end

    all_images = [img; imgs]  # Start with the original image
    mosaic = mosaicview(all_images, nrow=1, npad=10)

    # Convert mosaic to saveable image format
    saveable_image = convert(Array{RGB{Float32}, 3}, mosaic)

    # Save the image
    save("compressed_plane.jpg", saveable_image)
    t

    for i=1:3
        println("Frobenius norm: "*string(all_norms[i]))
    end
end

function anderson_diagonalization()
    L=50
    t=0.1
    d = Uniform(-1,1)

    ts=[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
    participations=[]

    eigenvaluess=[]
    
    x=rand(d,L)
    pbc=true
    bonds=bonds1D(L, pbc)
    for t in ts
    H=build_anderson_hamiltonian_1d(x, bonds, L, t)
    eigtemp=eigen(Hermitian(H));
    eigensystem=[]
    eigenvectors=[]
    eigenvalues=[]
    append!(eigenvalues, eigtemp.values);
    append!(eigenvectors, eigtemp.vectors);
    parts=[]
    push!(eigenvaluess, eigenvalues)

    for i=1:length(eigenvalues)
        part=calculate_participation_ratio(eigtemp.vectors[:,i])
        push!(parts,part)
    end
    push!(participations, parts)
    end
    plot()
    count=1
    for parts in participations
        plot!(eigenvaluess[count], (parts),ylim=(0,2), title="Participation ratio vs. energy, L="*string(L), xlabel="Energy", ylabel="Participation Ratio", label="t="*string(ts[count]))
        count+=1
    end
    savefig("./participation ratios, L="*string(L)*".png");
    #plot(1:L,(abs2.(eigtemp.vectors[:, 25])), title="Position-space wavefunction", xlabel="Position", ylabel="|Psi|^2", label="energy: "*string(eigenvaluess[count-1][25]))
    #savefig("./wavefunction, L="*string(L)*".png");
end


function quasiperiodic_diagonalization()
    L=50
    t=0.1
    d = Uniform(-1,1)
    
    xrange=1:L
    x=cos.(2*pi*sqrt(2)*xrange)
    pbc=true
    bonds=bonds1D(L, pbc)
    H=build_anderson_hamiltonian_1d(x, bonds, L, t)
    eigtemp=eigen(Hermitian(H));
    eigensystem=[]
    eigenvectors=[]
    eigenvalues=[]
    append!(eigenvalues, eigtemp.values);
    append!(eigenvectors, eigtemp.vectors);
    plot()
    count=1
    plot!(xrange, eigtemp.vectors[:,div(L,2)], title="Wavefunction, L="*string(L), xlabel="Position", ylabel="Wavefunction", label="t="*string(t))
    savefig("./quasiperiodic wf, L="*string(L)*".png");
    #plot(1:L,(abs2.(eigtemp.vectors[:, 25])), title="Position-space wavefunction", xlabel="Position", ylabel="|Psi|^2", label="energy: "*string(eigenvaluess[count-1][25]))
    #savefig("./wavefunction, L="*string(L)*".png");
end


function quasiperiodic_diagonalization_transition()
    L=1000
    t=1
    d = Uniform(-1,1)
    ls=collect(range(start=50, stop=500, step=50))
    V=collect(range(start=0.05, stop=3, step=0.05))
    parts=[]

    gradient = cgrad([:pink, :black], length(ls))

    count=1
    p=plot(title="Participation Ratio vs. potential depth", xlabel="Potential Depth", ylabel="Participation Ratio")
    for L in ls
    xrange=1:L
    parts=[]
    for v in V
        x=v*cos.(2*pi*sqrt(5)*xrange)
        pbc=true
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        eigenvalues=[]
        append!(eigenvalues, eigtemp.values);
        lol=calculate_participation_ratio(eigtemp.vectors[:,div(L,2)])
        push!(parts, lol)
    end
    plot!(p, V, parts, label="L="*string(L), color=gradient[count])
    count+=1
    end
    savefig("./participation ratio vs V.png");
end




function anderson_diagonalization_new()
    L = 50
    t_values = [0.1, 0.2, 0.5, 1.0]  # Example t values
    d = Uniform(-1, 1)
    
    x = rand(d, L)
    histogram(x)
    savefig("histogram.png")
    
    pbc = true
    bonds = bonds1D(L, pbc)
    
    participation_ratios = []
    
    for t in t_values
        H = build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp = eigen(Hermitian(H))
        
        eigenvalues = eigtemp.values
        eigenvectors = eigtemp.vectors
        parts = zeros(Float64, length(eigenvalues))

        for i in 1:length(eigenvalues)
            part = calculate_participation_ratio(eigenvectors[:, i])
            push!(parts, part)
        end
        
        participation_ratios = hcat(participation_ratios, parts)
    end

    # Plot participation ratios for all t values on a single plot
    plot()
    for (i, t) in enumerate(t_values)
        plot!(eigenvalues, participation_ratios[:, i], label="t = $t")
    end
    title!("Participation ratio vs. energy for different t values, L=$L")
    xlabel!("Energy")
    ylabel!("Participation Ratio")
    ylim!(0, 2)
    savefig("./participation_ratio_L_$L_different_t.png")

    # Plot additional diagnostics for one specific t value (e.g., the first t value)
    t = t_values[1]
    H = build_anderson_hamiltonian_1d(x, bonds, L, t)
    eigtemp = eigen(Hermitian(H))
    eigenvalues = eigtemp.values
    eigenvectors = eigtemp.vectors
    
    plot(1:L, abs2.(eigenvectors[:, 25]), title="Position-space wavefunction",
         xlabel="Position", ylabel="|Psi|^2", label="energy: "*string(eigenvalues[25]))
    savefig("./wavefunction_L_$L_t_$t.png")

    plot(eigenvalues, log.(parts), ylim=(0, 2), title="Log participation ratio vs. energy, L=$L, t=$t",
         xlabel="Energy", ylabel="Participation Ratio")
    savefig("./log_participation_ratio_L_$L_t_$t.png")

    plot(1:L, log.(abs2.(eigenvectors[:, 25])), title="Log position-space wavefunction",
         xlabel="Position", ylabel="|Psi|^2", label="energy: "*string(eigenvalues[25]))
    savefig("./log_wavefunction_L_$L_t_$t.png")
end

function anderson_perturbation()
    L=20
    t=1
    d = Uniform(-1,1)
    xrange=1:L
    x=cos.(2*pi*sqrt(2)*xrange)
    #x=rand(d,L)
    histogram(x)
    savefig("histogram.png")
    pbc=true
    bonds=bonds1D(L, pbc)
    H=build_anderson_hamiltonian_1d(x, bonds, L, t)
    eigtemp=eigen(Hermitian(H));
    eigensystem=[]
    eigenvectors=[]
    eigenvalues=[]
    append!(eigenvalues, eigtemp.values);
    append!(eigenvectors, eigtemp.vectors);
    gs=[]
    parts=[]

    for i=1:length(eigenvalues)
        part=calculate_participation_ratio(eigtemp.vectors[:,i])
        push!(parts,part)
    end
    N=L

    #teemp::Matrix{Complex}=zeros(N, N, N, N);
    #=
    temp=[]
    count=0
    @time begin
    for i in range(1,N)
        for j in range(1,N)
            for k in range(1,N)
                for l in range(1,N)
                    count+=1
                    #println("progress: "*string(count)*"/"*string(N^4))
                    push!(temp,calculate_Wijkl(i,j,k,l,eigtemp.vectors,eigenvalues, bonds))
                end
            end
        end
    end
    end
    =#

    plot(eigenvalues, (parts),ylim=(0,2), title="Participation ratio vs. energy, L="*string(L), xlabel="Energy", ylabel="Participation Ratio")
    savefig("./participation ratio, L="*string(L)*".png");
    plot(1:L,(abs2.(eigtemp.vectors[:, div(L,2)])), title="Position-space wavefunction", xlabel="Position", ylabel="|Psi|^2")
    savefig("./wavefunction, L="*string(L)*".png");

    plot(eigenvalues, log.(parts),ylim=(0,2), title="Log participation ratio vs. energy, L="*string(L), xlabel="Energy", ylabel="Participation Ratio")
    savefig("./log participation ratio, L="*string(L)*".png");
    plot(1:L,log.(abs2.(eigtemp.vectors[:, div(L,2)])), title="Log position-space wavefunction", xlabel="Position", ylabel="|Psi|^2")
    savefig("./log wavefunction, L="*string(L)*".png");
    
    for i=1:L
        println("i="*string(i))
        push!(gs,calculate_g_norms(i, eigtemp.vectors,eigenvalues, bonds, L))
    end
    
    plot(eigenvalues, (gs),title="Norm of g vs. energy, L="*string(L), xlabel="Energy", ylabel="Norm")
    savefig("./norm, L="*string(L)*".png");
end

function plot_Ws()
    l=7
    t=1
    d = Uniform(-3,3)
    parts=[]
    maxL=30

    iters=50
    p = plot(title="Log of Norm of W vs. L", xlabel="L", ylabel="Log of Norm of W")

    for i=1:iters
        ls=[]
        gs=[]
    for L=6:maxL
        println("L="*string(L))
        x=rand(d,L)
        histogram(x)
        savefig("histogram.png")
        pbc=true
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        eigenvalues=[]
        append!(eigenvalues, eigtemp.values);
        W=construct_W_matrix(eigtemp.vectors, eigenvalues, bonds)
        push!(gs,norm(W))
        push!(ls, L)
    end
    println(gs)
    plot!(p, ls, log.(gs), label=string(i), linewidth=2)

    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    savefig("./log norm of W 3.png");
end

function construct_energy_matrix(eigenvalues)
    temp=[]
    for i=1:length(eigenvalues)
        for j=1:length(eigenvalues)
            for k=1:length(eigenvalues)
                for l=1:length(eigenvalues)
                    push!(temp, eigenvalues[i]+eigenvalues[j]-eigenvalues[k]-eigenvalues[l])
                end
            end
        end
    end
    return temp
end


function plot_Ws_distribution()
    t=0.1
    d = Uniform(-1,1)
    maxL=60
    all_data=[]
    all_data_Ls=[]
    iters=2
    p = plot(title="Distribution of Ws at different Ls", xlabel="log|W|", ylabel="Count")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=vcat(build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors)...)
            append!(gs,W)
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    println("done")
    #save_object("W_distribution_data_maxL="*string(maxL)*".jld2", all_data)
    #save_object("W_distribution_Ls_data_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of Ws new, maxL="*string(maxL)*", t="*string(t)*".png");
end




function plot_Ws_distances_distribution()
    t=1
    d = Uniform(-1,1)
    maxL=60
    all_data=[]
    all_data_Ls=[]
    iters=1
    v=2
    p = plot(title="Distribution of large Ws (>1) at different Ls, Disordered Potential", xlabel="r/L", ylabel="Log(W)")

    count=0
    for L in range(60, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        dists=[]
        for i=1:iters
            x=v*rand(d,L)
            #xrange=1:L
            #x=cos.(2*pi*sqrt(3)*xrange)
            pbc=false
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=(build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors))
            distances=get_distances_matrix(eigtemp.vectors, pbc)
            distances=vec(distances)
            append!(gs,abs.(W))
            append!(dists, distances)
        end
        n = length(gs)
        percent=0.001
        num=10
        #k = ceil(Int, percent * n)  # largest 1% of elements are looked at
        indicies = partialsortperm(gs, n-num+1:n)

        save_object("large_Ws_distances_disordered="*string(L)*".jld2", dists[indicies])
        save_object("large_Ws_disordered="*string(L)*".jld2", gs[indicies])
    count+=1
    end
    println("done")

end


function plot_O_distances_distribution()
    t=0.1
    d = Uniform(-1,1)
    maxL=50
    all_data=[]
    all_data_Ls=[]
    iters=2
    p = plot(title="Distribution of large noninteracting Os (>1) at different Ls, Disordered", xlabel="r", ylabel="Log(O)")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        dists=[]
        for i=1:iters
            x=rand(d,L)
            #xrange=1:L
            #x=cos.(2*pi*sqrt(2)*xrange)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            V=Array{Float64, 4}(build_Vijkl_matrix(eigtemp.vectors))
            W=vec(interacting_transport_operator(eigtemp.vectors,eigenvalues, 1, V))
            distances=get_distances_matrix(eigtemp.vectors)
            distances=vec(distances)
            append!(gs,W)
            append!(dists, distances)
        end
        println(size(dists))
        println(size(gs))
        scatter!(p, dists[gs.>1], log.(abs.(gs[gs.>1])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    println("done")
    savefig("./distribution of Os against distance disordered, maxL="*string(maxL)*", t="*string(t)*".png");
end


function print_Ws_max()
    t=0.1
    d = Uniform(-1,1)
    L=50
    all_data=[]
    all_data_Ls=[]
    iters=5
    p = plot(title="Distribution of Ws at different Ls", xlabel="log|W|", ylabel="Count")

    count=0
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors)
            index=argmax(abs.(W))
            println(W[index])
            positions=[]
            energies=[]
            for i in Tuple(index)
                position1=argmax(abs.(eigtemp.vectors[:,i]))
                push!(positions, position1)
                push!(energies, eigtemp.values[i])
            end
            println()
            println("W")
            println(W[index])
            println("r_alphas")
            println(positions)
            println("energies")
            println(energies)
        end
end


function plot_Ws_distribution_quasiperiodic()
    t=0.1
    maxL=70
    all_data=[]
    all_data_Ls=[]

    iters=5
    p = plot(title="Distribution of Ws at different Ls", xlabel="log|W|", ylabel="Count")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        xrange=1:L
        gs=[]
            x=cos.(2*pi*sqrt(2)*xrange)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=vcat(construct_W_matrix_symmetry(eigtemp.vectors, eigenvalues, bonds)...)
            append!(gs,W)
        push!(all_data_Ls, L)
        push!(all_data,abs.(gs).>0)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    end
    save_object("W_distribution_data_quasiperiodic_maxL="*string(maxL)*".jld2", all_data)
    save_object("W_distribution_Ls_quasiperiodic_data_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of Ws quasiperiodic t=0.1, maxL="*string(maxL)*".png");
end




function plot_Ws_norm_distribution()
    t=0.1
    d = Uniform(-1,1)
    maxL=120
    all_data=[]
    all_data_Ls=[]

    nums=1000
    iters = range(0, stop=1/sqrt(2), length=nums)

    p = plot(title="Distribution of Norm of Ws at different Ls, Quasiperiodic", xlabel="log||W||", ylabel="Count")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i in iters
            #x=rand(d,L)
            #histogram(x)
            xrange=1:L
            x=cos.(2*pi*sqrt(2)*(xrange.+i))
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=norm(build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors))
            append!(gs,W)
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    save_object("W_norm_distribution_quasiperiodic_data_maxL="*string(maxL)*".jld2", all_data)
    save_object("W_norm_distribution_quasiperiodic_Ls_data_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of norm Ws cluster quasiperiodic, maxL="*string(maxL)*".png");
end


function plot_quasiperiodic_norm_distribution()
    t=0.1
    d = Uniform(-1,1)
    maxL=80
    all_data=[]
    all_data_Ls=[]

    p = plot(title="Distribution log of Norm of F vs L, quasiperiodic system", xlabel="ln||F||", ylabel="Normalized Count")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        xrange=1:L
        x=cos.(2*pi*sqrt(2)*xrange)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors)
            norms=[]
            for i=1:L
                F=calculate_f_from_w(W, i)
                #G=calculate_g_from_f(F, eigtemp.vectors)
                no=norm(F)
                push!(norms, no)
            end
            #G=calculate_g_from_f(F, eigtemp.vectors)
        push!(all_data_Ls, L)
        push!(all_data,norms)
    count+=1
    stephist!(p, log.(norms), norm=true, label="L="*string(L))
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    println(all_data)
    savefig("./distribution of f norm quasiperiodics maxL="*string(maxL)*".png");
end


function plot_g_norms_as_function_distance()
    t=0.01
    d = Uniform(-1,1)
    maxL=80
    all_data=[]
    all_data_rs=[]
    all_data_Ls=[]

    rs=2:15
    iters=10
    ls=[]

    p = plot(title="Norm of Gs at different rs, log y scale", xlabel="r", ylabel="G norm")
    L=50
    count=0
    for i=1:iters
        #push!(ls, L)
        println("L")
        println(L)
        # for each L we get a distribution
        gs=[]
        alpha=div(L, 2)
            x=rand(d,L)
            #xrange=1:L
            #x=cos.(2*pi*sqrt(3)*xrange)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=build_W_matrix_tensor_op(eigenvalues, eigtemp.vectors)
            F=calculate_f_from_w(W, alpha)
            G=calculate_g_from_f(F,eigtemp.vectors)
            norms=get_g_norm_as_function_of_distances(G, eigtemp.vectors, rs, alpha)
            append!(gs,norms)
        push!(all_data_Ls, L)

        push!(all_data,gs)
        println(gs)
        push!(all_data_rs, rs)
        println("size")
        println(size(gs))
        plot!(rs,gs, label="Norm of G="*string(norm(G))*", largest W="*string(W[argmax(W)]),yaxis = (:log10, (0.0000001,Inf)),yrange=(1e-8,1e-1),xticks=0:1:10)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    savefig("./distribution of norm Gs vs r, L="*string(L)*".png");
end

function plot_Ws_norm_distribution_quasiperiodic()
    t=0.1
    d = Uniform(-1,1)
    maxL=50
    all_data=[]
    all_data_Ls=[]

    iters=500
    p = plot(title="Distribution of Norm of Ws at different Ls", xlabel="log||W||", ylabel="Count")

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x_values=1:L
            y_values=cos.(2*pi*sqrt(2)*x_values)
            x=rand(d,L)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=norm(construct_W_matrix_symmetry(eigtemp.vectors, eigenvalues, bonds))
            append!(gs,W)
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    save_object("W_norm_distribution_data_maxL="*string(maxL)*".jld2", all_data)
    save_object("W_norm_distribution_Ls_data_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of norm Ws, maxL="*string(maxL)*".png");
end



function plot_Fs_distribution()
    l=7
    t=1
    d = Uniform(-1,1)
    parts=[]
    maxL=20
    all_data=[]
    all_data_Ls=[]

    iters=100
    p = plot(title="Distribution of Fs at different Ls (alpha=ground state)", xlabel="log|F|", ylabel="Count")

    count=0
    for L in range(6, maxL, step=2)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            perm = sortperm(eigenvalues)
            eigenvalues=eigenvalues[perm]
            sorted_eigenvectors=eigtemp.vectors[:,perm]
            W=construct_W_matrix(sorted_eigenvectors, eigenvalues, bonds)
            F=vcat(get_f_matrix(1, eigenvalues, W)...)
            append!(gs,F[abs.(F).>0])
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    save_object("F_distribution_data_gs_maxL="*string(maxL)*".jld2", all_data)
    save_object("F_distribution_Ls_data_gs_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of Fs ground state, maxL="*string(maxL)*".png");
end


function plot_Fs_norm_distribution()
    t=0.1
    d = Uniform(-1,1)
    parts=[]
    maxL=30
    all_data=[]
    all_data_Ls=[]

    iters=500
    p = plot(title="Distribution of norms of Fs at different Ls (alpha=ground state), t=0.1", xlabel="log|F|", ylabel="Count")

    count=0
    for L in range(10, maxL, step=5)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            perm = sortperm(eigenvalues)
            eigenvalues=eigenvalues[perm]
            sorted_eigenvectors=eigtemp.vectors[:,perm]
            W=construct_W_matrix(sorted_eigenvectors, eigenvalues, bonds)
            F=find_f_norm_from_w(W, div(L, 2))
            append!(gs,F)
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    save_object("F_distribution_data_norm_gs_maxL="*string(maxL)*".jld2", all_data)
    save_object("F_distribution_Ls_data_norm_gs_maxL="*string(maxL)*".jld2", all_data_Ls)
    savefig("./distribution of F norms ground state, maxL="*string(maxL)*", t=0.1, middle.png");
end


function plot_Fs_norm_rs_distribution()
    t=0.1
    d = Uniform(-1,1)
    L=50
    all_data=[]
    all_data_Ls=[]
    p = plot(title="Distribution of norms of Fs at different r_alpha, t=0.1", xlabel="r_alpha", ylabel="||F||")
    p1=plot(title="Disorder", xlabel="r_alpha", ylabel="Disorder Value")
    p2=plot(title="Wavefunction", xlabel="x", ylabel="Wavefunction")

    p3=plot(title="Participation ratio", xlabel="r_alpha", ylabel="participation ratio")
    p4=plot(title="Difference in Potential", xlabel="r_alpha", ylabel="|u_i+1-u_i|")


    count=0
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
            x=rand(d,L)
            #xrange=1:L
            #x=cos.(2*pi*sqrt(3)*xrange)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            perm = sortperm(eigenvalues)
            eigenvalues=eigenvalues[perm]
            sorted_eigenvectors=eigtemp.vectors[:,perm]
            rs=get_rs_of_eigenvectors(eigtemp.vectors)
            println("rs")
            println(rs)
            W=build_W_matrix_tensor_op(eigtemp.values, eigtemp.vectors)
            fs=[]
            ps=[]
            diffs=[]
            for i=1:length(rs)
                println("i="*string(i))
                F=norm(calculate_f_from_w(W, i))
                pa=1/calculate_participation_ratio(eigtemp.vectors[:,i])
                push!(ps, pa)
                if(i==length(rs))
                    push!(diffs, abs(x[1]-x[i]))
                else
                    push!(diffs, abs(x[i+1]-x[i]))
                end
                #F=find_f_norm_from_w(W, i)
            push!(fs, F)
            end

        push!(all_data_Ls, L)
        push!(all_data,gs)
        println(rs)
        println(fs)
        scatter!(p,rs, fs)
        scatter!(p3, rs, ps)
        plot!(p1, 1:L, x)
        plot!(p4, 1:L, diffs)
        scatter!(p1, rs, eigtemp.values)
        m=plot(p, p1, p3, p4, legend = false)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    plot!(p2, 1:L, eigtemp.vectors[:,1])
    savefig(m, "./distribution of F vs ralpha, maxL="*string(L)*", t=0.1, middle.png");
    savefig(p2, "./wavefunction.png");

end

function plot_energy_distribution()
    l=7
    t=1
    d = Uniform(-1,1)
    parts=[]
    maxL=100
    all_data=[]
    all_data_Ls=[]

    iters=1000
    p = plot(title="Distribution of e_alpha+e_beta-e_gamma-e_delta at different Ls", xlabel="Log of |e_alpha+e_beta-...|", ylabel="Count")

    count=0
    for L in range(6, maxL, step=2)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=construct_energy_matrix(eigenvalues)
            append!(gs,W)
        end
        push!(all_data_Ls, L)
        push!(all_data,gs)
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    save_object("energy_distribution_data.jld2", all_data)
    save_object("energy_distribution_Ls_data.jld2", all_data_Ls)
    savefig("./distribution of energys, maxL=30.png");
end

function time_Ws()
    t=1
    d = Uniform(-1,1)
    parts=[]
    L=170

    for L=10:10:80
        pbc=true
        x=rand(d,L)
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        @time begin
        W=build_W_matrix_tensor_op(eigtemp.values, eigtemp.vectors)
        end
    end
end

function plot_from_data()
    vs=collect(range(start=0.1, stop=3.1, step=0.5))

    p = plot(title="Distribution of interacting norms at different Ls, disorder, v=2", xlabel="Ln|O>0|", ylabel="log Count")
    energy_distribution=load_object("interacting_transport_distribution_cluster=80.jld2")
    Ls=load_object("interacting_transport_distribution_Ls_data_maxL=80.jld2")
    count=1
    println(Ls)
    L=20
    #println(energy_distribution)
    println(length(energy_distribution))
    gss=[]
    bigcount=1
    for gs in energy_distribution
        stephist!(p, log.(abs.(gs[abs.(gs.>0)])), label="L="*string(Ls[bigcount]), norm=true, yaxis=:log)
    end
    x = range(0, 20, length=100)
    slope=-0.5
    intercept=2
    linear_curve = exp.(slope .* x .+ intercept)
    plot!(p, x, linear_curve, ylims=(10^-8,10^1), linewidth=5, thickness_scaling = 1)
    savefig("./disorder distribution of interacting transport operator, v=2 maxL=80.png");
end



function plot_from_data_mean()
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    p = plot(title="(Average of log||O(1)||) vs L", xlabel="L", ylabel="avg||O||")
    for v in vs
        distribution=load_object("interacting_transport_distribution_disorder_v="*string(v)*".jld2")

        localization_lengths=load_object("participation_ratio_Ls_v="*string(v)*".jld2")
        Ls=load_object("interacting_transport_distribution_disorder_Ls_v="*string(v)*".jld2")
        println(size(distribution))
        count=1
        println(Ls)
        means=[]
        count=1
        for gs in distribution
            push!(means, (log.(median(gs[gs.>0]))))
            count+=1
        end
        plot!(p, Ls, means, label="v="*string(v))
    end
    savefig("./no log average interacting transport O(1) norm no log scale.png");
end
#how does localization length depend on v
# divide by the value as L->infinity
# 
function plot_from_data_2()
    p = plot(title="Distribution of interacting norms at different Ls, quasiperiodic, v=2", xlabel="L", ylabel="Average of Log|O|")
    energy_distribution=load_object("interacting_transport_distribution_quasiperiodic_v=2.jld2")
    Ls=load_object("interacting_transport_distribution_quasiperiodic_Ls_v=2.jld2")
    count=1
    println(Ls)
    L=20
    #println(energy_distribution)
    println(length(energy_distribution))
    gss=[]
    bigcount=1
    temp=[]
    for gs in energy_distribution
        if(count<=50)
            append!(gss, gs)
        end
        if(count==50)
        println(size(gss))
        push!(temp, mean(log.(abs.(gss[abs.(gss.>0)]))))
        gss=[]
        bigcount+=1
        count=1
        end
        #println(gs)
       # L=Ls[count]
        count+=1
    end
    plot!(Ls, temp, title="Average norm interacting transport vs. L quasiperiodic model")
    
    savefig("./average quasiperiodic distribution of interacting transport operator, v=2 maxL=50.png");
end



function plot_w_norm_from_data()
    p = plot(title="Distribution of W norm at different Ls, t=0.1", xlabel="Log10|W|/Log(L)", ylabel="Log(Count)",yaxis = (:log10, (0.0001,Inf)))
    energy_distribution=load_object("W_norm_distribution_data_maxL=50.jld2")
    println(energy_distribution)
    Ls=load_object("W_norm_distribution_Ls_data_maxL=50.jld2")
    count=1
    for gs in energy_distribution
        L=Ls[count]
        stephist!(p, log10.(abs.(gs[abs.(gs.>0)]))/log(L), label="L="*string(L), norm=true, xlims=(0,2))
        count+=1
    end
    savefig("./distribution of norm W log L scale x axis and log scale y axis lalala, maxL=50.png");
end



using StatsBase
function plot_from_data_maximums()
    p = plot(title="Most typical W vs. L", xlabel="L", ylabel="Log10(Most Typical W)")
    energy_distribution=load_object("W_distribution_data.jld2")
    Ls=load_object("W_distribution_Ls_data.jld2")
    count=1
    temp=[]
    for gs in energy_distribution
        L=Ls[count]
        histtemp=fit(Histogram, log10.(abs.(gs[abs.(gs.>0)])))

        hist=fit(Histogram, log10.(abs.(gs[abs.(gs.>0)])),nbins=floor(sqrt(sum(histtemp.weights))))
        #hist=histogram(log10.(abs.(gs[abs.(gs.>0)])), label="L="*string(L), norm=true, xlims=(-10,10),yaxis = (:log10, (0.0001,Inf)))
        i=argmax(hist.weights)
        println(hist.weights)
        most_populated_value = (hist.edges[1][i] + hist.edges[1][i+1]) / 2 
        push!(temp, most_populated_value)
    end
    plot!(p, log10.(Ls), temp)
    savefig("./max W log x, maxL=14.png");
end

function plot_from_data_avglog()
    p = plot(title="Average of log(W) vs. L", xlabel="L", ylabel="Log(W) Average")
    energy_distribution=load_object("W_norm_distribution_quasiperiodic_data_maxL=120.jld2")
    Ls=load_object("W_norm_distribution_quasiperiodic_Ls_data_maxL=120.jld2")
    count=1
    temp=[]
    for gs in energy_distribution
        L=Ls[count]
        d=mean(log10.(abs.(gs[abs.(gs.>0)])))
        push!(temp, d)
    end
    println(Ls)
    plot!(p, log.(Ls), temp)
    savefig("./avg log W quasiperiodic, maxL=120.png");
end

function plot_from_data_maximums_F()
    p = plot(title="Most typical F vs. L, middle of spectrum", xlabel="L", ylabel="Log10(Most Typical F)")
    energy_distribution=load_object("F_distribution_data_center_maxL=20.jld2")
    Ls=load_object("F_distribution_Ls_data_center_maxL=20.jld2")
    count=1
    temp=[]
    for gs in energy_distribution
        L=Ls[count]
        histtemp=fit(Histogram, log10.(abs.(gs[abs.(gs.>10e-30)])))
        hist=fit(Histogram, log10.(abs.(gs[abs.(gs.>10e-30)])),nbins=floor(sqrt(sum(histtemp.weights))))
        #hist=histogram(log10.(abs.(gs[abs.(gs.>0)])), label="L="*string(L), norm=true, xlims=(-10,10),yaxis = (:log10, (0.0001,Inf)))
        i=argmax(hist.weights)
        println(hist.weights)
        most_populated_value = (hist.edges[1][i] + hist.edges[1][i+1]) / 2 
        push!(temp, most_populated_value)
    end
    plot!(p, Ls, temp)
    savefig("./max F, maxL=20, center of spectrum.png");
end

#TODO
using TimerOutputs
using BenchmarkTools

function time_test_interacting()
    t=1
    d=Uniform(-1,1)
    L=50
    energies=[]
    resonancee=[]

    x=5*rand(d, L)
    pbc=false
    bonds=bonds1D(L, pbc)
    H=build_anderson_hamiltonian_1d(x, bonds, L, t)
    eigtemp=eigen(Hermitian(H));
    W=(interacting_transport_operator(eigtemp.vectors,eigtemp.values,div(L,2)))
    temp=sqrt(find_norm_operator(W))
end

function plot_from_data_avglog_F()
    p = plot(title="Average of Log(F) vs. L, middle of spectrum", xlabel="L", ylabel="Log10(Most Typical F)")
    energy_distribution=load_object("F_distribution_data_center_maxL=20.jld2")
    Ls=load_object("F_distribution_Ls_data_center_maxL=20.jld2")
    count=1
    temp=[]
    for gs in energy_distribution
        L=Ls[count]
        avg=mean(log10.(abs.(gs[abs.(gs.>10e-30)])))
        push!(temp, avg)
    end
    plot!(p, Ls, temp)
    savefig("./average log F, maxL=20, center of spectrum.png");
end

function plot_fs()
    t=1
    d = Uniform(-3,3)
    parts=[]
    maxL=30

    iters=5
    p = plot(title="Norm of F vs. L", xlabel="L", ylabel="Norm of F")
    p1=plot(title="IPR of F vs. L", xlabel="L", ylabel="Norm of F")

    for i=1:iters
        ls=[]
        gs=[]
        gs2=[]
    for L=6:maxL
        println("L="*string(L))
        alpha=div(L,2)
        x=rand(d,L)
        pbc=true
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        eigenvalues=[]
        append!(eigenvalues, eigtemp.values);
        W=construct_W_matrix(eigtemp.vectors, eigenvalues, bonds)
        F=get_f_matrix(alpha, eigenvalues, W)
        nn=norm(F)
        push!(gs,nn)
        push!(gs2, (nn^4)/(nn^2))
        push!(ls, L)
    end
    println(gs)
    no=true
    plot!(p, ls, log.(gs), label=string(i), linewidth=2)
    plot!(p1, ls, log.(gs2), label=string(i), linewidth=2)

    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    savefig(p,"./log norm of F vs L, 3.png");
    savefig(p1,"./log IPR of F vs L, 3.png");

end



function plot_fs_alphas()
    t=1
    d = Uniform(-3,3)
    parts=[]
    maxL=30
    L=30

    iters=5
    p = plot(title="Log Norm of F vs. alpha", xlabel="alpha", ylabel="Norm of F")

    for i=1:iters
        ls=[]
        gs=[]
        gs2=[]
        alpha=div(L,2)
        x=rand(d,L)
        pbc=true
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        eigenvalues=[]
        append!(eigenvalues, eigtemp.values);
        W=construct_W_matrix(eigtemp.vectors, eigenvalues, bonds)

        alphas=[]
        F1=[]
        F2=[]
        for i=1:length(eigenvalues)
            F=get_f_matrix(i, eigenvalues, W)
            nn=norm(F)
            push!(gs,nn)
            push!(alphas, eigenvalues[i])
        end

        #println(gs)
        plot!(p, alphas, log.(gs), label=string(i), linewidth=2)
        #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
        end
        savefig(p,"./Log F vs alpha 30.png");
end

function plot_anderson_participation()
    eigensystem=anderson_diagonalization()
end

function calculate_deroeck_norm(L,hs, js, gs)
    sum=0
    for i=1:L
        if(i<L)
        sum+=(gs[i]/(2*hs[i]))^2+(hs[i]^2+hs[i+1]^2)*(js[i]/(2*(hs[i]^2-hs[i+1]^2)))^2
        else
        sum+=(gs[i]/(2*hs[i]))^2+(hs[i]^2+hs[1]^2)*(js[i]/(2*(hs[i]^2-hs[1]^2)))^2
        end
    end
    return sum
end

function plot_distribution_deroeck()
    start=10
    stop=50
    step=10
    str = raw"Ln(||X||^2) over ln(L) distribution for different L, h_i in [-1, 1], g_i=J_i=1"
    p = plot(title=str, xlabel="Log(||X||^2) over log(L)", ylabel="Normalized Count")

    d=Uniform(-1,1)
    samples=10000
    Ls=collect(range(start, stop=stop, step=step))
    norms=[]
    for L in Ls
        normL=[]
        for i=1:samples
        hs=rand(d, L)
        js=ones(L)
        gs=ones(L)
        n=calculate_deroeck_norm(L,hs, js, gs)
        push!(normL, n)
        end
        normL = [x for x in normL if isfinite(x)]

        stephist!(p, log.(normL)./log(L), label="L="*string(L), xrange=(0,10), norm=true)
    end
    println("lalalala")
    filename = "./" * replace(str, r"\s+" => "_") * ".png"
    savefig(p, filename)
end

function entanglementtest()
    println("starting");
    println("starting");

    #00,01,10,11
    #0000, 0001, 0000.... 1111
    N=4
    eigenvector=Float64[1/sqrt(2), 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1/sqrt(2)];
    println(length(eigenvector));
    listA=Int[1, 2];
    states::Array{Int}=Int[];
    for i=0:2^(N)-1
        push!(states, i);
    end
    println("calculating entropy");
    #eigenvector, states, listA, N
    println(getEntanglementEntropy(eigenvector, states, listA, N));
end


function find_entanglement_entropy()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]
    
    J = -1
    J2 = 0
    N = 14
    states=[]

    #!!!!
    h = 1.7
    numSites = N
    width = 0
    Ls=[]
    for i=2:numSites-1
        push!(Ls, i)
    end
    for i=0:2^(N)-1
        push!(states, i);
    end

    for i=0:N-1
        push!(hs, h);
    end

    subsites=1

    states=[];

        for i=1:N
            push!(hs2,0)
        end

        for i=0:2^N-1
            push!(states, i)
        end
        listA=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(listA)
            for j=1:Ls[i]
                push!(listA, j)
            end
            println(listA)
            print()
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            ee=getEntanglementEntropy(eigenvectors, states, listA, N)
            println("entanglement")
            println(ee)
            push!(gs, ee)
        end
        plot(Ls, gs, xlabel="Subsystem size", ylabel="Entanglement entropy", title="Entanglement entropy vs system size")
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

        fittingEntanglement(Ls, gs, numSites)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement entropy, h "*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end



function find_entanglement_entropy_1()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "all"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    gs=Float64[]
    es=Float64[]
    J = -1
    J2 = 0
    N = 14
    states=[]

    #!!!!
    h = 1
    maxSites = 16
    numSites=1
    N=numSites
    Ls=[8,10,12,14,16]

    print(Ls)

    
        listA=[]

        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            bonds=bonds1D(N, pbc)
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, h);
                push!(hs2, 0)
            end
            empty!(states)
            for i=0:2^(N)-1
                push!(states, i);
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            println(numSites)
            println(hs)
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]
            #println("eigenvalues: ", (eigenvalues))
            ee=getEntanglementEntropy(eigenvectors, states, listA, N)
            println("entanglement")
            println(ee)
            push!(gs, ee)
        end
        plot(Ls, gs, xlabel="System size L", ylabel="Entanglement entropy", title="Entanglement entropy vs system size",ylim=(0,1))
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

        fittingEntanglement(Ls, gs, numSites)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement entropy vs system size, h="*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end

function fittingEntanglement(xdata, ydata, L)
    # Ensure that the model function broadcasts the subtraction and power operations
    model(l, p) = p[1]/3 * log.(L/pi *sin.(pi*l/L)).+p[2]

    p0 = [0.5,0.5]
    fit = curve_fit(model, xdata, ydata, p0)
    println("fit: ", fit.param)
end




function find_entanglement_entropy_2()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]

    
    J = -1
    J2 = 0
    N = 10
    states=[]

    #!!!!
    h = 1.7
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i=4:maxSites
        push!(Ls, i)
    end
    print(Ls)
    for i=0:2^(N)-1
        push!(states, i);
    end

    for i=0:N-1
        push!(hs, h);
    end

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        for i=0:2^N-1
            push!(states, i)
        end
        listA=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, h);
                push!(hs2, h)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            println(listA)
            println(numSites)
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            eigenvectors = temp[2]

            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("SIZEEE")
            println(size(eigenvalues))

            perm = sortperm(eigenvalues)
            sorted_eigenvectors=eigenvectors[:,perm]

            println("SIZEEE")
            println(size(sorted_eigenvectors))
            #get the middle eigenvector
            the_vector=sorted_eigenvectors[:,2^(N-1)+1]
            #println("eigenvalues: ", (eigenvalues))
            ee=getEntanglementEntropy(the_vector, states, listA, N)
            println("entanglement")
            println(ee)
            push!(gs, ee)
        end
        plot(Ls, gs, xlabel="System size L", ylabel="Entanglement entropy", title="Entanglement entropy vs system size")
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement entropy vs system size, h="*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end



function find_approx_energy()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "all"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]
    norms=[]
    J = -1
    J2 = 0
    states=[]

    #!!!!
    h = 0.25
    maxSites = 14
    numSites=14
    N=numSites
    width = 0
    Ls=[]
    for i=4:maxSites
        push!(Ls, i)
    end
    print(Ls)
    for i=0:2^(N)-1
        push!(states, i);
    end

    for i=0:N-1
        push!(hs, h);
    end
    subsites=1
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        for i=0:2^N-1
            push!(states, i)
        end
        listA=[]
        for i=0:N-1
            push!(hs, h);
            push!(hs2, h)
        end
        bonds=bonds1D(N, pbc)

        for j=1:div(numSites,2)
            push!(listA, j)
        end
        H=constructTransverseHamiltonianNoSymmetrySxMeanField(bonds, N, J, J2, eigmethod, hs, hs2);
        temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
        eigenvalues = temp[1]
        eigenvectors = temp[2]
        for k=2:60
            #println("eigenvalues: ", (eigenvalues))
            ground_state_approx=getApproxEnergy(eigenvectors, states, listA, N, k)
            vec=ground_state_approx[2]
            ee=transpose(vec)*H*vec/norm(vec)^2
            println("hello")
            println(ee)
            push!(gs, abs(ee-eigenvalues[1]))
            print(abs(ee-eigenvalues[1]))
            push!(norms, ground_state_approx[1])
        end
        println("errors")
        println(gs)
        println("NORMS")
        println(norms)
        plot(log.(norms), log.(gs), xlabel="d(k)", ylabel="Delta E", title="Delta E vs d(k)")
        #plot!(hss, es)
        #println(es)
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./gay, h="*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end

function find_entanglement_entropy_4()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    gs=Float64[]
    es=Float64[]
    J = -1
    J2 = 0
    N = 14
    states=[]

    #!!!!
    h = 0.25
    maxSites = 16
    numSites=1
    N=numSites
    Ls=[4,6,8,10,12]

    print(Ls)

    
        listA=[]

        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            bonds=bonds1D(N, pbc)
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, h);
                push!(hs2, 0)
            end
            empty!(states)
            for i=0:2^(N)-1
                push!(states, i);
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            println(numSites)
            println(hs)
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            perm = sortperm(eigenvalues)
            sorted_eigenvectors=eigenvectors[:,perm]
            the_vector=sorted_eigenvectors[:,2^(N-1)]

            #println("eigenvalues: ", (eigenvalues))
            ee=getEntanglementEntropy(the_vector, states, listA, N)
            println("entanglement")
            println(ee)
            push!(gs, ee)
        end
        plot(Ls, gs, xlabel="System size L", ylabel="Entanglement entropy", title="Entanglement entropy vs system size")
        #plot!(hss, es)
        println("hello")
        println(gs)
        #println(es)

    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement entropy vs system size, h="*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end

function find_matrix_product_state()
    print("mps!")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=false
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    h = 4/5
    width = 0
    
    ks=[1,2,3,4,5]

    numSites=14
    N=numSites
    bonds=bonds1D(N, pbc)
    states=[]
    gs=[]

    hs3=Float64[]
    for i=1:N
        push!(hs,h)
        push!(hs2, 0)
        push!(hs3,h)
    end

    for o=0:2^N-1
        push!(states, o)
    end
    H=constructTransverseHamiltonianNoSymmetrySxMeanField(bonds, N, J, J2, eigmethod, hs, hs2);

    for k in ks
            temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            eigenvalues = sort(temp[1])
            println(eigenvalues)
            eigenvectors = temp[2]

            #println(length(eigenvectors))

            temp2 = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs3, hs2, bonds, eigmethod, num, "H1")
            eigenvalues2 = sort(temp[1])
            eigenvectors2 = temp[2]

            a_list=matrix_product_state(eigenvectors, N, k)
            println("size")
            #println(a_list)

            for i=1:length(a_list)
                println(size(a_list[i]))
            end

            println("mps product")
            println(calculate_mps_overlap(a_list,a_list))
            println("inner product")
            println(innerProduct(eigenvectors,states, eigenvectors, states))

            println()

            #vec=deconstruct_mps(a_list)
            #println("inner product!!!!")
            #println(innerProduct(vec, states,eigenvectors,states))
            println("the mps")
            teeeee=deconstruct_mps(a_list, N)
            #temp=innerProduct(teeeee,states, eigenvectors, states)

            #energy=get_energy_mps(a_list, a_list, bonds, J, h[1])
            energy=calculate_correlation_mps(a_list,7,N)
            push!(gs,energy)
            #println("mps energy")
            #println(energy)

            #println("actual energy")
            #println(eigenvalues)

            println(typeof(eigenvectors))
            println(typeof(H))

            println("enerhgyyy")

        end
        #plot(Ls, es-gs)

        println(gs)
        println(ks)
        plot(ks, real.(gs), title="Calculated correlations with k value", xlabel="k value", ylabel="Correlations")
    savefig("./correlations with k: "*string(numSites)*", pbc, "*string(pbc)*" sparse"*".png");
end

function construct_canonical_form()
    L = 14
    a_list=[]
    A1 = (1/sqrt(2))*[1 1; 1 -1]
    A2 = zeros(2,2,2)
    A2[:,1,:] = (1/sqrt(2))*[1 1; 0 0]
    A2[:,2,:] = (1/sqrt(2))*[0 0; 1 -1]
    A3 = (1/sqrt(2))*[1 0; 0 1];
    push!(a_list, A1)
    for i=2:L-1
        push!(a_list, A2)
    end
    return a_list
end



function canonical_form()
    L = 14
    a_list=[]
    A1 = (1/sqrt(2))*[1 1; 1 -1]
    A2 = zeros(2,2,2)
    A2[:,1,:] = (1/sqrt(2))*[1 1; 0 0]
    A2[:,2,:] = (1/sqrt(2))*[0 0; 1 -1]
    A3 = (1/sqrt(2))*[1 0; 0 1];
    push!(a_list, A1)
    for i=2:L-1
        push!(a_list, A2)
    end
    push!(a_list, A3)
    wavefunction=deconstruct_mps(a_list,L)

    l=5
    lol=diagm(svd(reshape(wavefunction,2^l,2^(L-l))).S)
    println("First: "*string(lol[1,1]))
    println("Second: "*string(lol[2,2]))
    println("third: "*string(lol[3, 3]))

end

function schmidt_values()
    #=
    L = 14
    a_list=[]
    A1 = (1/sqrt(2))*[1 -1;1 1]
    A2 = zeros(2,2,2)
    A2[1,:,:] = (1/sqrt(2))*[0 0; 1 -1]
    A2[2,:,:] = (1/sqrt(2))*[1 1; 0 0]

    A3 = (1/sqrt(2))*[0 1;1 0];

    push!(a_list, A1)
    for i=2:L-1
        push!(a_list, A2)
    end
    push!(a_list, A3)
    =#

    L = 14
    a_list=[]
    A1 = [2 -1;1 2]
    A2 = zeros(2,2,2)
    A2[1,:,:] = (1/sqrt(2))*[0 0; 1 -1]
    A2[2,:,:] = (1/sqrt(2))*[1 1; 0 0]
    A3 = [3 1;1 3];
    push!(a_list, A1)
    for i=2:L-1
        push!(a_list, A2)
    end
    push!(a_list, A3)

    wavefunction=deconstruct_mps(a_list,L)
    l=5
    states=[]
    for i=0:2^L-1
        push!(states, i)
    end

    listA=[1,2,3,4,5]

    println("1")

    H=constructCoefficientMatrix(wavefunction, states, listA, L);
    decomp=svd(H);

    ss=decomp.S[1:2]
    println(ss)
end

function canonical_form_test()
    L = 14
    a_list=[]
    A1 = [1 2;2 -1]
    A2 = zeros(2,2,2)
    A2[1,:,:] = (1/sqrt(2))*[1 1; 0 0]
    A2[2,:,:] = (1/sqrt(2))*[0 0; 1 -1]
    A3 = [1 3;3 1];
    push!(a_list, A1)
    for i=2:L-1
        push!(a_list, A2)
    end
    push!(a_list, A3)
    lol, values=change_to_canoncial_form(a_list, 2)
    println(values)
    println("lol size, "*string(length(lol)))
    print(lol)
end


function diagonalizeHamiltonianWithXZ()
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    method = "none"
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "lanczos"
    num = "one"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    gs=Float64[]
    es=Float64[]
    es2=Float64[]
    es3=Float64[]
    J = -1
    J2 = 0
    hxs=[]

end

function constructProductState(L)
    prod = 0.5*[1,-sqrt(3)]
    for i = 2:L
        prod = kron(prod, [1/2,-sqrt(3)/2])
    end
    return prod
end



function find_middle_time_evo_z_1()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse
    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]

    
    J = -1
    J2 = 0
    N = 10
    states=[]
    hx=-1.05
    hz=0.5
    maxSites = 8
    numSites=1
    N=numSites
    Ls=[]
    for i in range(5, maxSites, step=1)
        push!(Ls, i)
    end
    print(Ls)
    for i=0:2^(N)-1
        push!(states, i);
    end
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end
            empty!(states)

            for i=0:2^N-1
                push!(states, i)
            end

            bonds=bonds1D(N, pbc)

            println("waaaa")
            println(bonds)
            println(numSites)
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            #temp = calculateEigensystemTransverseNoSymmetry(numSites, J, J2, hs, hs2, bonds, eigmethod, num, "H1")
            
            eigenvectors = temp[2]

            eigenvalues = temp[1]
            println("energy")
            println(sort(eigenvalues)[1])
            the_vector=reverse(constructProductState(Ls[i]))
            indexes,energy_basis_vector=expand_energy_eigenbasis(eigenvectors, the_vector,states)
            println(energy_basis_vector)
            
            eigenvectors=eigenvectors[:,indexes]
            eigenvalues=eigenvalues[indexes]
            energy_basis_vector=energy_basis_vector[indexes]
            
            #println(energy_basis_vector)

            matrix=calculate_matrix_elements_j_x(eigenvectors, N, 1)

            prefactor=calculate_Time_Evolved_Z_Pre(energy_basis_vector, eigenvectors, N, 1,matrix)
            println("prefactor")
            println(prefactor)
            temp1=calculate_Time_Evolved_Z(energy_basis_vector, eigenvalues, eigenvectors, N, 0,states,1,matrix)
            println(temp1)
            println("zero t")
            println(prefactor+temp1)
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    #savefig("./sz time evolved, h="*string(h)*", pbc, "*string(pbc)*" sparse"*".png");
end


function find_middle_time_evo_z_2()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 12
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            #!!!!!!!!!!!!

            beta=0.4
            eq=calculate_thermal_state_z(eigenvalues, eigenvectors,beta, N)

            sorted_indices = sortperm(eigenvalues)
            eigenvalues=eigenvalues[sorted_indices]
            eigenvectors=eigenvectors[:,sorted_indices]


            indexes,energy_basis_vector=expand_energy_eigenbasis(eigenvectors, the_vector,states)
            if(numSites==6)
                println("uau")
                println(eigenvectors[:,1])
                println(eigenvalues)
                println("jaajajajjaa")
                println(innerProduct(eigenvectors[:,1],eigenvectors[:,1],states))
                println(energy_basis_vector)
            end


            eigenvectors=eigenvectors[:,indexes]
            eigenvalues=eigenvalues[indexes]
            energy_basis_vector=energy_basis_vector[indexes]

            println("calculating matrix elements")
            println("length of eigenvalues")
            println(length(indexes))
            println(length(eigenvalues))

            @time begin
            matrix=calculate_matrix_elements_j_z(eigenvectors, N, 1)
            end

            beta=0.4

            equilibrium=[]

            ts=[]
            prefactor=calculate_Time_Evolved_Z_Pre(energy_basis_vector, eigenvectors, N, 1,matrix)
            for t in range(0,20,step=0.25)
                #println("t="*string(t))
                push!(ts,t)
                temp1=calculate_Time_Evolved_Z(energy_basis_vector, eigenvalues, eigenvectors, N, t,states,1,matrix)
                push!(time_evolved, prefactor+temp1)
                push!(equilibrium, eq)
            end
            #println(time_evolved)
            if(i==1)
                plot(ts, real.(time_evolved), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different system sizes", label="L="*string(Ls[i]))

                plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

            else
                plot!(ts, real.(time_evolved), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different system sizes", label="L="*string(Ls[i]))
                plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

            end
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./sz time evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end


function find_k0_sz()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            eigenvalues_left=[]
            eigenvectors_left=[]
            println("size before")
            println(size(eigenvectors))

            indicies=[]

            for i=1:length(eigenvalues)
                if(isMomentumZero(eigenvectors[:,i],eigenvectors[:,i], N))
                    push!(indicies, i)
                    push!(eigenvectors_left,eigenvectors[:,i])
                    push!(eigenvalues_left, eigenvalues[i])
                end
            end

            println("size after")
            println(size(eigenvectors_left))

            println("length of eigenvalues")
            println(length(eigenvalues_left))
            mus=[]
            els=[]

            for i in range(1,length(eigenvalues))
                if(i in indicies)
                s=get_average_ith_y(eigenvectors[:,i],eigenvectors[:,i],N, 1)
                push!(mus,s)
                push!(els, eigenvalues[i]/N)
                end
            end
            println(mus)
            if(i==1)
                plot(els, mus, xlabel="Energy", ylabel="Sy", title="Sy for k=0 states", label="L="*string(Ls[i]))
            else
                plot!(els, mus, xlabel="Energy", ylabel="Sy", title="Sy for k=0 states", label="L="*string(Ls[i]))
            end
        end
        
        #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./sz k0 vs E evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end





function find_energy_as_beta()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 12
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            sorted_indices = sortperm(eigenvalues)
            eigenvalues=eigenvalues[sorted_indices]
            eigenvectors=eigenvectors[:,sorted_indices]

            Htemp=constructTransverseHamiltonianNoSymmetrySxSz(bonds, N, J, J2, eigmethod, hs, hs2)

            the_vector=reverse(constructProductState(Ls[i]))
            println("the energy")
            println(transpose(the_vector)*Htemp*the_vector)

            ts=[]
            for beta in range(0,2,step=0.1)
                #println("t="*string(t))
                push!(ts,beta)
                temp1=calculate_thermal_state_energy(eigenvalues, beta)
                push!(time_evolved, temp1)
            end

            println("beta")
            println(ts)
            println("energy")
            println(time_evolved)
            #println(time_evolved)
            if(i==1)
                plot(ts, real.(time_evolved), xlabel="Beta", ylabel="Thermal State Energy", title="Thermal State Energy vs Beta for different system sizes", label="L="*string(Ls[i]))
            else
                plot!(ts, real.(time_evolved), xlabel="Beta", ylabel="Thermal State Energy", title="Thermal State Energy vs Beta for different system sizes", label="L="*string(Ls[i]))
            end
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./energy beta, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end

function lalala()
    before=2^9
    println("before")
    println(before)
    temp=circular_shift(before, 11,1)
    println("after")
    println(temp)
end


function find_time_evo_entanglement()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            #!!!!!!!!!!!!

            beta=0.4

            sorted_indices = sortperm(eigenvalues)
            eigenvalues=eigenvalues[sorted_indices]
            eigenvectors=eigenvectors[:,sorted_indices]

            indexes,energy_basis_vector=expand_energy_eigenbasis(eigenvectors, the_vector,states)

            println("calculating matrix elements")
            println("length of eigenvalues")
            println(length(indexes))
            println(length(eigenvalues))

            beta=0.4
            ts=[]
            for t in range(0,20,step=0.25)
                lol=get_time_evolved_state(energy_basis_vector, eigenvalues, eigenvectors, t)
                push!(ts,t)
                temp1=getEntanglementEntropy(lol, states, listA, N)
                push!(time_evolved, temp1)
            end
            #println(time_evolved)
            if(i==1)
                plot(ts, real.(time_evolved), xlabel="Time", ylabel="Entanglement entropy", title="Entanglement entropy vs time for different system sizes", label="L="*string(Ls[i]))
            else
                plot!(ts, real.(time_evolved), xlabel="Time", ylabel="Entanglement entropy", title="Entanglement entropy vs time for different system sizes", label="L="*string(Ls[i]))

            end
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement time evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end




function find_k0_entanglement()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    hss=generateHListUniformIncludeOne(0.1, 1, 50);
    gs=Float64[]
    es=Float64[]

    norms=[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]
        time_evolved=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            empty!(time_evolved)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            for i=0:N-1
                push!(hs, hx);
                push!(hs2, hz)
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))
            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            eigenvalues_left=[]
            eigenvectors_left=[]
            println("size before")
            println(size(eigenvectors))

            indicies=[]

            for i=1:length(eigenvalues)
                if(isMomentumZero(eigenvectors[:,i],eigenvectors[:,i], N))
                    push!(indicies, i)
                    push!(eigenvectors_left,eigenvectors[:,i])
                    push!(eigenvalues_left, eigenvalues[i])
                end
            end

            println("size after")
            println(size(eigenvectors_left))

            println("length of eigenvalues")
            println(length(eigenvalues_left))
            mus=[]
            els=[]

            for i in range(1,length(eigenvalues))
                if(i in indicies)
                s=getEntanglementEntropy(eigenvectors[:,i], states, listA, N)
                push!(mus,s)
                push!(els, eigenvalues[i]/N)
                end
            end
            println(mus)
            if(i==1)
                plot(els, mus, xlabel="Energy/L", ylabel="Entanglement Entropy", title="Entanglement Entropy for k=0 states", label="L="*string(Ls[i]))
            else
                plot!(els, mus, xlabel="Energy/L", ylabel="Entanglement Entropy", title="Entanglement Entropy for k=0 states", label="L="*string(Ls[i]))
            end
        end
        
        #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./sz k0 vs E evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end



function find_disordered_time_evo()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1

    nummax=20
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            ts=[]

            for i=0:N-1
                push!(hs, hx);
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))


            es=[]

            maxnum=10
            for n=1:maxnum
            d = Uniform(-3,3)
            hs2=rand(d, N)

            time_evolved=[]

            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            #!!!!!!!!!!!!

            beta=0.4
            eq=calculate_thermal_state_x(eigenvalues, eigenvectors,beta, N)

            sorted_indices = sortperm(eigenvalues)
            eigenvalues=eigenvalues[sorted_indices]
            eigenvectors=eigenvectors[:,sorted_indices]


            indexes,energy_basis_vector=expand_energy_eigenbasis(eigenvectors, the_vector,states)
            if(numSites==6)
                println("uau")
                println(eigenvectors[:,1])
                println(eigenvalues)
                println("jaajajajjaa")
                println(innerProduct(eigenvectors[:,1],eigenvectors[:,1],states))
                println(energy_basis_vector)
            end


            eigenvectors=eigenvectors[:,indexes]
            eigenvalues=eigenvalues[indexes]
            energy_basis_vector=energy_basis_vector[indexes]

            println("calculating matrix elements")
            println("length of eigenvalues")
            println(length(indexes))
            println(length(eigenvalues))

            @time begin
            matrix=calculate_matrix_elements_j_y(eigenvectors, N, 1)
            end

            beta=0.4

            equilibrium=[]

            ts=[]
            prefactor=calculate_Time_Evolved_Z_Pre(energy_basis_vector, eigenvectors, N, 1,matrix)
            for t in range(0,20,step=0.25)
                #println("t="*string(t))
                push!(ts,t)
                temp1=calculate_Time_Evolved_Z(energy_basis_vector, eigenvalues, eigenvectors, N, t,states,1,matrix)
                push!(time_evolved, prefactor+temp1)
                push!(equilibrium, eq)
            end
            #println(time_evolved)
            push!(es, time_evolved)
        end
        avgs=[]
        for i=1:length(es[1])
            s=0
            for j=1:length(es)
                s+=es[j][i]/length(es)
            end
            push!(avgs, s)
        end
        if(i==1)
            plot(ts, real.(avgs), xlabel="Time", ylabel="<Sy>", title="Sy vs time for different disordered system sizes", label="L="*string(Ls[i]))

            #plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different disordered system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

        else
            plot!(ts, real.(avgs), xlabel="Time", ylabel="<Sy>", title="Sy vs time for different disordered system sizes", label="L="*string(Ls[i]))
            #plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different disordered system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

        end
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./sy disordered time evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end


function construct_initial_state_4()
    L = 12
    a_list = []
    
    # Initialize A_start and A_end correctly as 2x1 matrices
    A_start = reshape([1, 0], (2, 1))
    A_end = reshape([1, 0], (2, 1))
    
    # Initialize A_mid as a 2x1x1 array
    A_mid = reshape([1, 0], (2, 1, 1))  # Reshaping a 2-element vector into 2x1x1
    
    push!(a_list, A_start)
    for i = 2:L-1
        push!(a_list, A_mid)
    end
    push!(a_list, A_end)
    
    return a_list
end


function test_energy_2()
    hx=-1.05
    hz=0.5
    L=12
    J=-1
    k=14
    gs=[]
    ts=[0.0]
    pbc=false
    bonds=bonds1D(12,pbc)
    #a_list=construct_initial_state_4()
    println("hellooo")
    a_list=construct_initial_state_4()
    println("hellooo")

    deltat=0.01
    energy=get_energy_mps_2(a_list, a_list, bonds, J, hx, hz)
    push!(gs, energy)
    println("initial")
    for i=1:length(a_list)
        println(size(a_list[i]))
    end
    println("energy")
    println(energy)


    for i=1:500
        a_list=time_evolve_step(a_list,deltat, bonds, k, hx, hz)
        energy=get_energy_mps_2(a_list, a_list, bonds, J, hx, hz)/calculate_mps_overlap(a_list,a_list)
        println("energy")
        println(energy)
        push!(gs, energy)
        push!(ts, Float64(i)*deltat)
        
        println("final")
        for i=1:length(a_list)
            println(size(a_list[i]))
        end
        println("bye")
    end

    plot(ts, gs,xlabel="imaginary time", ylabel="energy", title="energy vs. imaginary time")
    savefig("./time evolved mps.png")

end

function test_matrix()
    matrix=[1 0 0 0 ; 0 -1 0 0 ; 0 0 1 0 ; 0 0 0 -1]
    #matrix=exp(-sz)
    matrix=reshape(matrix, (2,2,2,2))
    println("lalala")
    println(matrix)
    println(matrix[1,2,1,2])
    println(matrix[2,1,2,1])
    println(matrix[2,2,1,1])
end



function find_disordered_time_evo_entanglement()
    print("lololo")
    latticeType = "1d"
    #heisenberg or transverse

    hamiltonianType = "transverse"
    #symmetry or momentum2d or reflection
    #lanczos (Krylovit), full (LinearALgebra), sparse (Arpack)
    eigmethod = "full"
    num = "all"
    file = false
    pbc::Bool=true
    bonds::Array{bond} = bond[]
    hs = Float64[]
    hs2 = Float64[]
    
    J = -1
    J2 = 0
    N = 6
    states=[]
    #!!!!
    maxSites = 10
    numSites=1
    N=numSites
    width = 0
    Ls=[]
    for i in range(6, maxSites, step=2)
        push!(Ls, i)
    end
    Ls=Integer.(Ls)
    print(Ls)
    hx=-1.05
    hz=0.5

    subsites=1

    nummax=20
    
    states=[];

        for i=1:N
            push!(hs2,0)
        end

        listA=[]

        bonds=bonds1D(N, pbc)
        for i=1:length(Ls)
            numSites=Ls[i]
            N=numSites
            empty!(hs)
            empty!(hs2)
            ts=[]
            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end

            for i=0:N-1
                push!(hs, hx);
            end

            empty!(listA)
            for j=1:div(Ls[i],2)
                push!(listA, j)
            end
            bonds=bonds1D(N, pbc)
            empty!(states)
            for i=0:2^N-1
                push!(states, i)
            end
            println(numSites)
            the_vector=reverse(constructProductState(Ls[i]))


            es=[]

            maxnum=10
            for n=1:maxnum
            d = Uniform(-3,3)
            hs2=rand(d, N)

            time_evolved=[]

            temp = calculateEigensystemTransverseNoSymmetrySxSz(numSites, J, J2, hs, hs2, bonds, eigmethod, num)
            eigenvalues = temp[1]
            eigenvectors = temp[2]
            println("jaajajajjaa")
            println(size(eigenvectors))

            #!!!!!!!!!!!!

            beta=0.4

            sorted_indices = sortperm(eigenvalues)
            eigenvalues=eigenvalues[sorted_indices]
            eigenvectors=eigenvectors[:,sorted_indices]


            indexes,energy_basis_vector=expand_energy_eigenbasis(eigenvectors, the_vector,states)
            if(numSites==6)
                println("uau")
                println(eigenvectors[:,1])
                println(eigenvalues)
                println("jaajajajjaa")
                println(innerProduct(eigenvectors[:,1],eigenvectors[:,1],states))
                println(energy_basis_vector)
            end


            eigenvectors=eigenvectors[:,indexes]
            eigenvalues=eigenvalues[indexes]
            energy_basis_vector=energy_basis_vector[indexes]

            println("calculating matrix elements")
            println("length of eigenvalues")
            println(length(indexes))
            println(length(eigenvalues))

            beta=0.4
            ts=[]

            for t in range(0,20,step=0.25)
                lol=get_time_evolved_state(energy_basis_vector, eigenvalues, eigenvectors, t)
                push!(ts,t)
                temp1=getEntanglementEntropy(lol, states, listA, N)
                push!(time_evolved, temp1)
            end
            #println(time_evolved)
            push!(es, time_evolved)
        end
        avgs=[]
        for i=1:length(es[1])
            s=0
            for j=1:length(es)
                s+=es[j][i]/length(es)
            end
            push!(avgs, s)
        end
        if(i==1)
            plot(ts, real.(avgs), xlabel="Time", ylabel="Entanglement entropy", title="Entanglement vs time for different disordered system sizes", label="L="*string(Ls[i]))

            #plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different disordered system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

        else
            plot!(ts, real.(avgs), xlabel="Time", ylabel="Entanglement entropy", title="Entanglement vs time for different disordered system sizes", label="L="*string(Ls[i]))
            #plot!(ts, real.(equilibrium), xlabel="Time", ylabel="<Sz>", title="Sz vs time for different disordered system sizes", linestyle=:dash,label=" Equilibrium L="*string(Ls[i]))

        end
        end
    #savefig("Users/Jessica/git/Square Spin Ice/szplot.png")
    savefig("./entanglement disordered time evolved, , max_sites="*string(Ls[end])*"pbc, "*string(pbc)*" sparse"*".png");
end

function test_energy_matrix()
    t=0.1
    d = Uniform(-1,1)
    L=2
    all_data=[]
    all_data_Ls=[]

    x=rand(d,L)
    x=[0.2,0.3]
    histogram(x)
    savefig("histogram.png")
    pbc=true
    bonds=bonds1D(L, pbc)
    H=build_anderson_hamiltonian_1d(x, bonds, L, t)
    println(H)
    eigtemp=eigen(Hermitian(H));
    eigenvalues=eigtemp.values

    println("eigenvectors")
    println(eigtemp.vectors)

    println("brute force matrix ")
    A1=build_Vijkl_matrix_no_symmetry(eigtemp.vectors, eigenvalues, bonds)
    println(size(A1))

    println(A1)

    println("non brute force matrix ")
    A2=build_Vijkl_matrix(eigtemp.vectors)
    println(size(A2))

            
    println(A2)
end


# working now
function plot_transport_norm_distribution()
    t=1
    d = Uniform(-1,1)
    all_data=[]
    all_data_Ls=[]

    iters=10000 
    phases=range(0, stop=1/sqrt(2), length=10000)

    count=0
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    ls=collect(range(start=20, stop=100, step=10))
    gradient = cgrad([:red, :yellow, :blue], length(vs))

    for v in vs
        println("v="*string(v))
        all_data=[]
        count=1
        print(ls)
        for L in ls
            i_0=div(L, 2)
            gs=[]
            xrange=1:L
            for phase in phases
                while(true)
                #x=v*cos.(2*pi*sqrt(2).*(xrange.+phase))
                x=v*rand(d,L)
                #append!(x, reverse(copy(x)))
                pbc=false
                bonds=bonds1D(L, pbc)
                H=build_anderson_hamiltonian_1d(x, bonds, L, t)
                if(any(isnan, H) || any(isinf, H))
                    continue
                end
                eigtemp=nothing
                try
                    eigtemp=eigen(Hermitian(H));
                    eigenvalues=[]
                    append!(eigenvalues, eigtemp.values);
                    W=operator_norm(transport_operator(eigtemp.vectors, eigtemp.values, i_0))
                    append!(gs,W)
                catch
                    continue
                end

                break
                end
            end
            push!(all_data,gs)
            count+=1
        end
        count+=1
        save_object("6_9_noninteracting_transport_disordered_op_norm_v="*string(v)*".jld2", all_data)
    end
end

#here
function plot_v_distribution()
    t=1
    d = Uniform(-1,1)
    all_data=[]
    all_data_Ls=[]

    iters=500

    count=0
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    ls=collect(range(start=20, stop=80, step=20))
    gradient = cgrad([:red, :yellow, :blue], length(ls))

    for v in vs
        p = plot(title="Distribution of Perturbation Matrix Elements, v="*string(v), xlabel="v", ylabel="normalized count")
        all_data=[]
        count=1
        for L in ls
            println("L="*string(L))
            # for each L we get a distribution
            ls=[]
            gs=[]
            for i=1:iters
                x=v*rand(d,L)
                pbc=true
                bonds=bonds1D(L, pbc)
                H=build_anderson_hamiltonian_1d(x, bonds, L, t)
                eigtemp=eigen(Hermitian(H));
                eigenvalues=[]
                append!(eigenvalues, eigtemp.values);
                V=Array{Float64, 4}(build_Vijkl_matrix(eigtemp.vectors))
                W=norm(V)
                append!(gs,W)
            end
            push!(all_data,gs)
            stephist!(p,(gs), label="v="*string(v), norm = true, color=gradient[count])
            count+=1
            xs=1:10
            #plot!(p, xs, exp.(-xs),yaxis = (:log10, (0.0000001,Inf)), label="fit")
        end
        count+=1
        save_object("perturbation_norm_data_v="*string(v)*".jld2", all_data)
        savefig("./Perturbation Norm Distributions scaled, v="*string(v)*".png");
    end
end

function plot_energy_distributions()
    t=1
    d = Uniform(-1,1)
    all_data=[]
    all_data_Ls=[]
    iters=10

    count=0
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    ls=collect(range(start=20, stop=80, step=20))
    gradient = cgrad([:red, :yellow, :blue], length(ls))
    part_data=[]

    for v in vs
        p = plot(title="Distribution of Energy Denominators, v="*string(v), xlabel="E_alpha+E_beta-E_gamma-E_delta")
        all_data=[]
        count=1
        print("v="*string(v))
        for L in ls
            println("L="*string(L))
            # for each L we get a distribution
            gs=[]
            for i=1:iters
                x=v*rand(d,L)
                pbc=false
                bonds=bonds1D(L, pbc)
                H=build_anderson_hamiltonian_1d(x, bonds, L, t)
                eigtemp=eigen(Hermitian(H));
                calculate_participation_ratio(eigtemp.vectors)
                #append!(eigenvalues, eigtemp.values);
                #energies=vec(build_energy_differences_matrix(eigtemp.values))
                #append!(gs,energies)
            end
            push!(all_data,gs)
            stephist!(p,(gs), label="L="*string(L), norm = true, color=gradient[count])
            count+=1
        end
        #save_object("noninteracting_transport_v="*string(L)*".jld2", all_data)
        #savefig("./Energy Denominators Distributions v="*string(v)*".png");
    end
    #save_object("participation_ratio_v="*string(v)*".jld2", part_data)
end


function plot_transport_norm_distribution_over_position()
    t=0.1
    d = Uniform(-1,1)
    maxL=80
    all_data=[]
    all_data_Ls=[]

    p = plot(title="Position dependence of noninteracting log||O||", xlabel="x", ylabel="log||O||")
    p1=plot(title="Disorder", xlabel="x", ylabel="Disorder Value")

    i_0=1
    L=80
    count=0
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        x=rand(d,L)

            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))

        for i=1:L-1
            push!(ls, L)
            W=norm(transport_operator(eigtemp.vectors, eigenvalues, i))
            append!(gs,W)
        end
        println(gs)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    ls1=1:L-1
    plot!(p,1:L-1, log.((t^2)*gs), xlabel="x", ylabel="log||O||")
    plot!(p1, 1:L, x)
    plot(p, p1)
    savefig("./position distribution of interacting norm transport 2, maxL="*string(maxL)*".png");
end


function plot_transport_norm_average_distribution()
    t=1
    d = Uniform(-1,1)
    maxL=150
    all_data=[]
    all_data_Ls=[]

    iters=100
    p = plot(title="Average of Norm of Os at different Ls", xlabel="L", ylabel="log||O||")
    errors=[]
    v=2

    count=0
    ls=[]
    for L in range(10, maxL, step=10)
        i_0=1
        println("L")
        println(L)
        # for each L we get a distribution
        gs=[]
        push!(ls, L)
        for i=1:iters
            x=v*rand(d,L)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
            W=norm(interacting_transport_operator(eigtemp.vectors, eigenvalues, i_0))
            append!(gs,W)
        end
        println(gs)
        push!(all_data_Ls, L)
        push!(all_data,mean(log.(gs)))
        push!(errors, std(log.(gs)))

        #stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="L="*string(L), norm = true,yaxis = (:log10, (0.0000001,Inf)))
        xs=1:10
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    plot!(p, ls, (all_data), yerr=errors)
    savefig("./average operator norm transport, maxL="*string(maxL)*".png");
end


function plot_transport_norm_vs_V_quasiperiodic()
    t=1
    d = Uniform(-1,1)
    all_data=[]
    all_data_Ls=[]
    L=50
    V=collect(range(start=0.5, stop=1, step=0.05))

    p = plot(title="Norm distribution interacting operator quasiperiodic", xlabel="log||O||", ylabel="Normalized Count")
    i_0=1:L

    count=0
    ls=[]
    for v in V
        # for each L we get a distribution
        gs=[]
        xrange=1:L
        x=v*cos.(2*pi*sqrt(2)*xrange)
        pbc=true
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
        for i_0=1:L-1
            W=norm(interacting_transport_operator(eigtemp.vectors, eigtemp.values, i_0))
            append!(gs,W)
        end
        println(gs)
        push!(all_data_Ls, L)
        push!(all_data,mean(log.(gs)))
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="v="*string(v), norm = true)
    count+=1
    end
    savefig("./norm distribution interacting vs potential, L="*string(L)*".png");
end

function w_svd_test()
    L=50
    ls=collect(range(start=20, stop=50, step=10))
    d=Uniform(-1, 1)

    pbc=true
    t=1
    iterations=200
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    gradient = cgrad([:red, :yellow, :blue], length(ls))

    for v in vs
        p = plot(title="Singlar Values distribution, v="*string(v), xlabel="L", ylabel="Counts", legend=true)
        count=1
        #sorted per L
        part_data=[]
        for L in ls
            gs=[]
            for i=1:iterations
                x=v*rand(d, L)
                bonds=bonds1D(L, pbc)
                H=build_anderson_hamiltonian_1d(x, bonds, L, t)
                eigtemp=eigen(Hermitian(H));
                #W=build_W_matrix_tensor_op(eigtemp.values, eigtemp.vectors)
                W=interacting_transport_operator(eigtemp.vectors, eigtemp.values, 1)
                W=reshape(W, (size(W, 1)^2,size(W, 1)^2))
                try
                U, S, V=svd(W)
                append!(gs, S)
                catch
                    continue
                end
            end

            stephist!(p, log.(gs), label="L="*string(L), norm=true, color=gradient[count])
            count+=1
        end
        savefig("./interacting disorder transport singular values v="*string(v)*".png");
    end
end

function plot_distribution_localization_length()
    iterations=500
    vs=collect(range(start=0.1, stop=3.1, step=0.1))
    ls=collect(range(start=20, stop=300, step=10))
    gradient = cgrad([:red, :yellow, :blue], length(vs))
    t=1
    d=Uniform(-1,1)
    count=1

    pbc=false
    p = plot(title="Participation ratios distribution", xlabel="L", ylabel="1/IPR", legend=true)
    for v in vs
        println("v="*string(v))
        part_data=[]
        for L in ls
            println("L="*string(L))
        gs=[]
        for i=1:iterations
            x=v*rand(d, L)
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            for m=1:L
                part=calculate_participation_ratio(eigtemp.vectors[:,m])
                push!(gs, 1/part)
            end
        end
        #stephist!(p, log.(gs), label="L="*string(L), norm=true, color=gradient[count])
        push!(part_data, mean(gs))
    end
    plot!(p, log.(ls), part_data, label="v="*string(v), norm=true, color=gradient[count], yaxis=:log)
    count+=1
    save_object("participation_ratio_quasiperiodic_v="*string(v)*".jld2", part_data)
    #save_object("participation_ratio_Ls_v="*string(v)*".jld2", ls)
    end
end


function plot_transport_norm_vs_i0()
    t=1
    d=Uniform(-1,1)
    ls=collect(range(start=80, stop=80, step=1))
    vs=collect(range(start=2, stop=2, step=1))
    println(ls)
    gradient = cgrad([:red, :yellow, :blue], length(vs))
    phases=range(0, stop=0, length=1)
    #theme(:lime)
    all_data=[]
    count=1
    temp=[]
    count1=1

    p=plot()

    for v in vs
        p = plot(title="Avg frobenius norm O(0) vs. i_0, clean, v="*string(v), xlabel="i_0", ylabel="Avg(||O(0)||)")
        temp=[]
        println("v="*string(v))
        errors=[]
        all_data=[]
    for L in ls
        println("L="*string(L))
        # for each L we get a distribution
        gs=[]
        i_0=1:L
        xrange=1:L
        for phase in phases
            x=v*rand(d, L)
            pbc=false
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            norms=[]
            i0s=collect(range(start=1, stop=L-1, step=1))
            for i_0=1:L-1
                W=norm(transport_operator(eigtemp.vectors, eigtemp.values, i_0))
                append!(norms,W)
            end
            plot!(p,i0s,norms, label="i_0="*string(i_0))
            savefig("./norm and position.png")
        end
        #push!(all_data, gs)
        #gs=log.(abs.(gs[abs.(gs).>0]))
        #push!(errors, std(gs))
        #push!(temp, mean((abs.(gs[abs.(gs.>0)]))))
        #stephist!(p,gs, label="L="*string(L), norm = true, color=gradient[count])
    count+=1
    end
    #plot!(p,ls, temp, title="Median frobenius norm O(0) vs. L, quasiperiodic", xlabel="L", ylabel="Mean of ||O||", color=gradient[count1],label="v="*string(v))
    #save_object("noninteracting_transport_distribution_quasiperiodic_v="*string(v)*".jld2", all_data)
    #save_object("noninteracting_transport_distribution_quasiperiodic_Ls_v="*string(v)*".jld2", ls)
    count1+=1
end
end


#
function plot_transport_norm_vs_L_quasiperiodic()
    t=1
    d=Uniform(-1,1)
    ls=collect(range(start=20, stop=80, step=10))
    vs=collect(range(start=0.6, stop=1.1, step=0.5))
    println(ls)
    gradient = cgrad([:red, :yellow, :blue], length(vs))
    phases=range(0, stop=1/sqrt(2), length=500)
    #theme(:lime)
    p = plot(title="Avg frobenius norm O(1) vs. L free", xlabel="L", ylabel="median(||O(1)||)", legend=true)
    all_data=[]
    count=1
    temp=[]
    count1=1

    p=plot()

    for v in vs
        temp=[]
        println("v="*string(v))
        errors=[]
        all_data=[]
    for L in ls
        println("L="*string(L))
        # for each L we get a distribution
        gs=[]
        i_0=div(L, 2)
        xrange=1:L
        for phase in phases
            #x=v*cos.(2*pi*sqrt(3).*(xrange.+phase))
            x=v*rand(d, L)
            pbc=false
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
            #for i_0=1:L-1
                W=find_norm_operator(interacting_transport_operator(eigtemp.vectors, eigtemp.values, i_0))
                append!(gs,W)
            #end
            if(v==0)
                break
            end
        end
        println(typeof(gs))
        push!(all_data, gs)
        #gs=log.(abs.(gs[abs.(gs).>0]))
        push!(temp, median((abs.(gs[abs.(gs.>0)]))))
        #stephist!(p,gs, label="L="*string(L), norm = true, color=gradient[count])
    count+=1
    end
    plot!(p,(ls), (temp), title="median full forbenius norm O(1) vs. L, free", xlabel="L", ylabel="(median of ||O(1)||)", color=gradient[count1],label="v="*string(v))
    save_object("5_26_interacting_transport_distribution_disordered_v="*string(v)*".jld2", all_data)
    #save_object("noninteracting_transport_distribution_disorder_Ls_v="*string(v)*".jld2", ls)
    count1+=1
end
end


function plot_transport_norm_vs_L_quasiperiodic_sampling()
    t=1
    d=Uniform(-1,1)
    ls=collect(range(start=20, stop=80, step=10))
    vs=collect(range(start=0.1, stop=0.6, step=0.5))
    println(ls)
    gradient = cgrad([:red, :yellow, :blue], length(vs))
    phases=range(0, stop=1/sqrt(2), length=500)
    #theme(:lime)
    all_data=[]
    count=1
    temp=[]
    count1=1

    p=plot()

    for v in vs
        temp=[]
        println("v="*string(v))
        errors=[]
        agp_norms=[]
        liom_norms=[]
        weight_norm=[]

    for L in ls
        println("L="*string(L))
        # for each L we get a distribution
        agp_temp=[]
        liom_temp=[]
        disorders=[]

        i_0=div(L, 2)
        for phase in phases
            temppp=[]
            xrange=1:L
            x=v*cos.(2*pi*sqrt(2).*(xrange.+phase))
            #x=v*rand(d, L)
            pbc=false
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            V=Array{Float64, 4}(build_Vijkl_matrix(eigtemp.vectors))
            E, zero_indicies=build_energy_differences_matrix(eigtemp.values)
            V[zero_indicies].=0
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
            #W1=(norm(interacting_transport_operator(eigtemp.vectors, eigtemp.values, i_0, V, E)))
            W4=build_W_matrix_tensor_op(eigtemp.values, eigtemp.vectors, V, E)
            distances=get_distances_matrix(eigtemp.vectors, pbc)
            AGP_norm=find_norm_operator(W4)
            for i_0=1:L
                F1=find_norm_operator(calculate_f_from_w(W4, i_0))
                push!(temppp, F1)
            end
            push!(agp_temp, AGP_norm)
            push!(liom_temp, temppp)
        end
        push!(agp_norms, agp_temp)
        push!(liom_norms, liom_temp)
    count+=1

    end
    #save_object("sqrt3_interacting_transport_distribution_disorder_v="*string(v)*".jld2", all_data_1)
    #save_object("all_orbital_corrections_v="*string(v)*".jld2", all_data_2)
    #save_object("interacting_transport_distribution_disorder_v="*string(v)*"i_0=L21.jld2", all_data_2)
    #save_object("interacting_transport_distribution_disorder_v="*string(v)*"i_0=L20.jld2", all_data_3)
    save_object("6_1_agp_quasiperiodic_v="*string(v)*".jld2", agp_norms)
    save_object("6_1_liom_corrections_quasiperiodic_v="*string(v)*".jld2", liom_norms)
    #save_object("noninteracting_transport_distribution_disorder_Ls_v="*string(v)*".jld2", ls)
    count1+=1
end

end

#WIP
function N_L_matrix()
    
end

function plot_transport_norm_vs_V_disorder()
    t=1
    d = Uniform(-1,1)
    all_data=[]
    all_data_Ls=[]
    L=50
    V=collect(range(start=1.5, stop=2.5, step=0.05))

    p = plot(title="Norm distribution disordered", xlabel="log||O||", ylabel="Normalized Count")
    i_0=1:L

    count=0
    iterations=100
    for v in V
        # for each L we get a distribution
        gs=[]
        for m in 1:iterations
            x=v*rand(d,L)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
                for i_0=1:L-1
                    W=operator_norm(transport_operator(eigtemp.vectors, eigtemp.values, i_0))
                    append!(gs,W)
                end
        end
        println(size(gs))
        stephist!(p,log.(abs.(gs[abs.(gs).>0])), label="v="*string(v), norm = true)
    count+=1
    end
    savefig("./operator norm distribution vs potential disorder, L="*string(L)*".png");
end


function plot_orbital_correction_norm_avg()
    t=1
    d=Uniform(-1,1)
    ls=collect(range(start=20, stop=80, step=10))
    vs=collect(range(start=0.1, stop=3.1, step=0.5))
    println(ls)
    gradient = cgrad([:red, :yellow, :blue], length(vs))
    phases=range(0, stop=1/sqrt(2), length=500)
    #theme(:lime)
    p = plot(title="Avg frobenius norm correction to F, disordered system", xlabel="L", ylabel="Avg(Log||O||)", legend=false)
    all_data=[]
    count=1
    temp=[]
    count1=1

    p=plot()

    for v in vs
        temp=[]
        println("v="*string(v))
        errors=[]
        all_data=[]
    for L in ls
        println("L="*string(L))
        # for each L we get a distribution
        gs=[]
        i_0=1:L
        xrange=1:L
        for phase in phases
            #x=v*cos.(2*pi*sqrt(2).*(xrange.+phase))
            x=v*rand(d, L)
            pbc=false
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
            #for i_0=1:L-1
            W=build_W_matrix_tensor_op(eigtemp.values, eigtemp.vectors)
            for i=1:L
                F=calculate_f_from_w(W, i)
                no=norm(F)
                push!(gs, no)
            end
            #end
        end
        push!(all_data, gs)
        #gs=log.(abs.(gs[abs.(gs).>0]))
        push!(errors, std(gs))
        push!(temp, median(log.(abs.(gs[abs.(gs.>0)]))))
        #stephist!(p,gs, label="L="*string(L), norm = true, color=gradient[count])
    count+=1
    end
    plot!(p,ls, temp, title="Median frobenius norm orbital correction vs. L, disordered", xlabel="L", ylabel="Median of ||O||", color=gradient[count1],label="v="*string(v))
    save_object("orbital_correction_disordered_v="*string(v)*".jld2", all_data)
    save_object("orbital_correction_disordered_Ls_v="*string(v)*".jld2", ls)
    count1+=1
end
    savefig("./orbital correction median disordered vs L.png");
end

function plot_transport_norm_vs_L_disorder()
    t=1
    d=Uniform(-1,1)
    ls=collect(range(start=20, stop=100, step=10))
    v=2
    println(ls)
    gradient = cgrad([:pink, :black], length(ls))
    #theme(:lime)
    p = plot(title="Frobenius norm distribution disorder of ||O^0||, v="*string(v), xlabel="log||O_0||", ylabel="log of Normalized Count")
    count=1

    iterations=500

    all_data=[]
    all_data_Ls=[]

    for L in ls
        # for each L we get a distribution
        println("L="*string(L))
        gs=[]
        i_0=1:L
        for m in 1:iterations
        x=v*rand(d, L)
        pbc=false
        bonds=bonds1D(L, pbc)
        H=build_anderson_hamiltonian_1d(x, bonds, L, t)
        eigtemp=eigen(Hermitian(H));
        #W=norm(transport_operator(eigtemp.vectors, eigenvalues, i_0))
        for i_0=1:L-1
            W=norm(transport_operator(eigtemp.vectors, eigtemp.values, i_0))
            append!(gs,W)
        end
        end
        #tee=log.(abs.(gs[abs.(gs).>0]))
        stephist!(p,gs, label="L="*string(L), norm = true, color=gradient[count], yaxis=:log, xaxis=:log)
        push!(all_data, gs)
        push!(all_data_Ls, L)
    count+=1
    end
    intercept=10^1
    slope=-0.05
    x = range(10^1, 10^5, length=1000)
    curve =  (x.^(-2.2))
    plot!(p, x, curve, label="Power law decay x^{-2.2}", ylims=(10^-6,10^1), linewidth=5, thickness_scaling = 1)
    
    #save_object("noninteracting_transport_distribution_obc="*string(ls[end])*"_v="*string(v)*".jld2", all_data)
    #save_object("noninteracting_transport_distribution_Ls_data_maxL_obc="*string(ls[end])*"_v="*string(v)*".jld2", all_data_Ls)
    savefig("./new disorder norm distribution noninteracting vs L obc nonlog, v="*string(v)*".png");
end


function plot_transport_norm_distribution_quasiperiodic()
    t=0.1
    d = Uniform(-1,1)

    maxL=90
    all_data=[]
    all_data_Ls=[]

    iters=1
    p = plot(title="Norm of Interacting Transport vs. L for quasiperiodic case", xlabel="L", ylabel="log||O||")
    i_0=1

    count=0
    gs=[]
    ls=[]

    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
            #x=rand(d,L)
            xrange=1:L
            x=cos.(2*pi*sqrt(6)*xrange)
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            W=norm(interacting_transport_operator(eigtemp.vectors, eigenvalues, i_0))
            #W=norm(interacting_transport_operator(eigtemp.vectors, eigenvalues, i_0))
            append!(gs,W)
            append!(ls, L)
        println(gs)
    count+=1
    #clear(p, ls, log.(gs), label=string(i), linewidth=2)
    #plot!(ls, (gs),title="Norm of W vs. L", xlabel="L", ylabel="Norm of W", label=string(i))
    end
    plot!(p,ls, log.(abs.(gs)))
    println("HAHAHAHAHAHHAA")
    savefig("./distribution of interacting norm transport quasiperiodic, sqrt(6), maxL="*string(maxL)*".png");
end



function testtttt()
    t=0.1
    d = Uniform(-1,1)
    maxL=50
    all_data=[]
    all_data_Ls=[]

    iters=500
    p = plot(title="Distribution of Norm of Os at different Ls", xlabel="log||O||", ylabel="Count")
    i_0=1

    count=0
    for L in range(10, maxL, step=10)
        println("L")
        println(L)
        # for each L we get a distribution
        ls=[]
        gs=[]
        for i=1:iters
            x=rand(d,L)
            histogram(x)
            savefig("histogram.png")
            pbc=true
            bonds=bonds1D(L, pbc)
            H=build_anderson_hamiltonian_1d(x, bonds, L, t)
            eigtemp=eigen(Hermitian(H));
            eigenvalues=[]
            append!(eigenvalues, eigtemp.values);
            transport_operator(eigtemp.vectors, eigenvalues, i_0)
        end
        
    end
end
